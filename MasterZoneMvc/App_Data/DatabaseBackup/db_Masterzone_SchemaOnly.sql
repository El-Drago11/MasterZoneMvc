USE [master]
GO
/****** Object:  Database [masterzone_db]    Script Date: 19-02-2024 11:14:33 ******/
CREATE DATABASE [masterzone_db]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'masterzone_db', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\masterzone_db.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'masterzone_db_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\masterzone_db_log.ldf' , SIZE = 204800KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT, LEDGER = OFF
GO
ALTER DATABASE [masterzone_db] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [masterzone_db].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [masterzone_db] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [masterzone_db] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [masterzone_db] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [masterzone_db] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [masterzone_db] SET ARITHABORT OFF 
GO
ALTER DATABASE [masterzone_db] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [masterzone_db] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [masterzone_db] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [masterzone_db] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [masterzone_db] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [masterzone_db] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [masterzone_db] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [masterzone_db] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [masterzone_db] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [masterzone_db] SET  ENABLE_BROKER 
GO
ALTER DATABASE [masterzone_db] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [masterzone_db] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [masterzone_db] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [masterzone_db] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [masterzone_db] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [masterzone_db] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [masterzone_db] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [masterzone_db] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [masterzone_db] SET  MULTI_USER 
GO
ALTER DATABASE [masterzone_db] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [masterzone_db] SET DB_CHAINING OFF 
GO
ALTER DATABASE [masterzone_db] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [masterzone_db] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [masterzone_db] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [masterzone_db] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [masterzone_db] SET QUERY_STORE = OFF
GO
USE [masterzone_db]
GO
/****** Object:  DatabaseRole [gd_execprocs]    Script Date: 19-02-2024 11:14:33 ******/
CREATE ROLE [gd_execprocs]
GO
/****** Object:  Schema [columbia_user]    Script Date: 19-02-2024 11:14:33 ******/
CREATE SCHEMA [columbia_user]
GO
/****** Object:  Schema [masterzone_user]    Script Date: 19-02-2024 11:14:33 ******/
CREATE SCHEMA [masterzone_user]
GO
/****** Object:  Schema [user_UrbaPark]    Script Date: 19-02-2024 11:14:33 ******/
CREATE SCHEMA [user_UrbaPark]
GO
/****** Object:  UserDefinedFunction [dbo].[fnSplitString]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[fnSplitString] 
( 
    @string NVARCHAR(MAX), 
    @delimiter CHAR(1) 
) 
RETURNS @output TABLE(splitdata NVARCHAR(MAX) 
) 
BEGIN 
    DECLARE @start INT, @end INT 
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string) 
    WHILE @start < LEN(@string) + 1 BEGIN 
        IF @end = 0  
            SET @end = LEN(@string) + 1
       
        INSERT INTO @output (splitdata)  
        VALUES(SUBSTRING(@string, @start, @end - @start)) 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        
    END 
    RETURN 
END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAboutImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetAboutImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAboutImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAboutServiceIconWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetAboutServiceIconWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAboutServiceIcon/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAboutServiceImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetAboutServiceImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAboutServiceImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAccessCourseImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[GetAccessCourseImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAccessCourseImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAdvertisementImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetAdvertisementImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Advertisement/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAudioFileWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetAudioFileWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAudioFile/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetAudioImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetAudioImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessAudioImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBannerImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetBannerImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessBannerImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessCategoryImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Name
-- Create date: 
-- Description:	
-- =============================================
CREATE FUNCTION [dbo].[GetBusinessCategoryImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessCategory/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessContentEventImagesWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[GetBusinessContentEventImagesWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessEventImages/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessContentServiceImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetBusinessContentServiceImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessContentServices/' + @imageName ELSE '/Content/images/defaultBusinessContentServiceIcon.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessCoverImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[GetBusinessCoverImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessCover/' + @imageName ELSE '/Content/images/defaultBusinessCoverImage.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessLogoImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetBusinessLogoImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessLogo/' + @imageName ELSE '/Content/images/defaultBusinessLogoImage.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessPlanImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[GetBusinessPlanImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessPlans/' + @imageName ELSE '/Content/images/defaultPackageImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetBusinessProfileImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessProfile/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessServiceIconWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetBusinessServiceIconWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessServiceIcon/' + @imageName ELSE '/Content/images/defaultPackageImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessServiceImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetBusinessServiceImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessServiceImage/' + @imageName ELSE '/Content/images/defaultPackageImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessSponsorImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetBusinessSponsorImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessContentSponsorImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetBusinessVerifiedTextValue]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[GetBusinessVerifiedTextValue]
(
	-- Add the parameters for the function here
	@type int
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @type = 1 THEN 'Verified' WHEN @type = 2 THEN 'R' WHEN @type = 3 THEN 'TM' ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCertificateImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetCertificateImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Certificates/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassCategoryTypeImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetClassCategoryTypeImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ClassCategoryType/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassFeatureImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetClassFeatureImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ClassFeature/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassicDanceImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[GetClassicDanceImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ClassicDanceVideoImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassicDanceProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetClassicDanceProfileImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ClassicDanceProfileImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassicDanceTechniqueImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[GetClassicDanceTechniqueImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ClassicDanceTechniqueImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClassImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetClassImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName is not null and @imageName != '' THEN '/Content/Uploads/Images/Class/' + @imageName ELSE '/Content/images/defaultClassImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetClientImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetClientImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessClientImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCourseCategoryImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetCourseCategoryImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessCourseCategoryImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCourseImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetCourseImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessCourseImages/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetCurriculumImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[GetCurriculumImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessCurriculumImages/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetDocumentWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetDocumentWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Documents/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetEventCompanyImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetEventCompanyImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessEventCompanyImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetEventDetailsImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create FUNCTION [dbo].[GetEventDetailsImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/EventDetails/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetEventImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetEventImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Event/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetEventSponsorImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetEventSponsorImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/EventSponsor/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetExamLogoImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetExamLogoImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/ExamFormLogo/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetExploreMasterProfileWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[GetExploreMasterProfileWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessExploreMasterProfileImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetFamilyMemberProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetFamilyMemberProfileImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/FamilyMemberProfileImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetFitnessImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetFitnessImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessFitnessImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetGenderStringValue]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetGenderStringValue]
(
	-- Add the parameters for the function here
	@gender int
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @gender = 1 THEN 'Male' WHEN @gender = 2 THEN 'Female' ELSE 'Not Defined' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetGenderTextValue]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetGenderTextValue]
(
	-- Add the parameters for the function here
	@gender int
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @gender = 1 THEN 'Male' When @gender = 2 THEN 'Female' ELSE 'Other' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetGroupImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetGroupImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Group/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetHomePageImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[GetHomePageImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/HomePage/' + @imageName ELSE '/Content/images/no-image-mz.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetHomePageVideoWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create FUNCTION [dbo].[GetHomePageVideoWithPath] 
(
	-- Add the parameters for the function here
	@fileName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @fileName != '' THEN '/Content/Uploads/Videos/HomePage/' + @fileName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLanguageIconWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetLanguageIconWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessLanguageIcon/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLicenceQuantityUsedByBusiness]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetLicenceQuantityUsedByBusiness]
(
	-- Add the parameters for the function here
	@licenseBookingId bigint
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @quantityUsed int

	-- Add the T-SQL statements to compute the return value here
	SELECT @quantityUsed = Count(*) from Trainings t where t.LicenseBookingId = @licenseBookingId and 
	t.IsDeleted = 0
	
	-- Return the result of the function
	RETURN @quantityUsed

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLicenseBookingStatusText]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetLicenseBookingStatusText]
(
	-- Add the parameters for the function here
	@status int
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @status = 1 THEN 'Pending' when @status = 2 then 'Approved' when @status = 3 then 'Declined' else '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLicenseCertificateImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetLicenseCertificateImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/LicenseCertificate/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLicenseLogoImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetLicenseLogoImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/LicenseLogo/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetLicenseSignatureImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetLicenseSignatureImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/LicenseSignature/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMainPlanImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetMainPlanImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/MainPlanImage/' + @imageName ELSE '/Content/images/defaultPackageImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMasterProfileBannerImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetMasterProfileBannerImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessMasterProfileBannerImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMAsterProfileInstructorAboutWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetMAsterProfileInstructorAboutWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/InstructorMasterProfileAbout/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMemberShipPlanImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[GetMemberShipPlanImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/MemberShipPackageImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMenuImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetMenuImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Menu/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetMuchMoreServiceIconWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Function [dbo].[GetMuchMoreServiceIconWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessMuchMoreServiceIcon/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetPlanImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetPlanImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Plan/' + @imageName ELSE '/Content/images/defaultPackageImage.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetPortfolioImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetPortfolioImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessPortfolioImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetReviewImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Function [dbo].[GetReviewImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessReviewImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetStaffProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetStaffProfileImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Staff/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudentImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetStudentImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/StudentProfile/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetSubAdminProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetSubAdminProfileImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/SubAdminProfile/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetSubmitExamFromCandidateProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetSubmitExamFromCandidateProfileImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/SubmitExamFormProfileImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetSubmitExamFromCandidateSignWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[GetSubmitExamFromCandidateSignWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/SubmitExamFormSignature/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetSuperAdminProfileImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetSuperAdminProfileImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/SuperAdminProfile/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetSuperAdminSponsorImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetSuperAdminSponsorImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/SuperAdminSponsors/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetTeacherUniversityLogoWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetTeacherUniversityLogoWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessTeacherUniversityLogo/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetTennisImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetTennisImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessTennisImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetTrainingImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetTrainingImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/Training/' + @imageName ELSE '/Content/images/no-image-mz.jpg' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUniversityImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetUniversityImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessUniversityImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUniversityLogoWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetUniversityLogoWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessUniversityLogo/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUploadCVWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetUploadCVWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/MasterproUploadCV/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUserCertificateWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[GetUserCertificateWithPath] 
(
	-- Add the parameters for the function here
	@fileName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @fileName != '' THEN '/Content/Uploads/Certificates/' + @fileName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUserContentImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetUserContentImageWithPath] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/UserImageThumbNailImage/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetUserContentVedioImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Function [dbo].[GetUserContentVedioImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/UserVedioThumbNailImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetVideoThumbNailImage]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetVideoThumbNailImage] 
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/VideoThumbNailImage/' + @imageName ELSE '' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetWorldClassImageWithPath]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[GetWorldClassImageWithPath]
(
	-- Add the parameters for the function here
	@imageName nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Result = Case WHEN @imageName != '' THEN '/Content/Uploads/Images/BusinessWorldClassImage/' + @imageName ELSE '/Content/images/defaultProfileImg.png' END

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  UserDefinedFunction [dbo].[IsBusinessDataAvailableForVisitor]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[IsBusinessDataAvailableForVisitor]
(
	-- Add the parameters for the function here
	@businessOwnerLoginId bigint
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result int = 0

	-- Add the T-SQL statements to compute the return value here
	if exists(select bo.Id from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id where bo.UserLoginId = @businessOwnerLoginId and bo.IsAccountAccepted = 1 and ul.IsDeleted = 0 and ul.Status = 1)
	begin
		set @Result = 1
	end

	-- Return the result of the function
	RETURN @Result

END
GO
/****** Object:  Table [dbo].[__MigrationHistory]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[__MigrationHistory](
	[MigrationId] [nvarchar](150) NOT NULL,
	[ContextKey] [nvarchar](300) NOT NULL,
	[Model] [varbinary](max) NOT NULL,
	[ProductVersion] [nvarchar](32) NOT NULL,
 CONSTRAINT [PK_dbo.__MigrationHistory] PRIMARY KEY CLUSTERED 
(
	[MigrationId] ASC,
	[ContextKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Advertisements]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Advertisements](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Image] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[AdvertisementCategory] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[ImageOrientationType] [nvarchar](max) NULL,
	[CreatedForLoginId] [bigint] NOT NULL,
	[AdvertisementLink] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Advertisements] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ApartmentAreas]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApartmentAreas](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ApartmentId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ApartmentAreas] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ApartmentBlocks]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApartmentBlocks](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ApartmentId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ApartmentBlocks] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ApartmentBookings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApartmentBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[MasterId] [nvarchar](max) NULL,
	[BatchId] [bigint] NOT NULL,
	[ApartmentId] [bigint] NOT NULL,
	[FlatOrVillaNumber] [nvarchar](max) NULL,
	[Phase] [nvarchar](max) NULL,
	[Lane] [nvarchar](max) NULL,
	[OccupantType] [nvarchar](max) NULL,
	[Activity] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ApartmentAreaId] [bigint] NOT NULL,
	[ApartmentBlockId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ApartmentBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Apartments]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Apartments](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Blocks] [nvarchar](max) NULL,
	[Areas] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Apartments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Batches]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Batches](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[GroupId] [bigint] NOT NULL,
	[InstructorLoginId] [bigint] NOT NULL,
	[StudentMaxStrength] [int] NOT NULL,
	[ScheduledStartOnTime_24HF] [nvarchar](max) NULL,
	[ScheduledEndOnTime_24HF] [nvarchar](max) NULL,
	[ScheduledOnDateTime] [datetime] NOT NULL,
	[ClassDurationSeconds] [int] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Batches] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Branches]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Branches](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[BranchBusinessLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Branches] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessCategories]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NOT NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ParentBusinessCategoryId] [bigint] NOT NULL,
	[CategoryImage] [nvarchar](max) NULL,
	[CategoryKey] [nvarchar](max) NULL,
	[ProfilePageTypeId] [int] NOT NULL,
	[MenuTag] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BusinessCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessCertifications]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessCertifications](
	[CertificateId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessCertifications] PRIMARY KEY CLUSTERED 
(
	[CertificateId] ASC,
	[BusinessOwnerLoginId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentAbouts]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentAbouts](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[AboutImage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentAbouts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentAboutServiceDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentAboutServiceDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[AboutServiceTitle] [nvarchar](max) NULL,
	[AboutServiceDescription] [nvarchar](max) NULL,
	[AboutServiceIcon] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentAboutServiceDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentAccessCourseDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentAccessCourseDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CourseImage] [nvarchar](max) NULL,
	[AccessCourse] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentAccessCourseDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentBanners]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentBanners](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[ButtonText] [nvarchar](max) NULL,
	[ButtonLink] [nvarchar](max) NULL,
	[BannerImage] [nvarchar](max) NULL,
	[IsButtonActive] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentBanners] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentCategories]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentCategoryCource_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentCategoryCource_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[CourseCategoryId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentCategoryCource_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentClass_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentClass_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentClass_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentClassicDanceTechnique_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentClassicDanceTechnique_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[TechniqueItemList] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentClassicDanceTechnique_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentClassicDanceVideoSection_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentClassicDanceVideoSection_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Note] [nvarchar](max) NULL,
	[VideoImage] [nvarchar](max) NULL,
	[VideoLink] [nvarchar](max) NULL,
	[ButtonText] [nvarchar](max) NULL,
	[ButtonLink] [nvarchar](max) NULL,
	[ButtonText1] [nvarchar](max) NULL,
	[ButtonLink1] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentClassicDanceVideoSection_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentClient_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentClient_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[ClientImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentClient_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentContactInformation_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentContactInformation_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentContactInformation_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentCourseDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentCourseDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[CourseSignIcon] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentCourseDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentCurriculum_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentCurriculum_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[CurriculumOptions] [nvarchar](max) NULL,
	[CurriculumImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentCurriculum_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentEducation_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentEducation_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[University] [nvarchar](max) NULL,
	[UniversityLogo] [nvarchar](max) NULL,
	[UniversityImage] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentEducation_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentEvent_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentEvent_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentEvent_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentEventImages_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentEventImages_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[EventId] [bigint] NOT NULL,
	[Image] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentEventImages_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentExploreDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentExploreDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentExploreDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentFindMasterProfileDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentFindMasterProfileDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[ExploreType] [nvarchar](max) NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[ScheduleLink] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentFindMasterProfileDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentFitnessMovement_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentFitnessMovement_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[FitnessImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentFitnessMovement_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentFitnessMovements]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentFitnessMovements](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Requirements] [nvarchar](max) NULL,
	[Investment] [nvarchar](max) NULL,
	[Inclusions] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentFitnessMovements] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentImages]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentImages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ImageTitle] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentImages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentLanguage_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentLanguage_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[LanguageId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentLanguage_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMasterProfileBanner_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMasterProfileBanner_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BannerType] [nvarchar](max) NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[BannerImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMasterProfileBanner_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMasterProfileInstructorAboutSection_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMasterProfileInstructorAboutSection_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[ButtonText] [nvarchar](max) NULL,
	[ButtonLink] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMasterProfileInstructorAboutSection_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMemberShipPackageDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMemberShipPackageDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMemberShipPackageDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMembershipPlan_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMembershipPlan_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMembershipPlan_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMuchMoreService_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMuchMoreService_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Content] [nvarchar](max) NULL,
	[ServiceIcon] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMuchMoreService_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentMuchMoreServices]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentMuchMoreServices](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentMuchMoreServices] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentPlan_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentPlan_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[BusinessPlanTitle] [nvarchar](max) NULL,
	[BusinessPlanDescription] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentPlan_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentPortfolio_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentPortfolio_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[PortfolioImage] [nvarchar](max) NULL,
	[AudioImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentPortfolio_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentPortfolios]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentPortfolios](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[ArtistName] [nvarchar](max) NULL,
	[AudioFile] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentPortfolios] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentProfessionals]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentProfessionals](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[ProfessionalTitle] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentProfessionals] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentReview_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentReview_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ReviewImage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentReview_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentServices]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentServices](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ServiceTitle] [nvarchar](max) NULL,
	[ShortDescription] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentServices] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentSponsors]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentSponsors](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[SponsorTitle] [nvarchar](max) NULL,
	[SponsorIcon] [nvarchar](max) NULL,
	[SponsorLink] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentSponsors] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentStudioEquipment_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentStudioEquipment_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentStudioEquipment_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentStudioEquipments]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentStudioEquipments](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[EquipmentType] [nvarchar](max) NULL,
	[EquipmentValue] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentStudioEquipments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentTennis_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentTennis_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[TennisImage] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentTennis_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentTermCondition_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentTermCondition_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentTermCondition_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentUniversity_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentUniversity_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[UniversityId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentUniversity_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentVideoCategories]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentVideoCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentVideoCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentVideos]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentVideos](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[VideoTitle] [nvarchar](max) NULL,
	[VideoLink] [nvarchar](max) NULL,
	[VideoThumbnail] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[BusinessContentVideoCategoryId] [bigint] NOT NULL,
	[Description] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BusinessContentVideos] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentVideos_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentVideos_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[VideoDescription] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentVideos_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentWorldClassProgram_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentWorldClassProgram_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentWorldClassProgram_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessContentWorldClassPrograms]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessContentWorldClassPrograms](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[Options] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessContentWorldClassPrograms] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessCourseCategories]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessCourseCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CourseCategoryImage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessCourseCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessCustomForms]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessCustomForms](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomFormId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[TransferById] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessCustomForms] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessDocuments]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessDocuments](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[BusinessDocumentTypeId] [bigint] NOT NULL,
	[DocumentPath] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BusinessDocuments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessDocumentTypes]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessDocumentTypes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Value] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessDocumentTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessLanguages]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessLanguages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Language] [nvarchar](max) NULL,
	[LanguageIcon] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessLanguages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessNoticeBoards]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessNoticeBoards](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[StartDate] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessNoticeBoards] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessOwners]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessOwners](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[BusinessName] [nvarchar](max) NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[DOB] [nvarchar](max) NULL,
	[DOB_DateTime] [datetime] NOT NULL,
	[IsAccountAccepted] [int] NOT NULL,
	[RejectionReason] [nvarchar](max) NULL,
	[BusinessCategoryId] [bigint] NOT NULL,
	[IsPrimeMember] [int] NOT NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[BusinessLogo] [nvarchar](max) NULL,
	[About] [nvarchar](max) NULL,
	[BusinessSubCategoryId] [bigint] NOT NULL,
	[SpecialDiscount] [decimal](18, 2) NOT NULL,
	[SpecialPrice] [decimal](18, 2) NOT NULL,
	[SpecialDuration] [nvarchar](max) NULL,
	[Verified] [int] NOT NULL,
	[Experience] [nvarchar](max) NULL,
	[Privacy_UniqueUserId] [int] NOT NULL,
	[OfficialWebSiteUrl] [nvarchar](max) NULL,
	[StudentUserLoginId] [bigint] NOT NULL,
	[IsBranch] [int] NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
	[CoverImage] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BusinessOwners] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessPlanDurationTypes]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessPlanDurationTypes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Value] [nvarchar](max) NULL,
	[Key] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.BusinessPlanDurationTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessPlans]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessPlans](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[BusinessPlanDurationTypeId] [bigint] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[Status] [int] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[PlanImage] [nvarchar](max) NULL,
	[CompareAtPrice] [decimal](18, 2) NOT NULL,
	[DiscountPercent] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_dbo.BusinessPlans] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessReviews]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessReviews](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[StudentId] [bigint] NOT NULL,
	[Rating] [int] NOT NULL,
	[Review] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpadatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessReviews] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessServices]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessServices](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Icon] [nvarchar](max) NULL,
	[FeaturedImage] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessServices] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessStudents]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessStudents](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[StudentId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessStudents] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessTimings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessTimings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[DayName] [nvarchar](max) NULL,
	[DayValue] [int] NOT NULL,
	[IsOpened] [int] NOT NULL,
	[OpeningTime_12HoursFormat] [nvarchar](max) NULL,
	[OpeningTime_24HoursFormat] [nvarchar](max) NULL,
	[ClosingTime_12HoursFormat] [nvarchar](max) NULL,
	[ClosingTime_24HoursFormat] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessTimings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessUniversities]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessUniversities](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[UniversityName] [nvarchar](max) NULL,
	[Qualification] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[EndDate] [nvarchar](max) NULL,
	[UniversityLogo] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.BusinessUniversities] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BussinessContentEventCompanyDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BussinessContentEventCompanyDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[EventOptions] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.BussinessContentEventCompanyDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Certificates]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Certificates](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[CertificateIcon] [nvarchar](max) NULL,
	[ShortDescription] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[CertificateTypeKey] [nvarchar](max) NULL,
	[ShowOnHomePage] [int] NOT NULL,
	[Link] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Certificates] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ChatThreads]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChatThreads](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ThreadType] [int] NOT NULL,
	[CreatedByUserLoginId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ChatThreads] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CityMasters]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CityMasters](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[StateID] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Latitude] [nvarchar](max) NULL,
	[Longitude] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_dbo.CityMasters] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassBatches]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassBatches](
	[BatchId] [bigint] NOT NULL,
	[ClassId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ClassBatches] PRIMARY KEY CLUSTERED 
(
	[BatchId] ASC,
	[ClassId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassBookings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[ClassId] [bigint] NOT NULL,
	[StudentUserLoginId] [bigint] NOT NULL,
	[ClassQRCode] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[ClassPriceType] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[BatchId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ClassBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassCategoryTypes]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassCategoryTypes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessCategoryId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ParentClassCategoryTypeId] [bigint] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.ClassCategoryTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Classes]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Classes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[OnlineClassLink] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[Pincode] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ClassMode] [nvarchar](max) NULL,
	[ClassDays] [nvarchar](max) NULL,
	[Country] [nvarchar](max) NULL,
	[State] [nvarchar](max) NULL,
	[City] [nvarchar](max) NULL,
	[Latitude] [decimal](18, 15) NOT NULL,
	[Longitude] [decimal](18, 15) NOT NULL,
	[LandMark] [nvarchar](max) NULL,
	[IsPaid] [int] NOT NULL,
	[ClassPriceType] [nvarchar](max) NULL,
	[ClassURLLinkPassword] [nvarchar](max) NULL,
	[ClassType] [nvarchar](max) NULL,
	[ClassImage] [nvarchar](max) NULL,
	[HowToBookText] [nvarchar](max) NULL,
	[ClassDays_ShortForm] [nvarchar](max) NULL,
	[ClassCategoryTypeId] [bigint] NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Classes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassFeatures]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassFeatures](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ClassId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Icon] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ClassFeatures] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassicDanceProfileDetail_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassicDanceProfileDetail_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[ClassicImage] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[ScheduleImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ClassicDanceProfileDetail_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassicDanceTechniques]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassicDanceTechniques](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[SubTitle] [nvarchar](max) NULL,
	[TechniqueImage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ClassicDanceTechniques] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ClassPauseRequests]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ClassPauseRequests](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ClassBookingId] [bigint] NOT NULL,
	[PauseStartDate] [nvarchar](max) NULL,
	[PauseEndDate] [nvarchar](max) NULL,
	[PauseDays] [int] NOT NULL,
	[Reason] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[BusinessReply] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ClassPauseRequests] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContactDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContactDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Email] [nvarchar](max) NULL,
	[ContactNumber1] [nvarchar](max) NULL,
	[ContactNumber2] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ContactDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CountryMasters]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CountryMasters](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[CountryCode] [nvarchar](max) NULL,
	[ISO2] [nvarchar](max) NULL,
	[ISO3] [nvarchar](max) NULL,
	[NumericCode] [nvarchar](max) NULL,
	[PhoneCode] [nvarchar](max) NULL,
	[PhoneCodeWithPlus] [nvarchar](max) NULL,
	[Capital] [nvarchar](max) NULL,
	[CurrencyCode] [nvarchar](max) NULL,
	[CurrencyName] [nvarchar](max) NULL,
	[CurrencySymbol] [nvarchar](max) NULL,
	[TLD] [nvarchar](max) NULL,
	[Native] [nvarchar](max) NULL,
	[Region] [nvarchar](max) NULL,
	[Subregion] [nvarchar](max) NULL,
	[Latitude] [nvarchar](max) NULL,
	[Longitude] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_dbo.CountryMasters] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CouponConsumptions]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CouponConsumptions](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CouponId] [bigint] NOT NULL,
	[ConsumerUserLoginId] [bigint] NOT NULL,
	[ConsumptionDate] [datetime] NOT NULL,
	[CouponCode] [nvarchar](max) NULL,
	[IsFixedAmountCoupon] [int] NOT NULL,
	[CouponDiscountValue] [decimal](18, 2) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.CouponConsumptions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Coupons]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Coupons](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Code] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[IsFixedAmount] [int] NOT NULL,
	[DiscountValue] [decimal](18, 2) NOT NULL,
	[TotalUsed] [int] NOT NULL,
	[DiscountFor] [int] NOT NULL,
	[SelectedStudent] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Coupons] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomForm_Record]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomForm_Record](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FormId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ApplicantUserLoginId] [bigint] NOT NULL,
	[FormElementId] [bigint] NOT NULL,
	[FormElementName] [nvarchar](max) NULL,
	[FormElementValue] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.CustomForm_Record] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomFormElements]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomFormElements](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomFormId] [bigint] NOT NULL,
	[CustomFormElementName] [nvarchar](max) NULL,
	[CustomFormElementType] [nvarchar](max) NULL,
	[CustomFormElementValue] [nvarchar](max) NULL,
	[CustomFormElementPlaceholder] [nvarchar](max) NULL,
	[CustomFormElementStatus] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.CustomFormElements] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomFormOptions]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomFormOptions](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomFormElementId] [bigint] NOT NULL,
	[CustomFormId] [bigint] NOT NULL,
	[CustomFormElementOptions] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.CustomFormOptions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CustomForms]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CustomForms](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[CustomFormName] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.CustomForms] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DocumentDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DocumentDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[DocumentTitle] [nvarchar](max) NULL,
	[DocumentFile] [nvarchar](max) NULL,
	[RejectionReason] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.DocumentDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Enquiries]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Enquiries](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Gender] [nvarchar](max) NULL,
	[Email] [nvarchar](max) NULL,
	[DOB] [nvarchar](max) NULL,
	[DOB_DateTimeFormat] [datetime] NOT NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[AlternatePhoneNumber] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[Activity] [nvarchar](max) NULL,
	[LevelId] [bigint] NOT NULL,
	[BusinessPlanId] [bigint] NOT NULL,
	[ClassId] [bigint] NOT NULL,
	[StartFromDate] [nvarchar](max) NULL,
	[StartFromDate_DateTimeFormat] [datetime] NOT NULL,
	[Status] [nvarchar](max) NULL,
	[StaffId] [bigint] NOT NULL,
	[FollowUpDate] [nvarchar](max) NULL,
	[FollowUpDate_DateTimeFormat] [datetime] NOT NULL,
	[Notes] [nvarchar](max) NULL,
	[EnquiryStatus] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Enquiries] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EnquiryFollowsUps]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EnquiryFollowsUps](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[EnquiryId] [bigint] NOT NULL,
	[FollowedbyLoginId] [bigint] NOT NULL,
	[Comments] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.EnquiryFollowsUps] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EventBookings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EventBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[EventId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[EventTicketQRCode] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.EventBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EventCategories]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EventCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CategoryName] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.EventCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EventDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EventDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[EventId] [bigint] NOT NULL,
	[DetailsType] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[Name] [nvarchar](max) NULL,
	[Designation] [nvarchar](max) NULL,
	[Link] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.EventDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Events]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Events](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[IsPaid] [int] NOT NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartTime_24HF] [nvarchar](max) NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndTime_24HF] [nvarchar](max) NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NOT NULL,
	[TotalJoined] [int] NOT NULL,
	[EventLocationURL] [nvarchar](max) NULL,
	[ShortDescription] [nvarchar](max) NULL,
	[AboutEvent] [nvarchar](max) NULL,
	[AdditionalInformation] [nvarchar](max) NULL,
	[FeaturedImage] [nvarchar](max) NULL,
	[TicketInformation] [nvarchar](max) NULL,
	[Walkings] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[Country] [nvarchar](max) NULL,
	[State] [nvarchar](max) NULL,
	[City] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[LandMark] [nvarchar](max) NULL,
	[Pincode] [nvarchar](max) NULL,
	[Latitude] [decimal](18, 15) NOT NULL,
	[Longitude] [decimal](18, 15) NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
	[EventCategoryId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.Events] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EventSponsors]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EventSponsors](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[EventId] [bigint] NOT NULL,
	[SponsorTitle] [nvarchar](max) NULL,
	[SponsorIcon] [nvarchar](max) NULL,
	[SponsorLink] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.EventSponsors] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExamForms]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExamForms](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[BusinessMasterId] [nvarchar](max) NULL,
	[Title] [nvarchar](max) NULL,
	[EstablishedYear] [nvarchar](max) NULL,
	[BusinessLogo] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[SecretaryNumber] [nvarchar](max) NULL,
	[RegistrarOfficeNumber] [nvarchar](max) NULL,
	[Email] [nvarchar](max) NULL,
	[WebsiteLink] [nvarchar](max) NULL,
	[ImportantInstruction] [nvarchar](max) NULL,
	[ExamFormLogo] [nvarchar](max) NULL,
	[NameWithAddress] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[BusinessId] [bigint] NOT NULL,
	[CenterNo] [bigint] NOT NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_dbo.ExamForms] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExamFormSubmissions]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExamFormSubmissions](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ExamFormId] [bigint] NOT NULL,
	[SessionYear] [nvarchar](max) NULL,
	[CandidateProfileImage] [nvarchar](max) NULL,
	[Category] [nvarchar](max) NULL,
	[UserMasterId] [nvarchar](max) NULL,
	[CurrentRollNo] [nvarchar](max) NULL,
	[CandidateName] [nvarchar](max) NULL,
	[CandidateFather] [nvarchar](max) NULL,
	[CandidateMother] [nvarchar](max) NULL,
	[PermanentAddress] [nvarchar](max) NULL,
	[PermanentPin] [bigint] NOT NULL,
	[PermanentMobNo] [nvarchar](max) NULL,
	[PresentAddress] [nvarchar](max) NULL,
	[PresentPin] [bigint] NOT NULL,
	[PresentMobNo] [nvarchar](max) NULL,
	[Nationality] [nvarchar](max) NULL,
	[AadharCardNo] [bigint] NOT NULL,
	[DOB] [datetime] NOT NULL,
	[Email] [nvarchar](max) NULL,
	[EduQualification] [nvarchar](max) NULL,
	[CurrentClass] [nvarchar](max) NULL,
	[CurrentSubject] [nvarchar](max) NULL,
	[CurrentCenterName] [nvarchar](max) NULL,
	[CurrentCenterCity] [nvarchar](max) NULL,
	[PreviousClass] [nvarchar](max) NULL,
	[PreviousSubject] [nvarchar](max) NULL,
	[PreviousYear] [int] NOT NULL,
	[PreviousRollNo] [bigint] NOT NULL,
	[PreviousResult] [int] NOT NULL,
	[PreviousCenterName] [nvarchar](max) NULL,
	[Amount] [int] NOT NULL,
	[AmountInWord] [nvarchar](max) NULL,
	[NoOfAttached] [int] NOT NULL,
	[CertificateCollectFrom] [nvarchar](max) NULL,
	[CandidateSignature] [nvarchar](max) NULL,
	[CandidateGuradianSignature] [nvarchar](max) NULL,
	[CandidateGuradianName] [nvarchar](max) NULL,
	[BankDraftNo] [nvarchar](max) NULL,
	[BankDraftDate] [nvarchar](max) NULL,
	[PostalOrderNo] [nvarchar](max) NULL,
	[SuperintendentSignature] [nvarchar](max) NULL,
	[SuperintendentName] [nvarchar](max) NULL,
	[SuperintendentPinNo] [nvarchar](max) NULL,
	[SuperintendentPhoneNo] [nvarchar](max) NULL,
	[SuperintendentEmail] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ExamFormSubmissions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Expenses]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Expenses](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ExpenseDate] [nvarchar](max) NULL,
	[ExpenseDate_DateTimeFormat] [datetime] NOT NULL,
	[Remarks] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Expenses] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FamilyMembers]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FamilyMembers](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Relation] [nvarchar](max) NULL,
	[Gender] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.FamilyMembers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Features]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Features](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[KeyName] [nvarchar](max) NULL,
	[TextValue] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[IsLimited] [int] NOT NULL,
	[PanelTypeId] [bigint] NOT NULL,
	[Comments] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Features] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FieldTypeCatalogs]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FieldTypeCatalogs](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ParentId] [bigint] NOT NULL,
	[PanelTypeId] [bigint] NOT NULL,
	[KeyName] [nvarchar](max) NULL,
	[TextValue] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
 CONSTRAINT [PK_dbo.FieldTypeCatalogs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FollowUsers]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FollowUsers](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[FollowerUserLoginId] [bigint] NOT NULL,
	[FollowingUserLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.FollowUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GroupMembers]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GroupMembers](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[GroupId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.GroupMembers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Groups]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Groups](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[GroupImage] [nvarchar](max) NULL,
	[GroupType] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Groups] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HomePageBannerItems]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HomePageBannerItems](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Type] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[Video] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[Text] [nvarchar](max) NULL,
	[Link] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.HomePageBannerItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HomePageClassCategorySections]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HomePageClassCategorySections](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ClassCategoryTypeId] [bigint] NOT NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.HomePageClassCategorySections] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HomePageFeaturedCardSections]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HomePageFeaturedCardSections](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Type] [nvarchar](max) NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[ButtonLink] [nvarchar](max) NULL,
	[ButtonText] [nvarchar](max) NULL,
	[Thumbnail] [nvarchar](max) NULL,
	[Video] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.HomePageFeaturedCardSections] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HomePageFeaturedVideos]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HomePageFeaturedVideos](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Thumbnail] [nvarchar](max) NULL,
	[Video] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.HomePageFeaturedVideos] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HomePageMultipleItems]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HomePageMultipleItems](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Type] [nvarchar](max) NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[Link] [nvarchar](max) NULL,
	[Thumbnail] [nvarchar](max) NULL,
	[Video] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.HomePageMultipleItems] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[InstructorContentDescription_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InstructorContentDescription_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfilePageTypeId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.InstructorContentDescription_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ItemFeatures]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ItemFeatures](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ItemId] [bigint] NOT NULL,
	[ItemType] [nvarchar](max) NULL,
	[FeatureId] [bigint] NOT NULL,
	[IsLimited] [int] NOT NULL,
	[Limit] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ItemFeatures] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LastRecordIdDetails]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LastRecordIdDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Key] [nvarchar](max) NULL,
	[Prefix] [nvarchar](max) NULL,
	[Value] [int] NOT NULL,
 CONSTRAINT [PK_dbo.LastRecordIdDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LicenseBookings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LicenseBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[LicenseId] [bigint] NOT NULL,
	[Quantity] [int] NOT NULL,
	[LicenseIsPaid] [int] NOT NULL,
	[LicensePrice] [decimal](18, 2) NOT NULL,
	[LicenseCommissionType] [nvarchar](max) NULL,
	[LicenseCommissionValue] [decimal](18, 2) NOT NULL,
	[LicenseGSTPercent] [decimal](18, 2) NOT NULL,
	[LicenseGSTDescription] [nvarchar](max) NULL,
	[LicenseMinSellingPrice] [decimal](18, 2) NOT NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.LicenseBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Licenses]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Licenses](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CertificateId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[LicenseLogo] [nvarchar](max) NULL,
	[CertificateImage] [nvarchar](max) NULL,
	[SignatureImage] [nvarchar](max) NULL,
	[IsPaid] [int] NOT NULL,
	[CommissionType] [nvarchar](max) NULL,
	[CommissionValue] [decimal](18, 2) NOT NULL,
	[AchievingOrder] [int] NOT NULL,
	[TimePeriod] [nvarchar](max) NULL,
	[LicensePermissions] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[Signature2Image] [nvarchar](max) NULL,
	[Signature3Image] [nvarchar](max) NULL,
	[GSTPercent] [decimal](18, 2) NOT NULL,
	[GSTDescription] [nvarchar](max) NULL,
	[MinSellingPrice] [decimal](18, 2) NOT NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[LicenseCertificateHTMLContent] [nvarchar](max) NULL,
	[IsLicenseToTeach] [int] NOT NULL,
	[LicenseToTeach_Type] [nvarchar](max) NULL,
	[LicenseToTeach_DisplayName] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Licenses] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MainPlanBookings]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MainPlanBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[MainPlanId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[PlanDurationTypeKey] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[CompareAtPrice] [decimal](18, 2) NOT NULL,
	[Discount] [decimal](18, 2) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.MainPlanBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MainPlans]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MainPlans](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[PlanDurationTypeKey] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[CompareAtPrice] [decimal](18, 2) NOT NULL,
	[Discount] [decimal](18, 2) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[PlanImage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[PlanPermission] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.MainPlans] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MasterProContentPdfs]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MasterProContentPdfs](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[ImageTitle] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[ThumbnailPdf] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.MasterProContentPdfs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MasterProExtraInformations]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MasterProExtraInformations](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[ShortDescription] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.MasterProExtraInformations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MasterProResume_PPCMeta]    Script Date: 19-02-2024 11:14:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MasterProResume_PPCMeta](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Age] [nvarchar](max) NULL,
	[Nationality] [nvarchar](max) NULL,
	[UploadCV] [nvarchar](max) NULL,
	[Freelance] [nvarchar](max) NULL,
	[Skype] [nvarchar](max) NULL,
	[Languages] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.MasterProResume_PPCMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Menus]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Menus](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ParentMenuId] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[PageLink] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[Tag] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Menus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Messages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Messages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[SenderUserloginId] [bigint] NOT NULL,
	[ReceiverUserLoginId] [bigint] NOT NULL,
	[Messagebody] [nvarchar](max) NULL,
	[SenderStatus] [int] NOT NULL,
	[ReceiverStatus] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Messages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[NotificationRecords]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NotificationRecords](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationType] [nvarchar](max) NULL,
	[FromUserLoginId] [bigint] NOT NULL,
	[NotificationTitle] [nvarchar](max) NULL,
	[NotificationText] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ItemId] [bigint] NOT NULL,
	[ItemTable] [nvarchar](max) NULL,
	[IsNotificationLinkable] [int] NOT NULL,
 CONSTRAINT [PK_dbo.NotificationRecords] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Notifications]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Notifications](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[NotificationRecordId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[IsRead] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Notifications] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[NotificationTransfers]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[NotificationTransfers](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[TransferRequestId] [bigint] NOT NULL,
	[TransferSenderId] [nvarchar](max) NULL,
	[NotificationMessage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.NotificationTransfers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Orders]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Orders](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ItemId] [bigint] NOT NULL,
	[ItemType] [nvarchar](max) NULL,
	[OnlinePayment] [int] NOT NULL,
	[PaymentMethod] [nvarchar](max) NULL,
	[CouponId] [bigint] NOT NULL,
	[CouponDiscountValue] [decimal](18, 2) NOT NULL,
	[TotalDiscount] [decimal](18, 2) NOT NULL,
	[IsTaxable] [int] NOT NULL,
	[GST] [decimal](18, 2) NOT NULL,
	[TotalAmount] [decimal](18, 2) NOT NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[OwnerUserLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.Orders] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PaymentDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentDetails](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[PaymentModeType] [nvarchar](max) NULL,
	[PaymentModeDetail] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.PaymentDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PaymentModes]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentModes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
 CONSTRAINT [PK_dbo.PaymentModes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PaymentResponses]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentResponses](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[Provider] [nvarchar](max) NULL,
	[DateStamp] [datetime] NOT NULL,
	[ResponseStatus] [nvarchar](max) NULL,
	[TransactionID] [nvarchar](max) NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[Approved] [int] NOT NULL,
	[Description] [nvarchar](max) NULL,
	[Method] [nvarchar](max) NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.PaymentResponses] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Permissions]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Permissions](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ParentPermissionId] [bigint] NOT NULL,
	[KeyName] [nvarchar](max) NULL,
	[TextValue] [nvarchar](max) NULL,
	[Comments] [nvarchar](max) NULL,
	[PanelTypeId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.Permissions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PlanBookings]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PlanBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[PlanId] [bigint] NOT NULL,
	[StudentUserLoginId] [bigint] NOT NULL,
	[PlanName] [nvarchar](max) NULL,
	[PlanDescription] [nvarchar](max) NULL,
	[PlanPrice] [decimal](18, 2) NOT NULL,
	[PlanCompareAtPrice] [decimal](18, 2) NOT NULL,
	[PlanDurationTypeId] [int] NOT NULL,
	[PlanDurationTypeName] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[IsTransfered] [int] NOT NULL,
	[TransferPackageId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.PlanBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProfilePageTypes]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProfilePageTypes](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Key] [nvarchar](max) NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ProfilePageTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Queries]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Queries](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[StudentId] [bigint] NOT NULL,
	[BusinessOwnerId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[IsReplied] [int] NOT NULL,
	[ReplyBody] [nvarchar](max) NULL,
	[RepliedOn] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Queries] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Reviews]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Reviews](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ItemId] [bigint] NOT NULL,
	[ItemType] [nvarchar](max) NULL,
	[Rating] [int] NOT NULL,
	[ReviewBody] [nvarchar](max) NULL,
	[ReviewerUserLoginId] [bigint] NOT NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.Reviews] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Roles]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Roles](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Roles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StaffAttendances]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StaffAttendances](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[StaffId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpadatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[AttendanceStatus] [int] NOT NULL,
	[AttendanceDate] [nvarchar](max) NULL,
	[AttendanceDate_DateTimeFormat] [datetime] NOT NULL,
	[AttendanceMonth] [int] NOT NULL,
	[AttendanceYear] [int] NOT NULL,
	[LeaveReason] [nvarchar](max) NULL,
	[InTime_24HF] [nvarchar](max) NULL,
	[OutTime_24HF] [nvarchar](max) NULL,
	[IsApproved] [int] NOT NULL,
 CONSTRAINT [PK_dbo.StaffAttendances] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StaffCategories]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StaffCategories](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](max) NULL,
	[IsActive] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.StaffCategories] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Staffs]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Staffs](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[StaffCategoryId] [bigint] NOT NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[MasterId] [nvarchar](max) NULL,
	[BasicSalary] [decimal](18, 2) NOT NULL,
	[HouseRentAllowance] [decimal](18, 2) NOT NULL,
	[TravellingAllowance] [decimal](18, 2) NOT NULL,
	[DearnessAllowance] [decimal](18, 2) NOT NULL,
	[Remarks] [nvarchar](max) NULL,
	[IsProfessional] [int] NOT NULL,
	[Designation] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Staffs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StateMasters]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StateMasters](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CountryID] [bigint] NOT NULL,
	[Name] [nvarchar](max) NULL,
	[StateCode] [nvarchar](max) NULL,
	[Latitude] [nvarchar](max) NULL,
	[Longitude] [nvarchar](max) NULL,
	[Type] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
 CONSTRAINT [PK_dbo.StateMasters] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StudentFavourites]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StudentFavourites](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[StudentLoginId] [bigint] NOT NULL,
	[FavouriteUserLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.StudentFavourites] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Students]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Students](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[IsBlocked] [int] NOT NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[BlockReason] [nvarchar](max) NULL,
	[BusinessStudentProfileImage] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.Students] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SubAdmins]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SubAdmins](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.SubAdmins] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SuperAdmins]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SuperAdmins](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[FirstName] [nvarchar](max) NULL,
	[LastName] [nvarchar](max) NULL,
	[Email] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[ProfileImage] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.SuperAdmins] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SuperAdminSponsors]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SuperAdminSponsors](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[SponsorTitle] [nvarchar](max) NULL,
	[SponsorIcon] [nvarchar](max) NULL,
	[SponsorLink] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.SuperAdminSponsors] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ThreadMessages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ThreadMessages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ChatThreadId] [bigint] NOT NULL,
	[SenderUserLoginId] [bigint] NOT NULL,
	[MessageBody] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.ThreadMessages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ThreadParticipants]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ThreadParticipants](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ChatThreadId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.ThreadParticipants] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TrainingBookings]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TrainingBookings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[TrainingId] [bigint] NOT NULL,
	[OrderId] [bigint] NOT NULL,
	[TrainingName] [nvarchar](max) NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[PlanCompareAtPrice] [decimal](18, 2) NOT NULL,
	[IsCompleted] [int] NOT NULL,
	[Duration] [nvarchar](max) NULL,
	[TrainingClassDays] [nvarchar](max) NULL,
	[TotalLectures] [int] NOT NULL,
	[TotalClasses] [int] NOT NULL,
	[TotalSeats] [int] NOT NULL,
	[TotalCredits] [int] NOT NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[LicenseId] [bigint] NOT NULL,
	[LicenseBookingId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.TrainingBookings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Trainings]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trainings](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[InstructorUserLoginId] [bigint] NOT NULL,
	[InstructorEmail] [nvarchar](max) NULL,
	[InstructorMobileNumber] [nvarchar](max) NULL,
	[InstructorAlternateNumber] [nvarchar](max) NULL,
	[TrainingName] [nvarchar](max) NULL,
	[ShortDescription] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[IsPaid] [int] NOT NULL,
	[Price] [decimal](18, 2) NOT NULL,
	[AdditionalPriceInformation] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[StartDate_DateTimeFormat] [datetime] NOT NULL,
	[EndDate] [nvarchar](max) NULL,
	[EndDate_DateTimeFormat] [datetime] NOT NULL,
	[StartTime_24HF] [nvarchar](max) NULL,
	[EndTime_24HF] [nvarchar](max) NULL,
	[CenterName] [nvarchar](max) NULL,
	[Location] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[City] [nvarchar](max) NULL,
	[State] [nvarchar](max) NULL,
	[Country] [nvarchar](max) NULL,
	[PinCode] [nvarchar](max) NULL,
	[LocationUrl] [nvarchar](max) NULL,
	[MusicType] [nvarchar](max) NULL,
	[EnergyLevel] [nvarchar](max) NULL,
	[DanceStyle] [nvarchar](max) NULL,
	[Status] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[TrainingImage] [nvarchar](max) NULL,
	[Latitude] [decimal](18, 15) NOT NULL,
	[Longitude] [decimal](18, 15) NOT NULL,
	[Duration] [nvarchar](max) NULL,
	[TrainingClassDays] [nvarchar](max) NULL,
	[TotalLectures] [int] NOT NULL,
	[TotalClasses] [int] NOT NULL,
	[TotalSeats] [int] NOT NULL,
	[TotalCredits] [int] NOT NULL,
	[AdditionalInformation] [nvarchar](max) NULL,
	[ExpectationDescription] [nvarchar](max) NULL,
	[TrainingRules] [nvarchar](max) NULL,
	[BecomeInstructorDescription] [nvarchar](max) NULL,
	[LicenseId] [bigint] NOT NULL,
	[LicenseBookingId] [bigint] NOT NULL,
	[ShowOnHomePage] [int] NOT NULL,
 CONSTRAINT [PK_dbo.Trainings] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TransferPackages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransferPackages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[BusinessOwnerLoginId] [bigint] NOT NULL,
	[TransferFromUserloginId] [bigint] NOT NULL,
	[TransferToUserLoginId] [bigint] NOT NULL,
	[PackageId] [bigint] NOT NULL,
	[TransferDate] [nvarchar](max) NULL,
	[TransferReason] [nvarchar](max) NULL,
	[RejectionReason] [nvarchar](max) NULL,
	[TransferStatus] [int] NOT NULL,
	[TransferType] [int] NOT NULL,
	[TransferCity] [nvarchar](max) NULL,
	[TransferState] [nvarchar](max) NULL,
	[Limit] [int] NOT NULL,
	[Notification] [int] NOT NULL,
	[NotificationMessage] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[PlanBookingId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.TransferPackages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserCertificates]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserCertificates](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[CertificateId] [bigint] NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[TrainingId] [bigint] NOT NULL,
	[CertificateBookingId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[LicenseId] [bigint] NOT NULL,
	[IssuedCertificateNumber] [nvarchar](max) NULL,
	[CertificateFile] [nvarchar](max) NULL,
	[ItemId] [bigint] NOT NULL,
	[ItemTable] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.UserCertificates] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserContentImages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserContentImages](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[ImageTitle] [nvarchar](max) NULL,
	[Image] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.UserContentImages] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserContentVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserContentVideos](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[VideoTitle] [nvarchar](max) NULL,
	[VideoLink] [nvarchar](max) NULL,
	[VideoThumbnail] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[VideoDescription] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.UserContentVideos] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserEducations]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserEducations](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[SchoolName] [nvarchar](max) NULL,
	[Designation] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[StartMonth] [nvarchar](max) NULL,
	[StartYear] [nvarchar](max) NULL,
	[Endmonth] [nvarchar](max) NULL,
	[EndYear] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[EndDate] [nvarchar](max) NULL,
	[Grade] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.UserEducations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserExperiences]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserExperiences](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Title] [nvarchar](max) NULL,
	[CompanyName] [nvarchar](max) NULL,
	[StartMonth] [nvarchar](max) NULL,
	[StartYear] [nvarchar](max) NULL,
	[EndMonth] [nvarchar](max) NULL,
	[EndYear] [nvarchar](max) NULL,
	[StartDate] [nvarchar](max) NULL,
	[EndDate] [nvarchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.UserExperiences] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserFamilyRelations]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserFamilyRelations](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[User1LoginId] [bigint] NOT NULL,
	[User2LoginId] [bigint] NOT NULL,
	[User1Relation_FieldTypeCatalogKey] [nvarchar](max) NULL,
	[User2Relation_FieldTypeCatalogKey] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.UserFamilyRelations] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserLoginFeatures]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserLoginFeatures](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[FeatureId] [bigint] NOT NULL,
	[IsLimited] [int] NOT NULL,
	[Limit] [int] NOT NULL,
	[AddOnLimit] [int] NOT NULL,
	[IsActive] [int] NOT NULL,
	[Comments] [nvarchar](max) NULL,
	[CreatedOn] [datetime] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
 CONSTRAINT [PK_dbo.UserLoginFeatures] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserLoginPermissions]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserLoginPermissions](
	[UserLoginId] [bigint] NOT NULL,
	[PermissionId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.UserLoginPermissions] PRIMARY KEY CLUSTERED 
(
	[UserLoginId] ASC,
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserLogins]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserLogins](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](max) NULL,
	[Email] [nvarchar](max) NULL,
	[Password] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumber_CountryCode] [nvarchar](max) NULL,
	[EmailConfirmed] [int] NOT NULL,
	[RoleId] [bigint] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
	[IsDeleted] [int] NOT NULL,
	[DeletedOn] [datetime] NOT NULL,
	[DeletedByLoginId] [bigint] NOT NULL,
	[Status] [int] NOT NULL,
	[Country] [nvarchar](max) NULL,
	[State] [nvarchar](max) NULL,
	[City] [nvarchar](max) NULL,
	[Address] [nvarchar](max) NULL,
	[FullAddressLocation] [nvarchar](max) NULL,
	[Pincode] [nvarchar](max) NULL,
	[Latitude] [decimal](18, 15) NOT NULL,
	[Longitude] [decimal](18, 15) NOT NULL,
	[MasterId] [nvarchar](max) NULL,
	[GoogleUserId] [nvarchar](max) NULL,
	[FacebookUserId] [nvarchar](max) NULL,
	[GoogleAccessToken] [nvarchar](max) NULL,
	[FacebookAccessToken] [nvarchar](max) NULL,
	[IsCertified] [int] NOT NULL,
	[UniqueUserId] [nvarchar](max) NULL,
	[LandMark] [nvarchar](max) NULL,
	[Gender] [int] NOT NULL,
	[FacebookProfileLink] [nvarchar](max) NULL,
	[TwitterProfileLink] [nvarchar](max) NULL,
	[InstagramProfileLink] [nvarchar](max) NULL,
	[LinkedInProfileLink] [nvarchar](max) NULL,
	[ResetPasswordToken] [nvarchar](max) NULL,
 CONSTRAINT [PK_dbo.UserLogins] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserResumeContents]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserResumeContents](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[UserLoginId] [bigint] NOT NULL,
	[Summary] [nvarchar](max) NULL,
	[Languages] [nvarchar](max) NULL,
	[Skills] [nvarchar](max) NULL,
	[Freelance] [int] NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[CreatedByLoginId] [bigint] NOT NULL,
	[UpdatedOn] [datetime] NOT NULL,
	[UpdatedByLoginId] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.UserResumeContents] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Index [IX_BatchId]    Script Date: 19-02-2024 11:14:34 ******/
CREATE NONCLUSTERED INDEX [IX_BatchId] ON [dbo].[ClassBatches]
(
	[BatchId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ClassId]    Script Date: 19-02-2024 11:14:34 ******/
CREATE NONCLUSTERED INDEX [IX_ClassId] ON [dbo].[ClassBatches]
(
	[ClassId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PermissionId]    Script Date: 19-02-2024 11:14:34 ******/
CREATE NONCLUSTERED INDEX [IX_PermissionId] ON [dbo].[UserLoginPermissions]
(
	[PermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_UserLoginId]    Script Date: 19-02-2024 11:14:34 ******/
CREATE NONCLUSTERED INDEX [IX_UserLoginId] ON [dbo].[UserLoginPermissions]
(
	[UserLoginId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Advertisements] ADD  DEFAULT ((0)) FOR [Status]
GO
ALTER TABLE [dbo].[Advertisements] ADD  DEFAULT ((0)) FOR [CreatedForLoginId]
GO
ALTER TABLE [dbo].[ApartmentBookings] ADD  DEFAULT ((0)) FOR [ApartmentAreaId]
GO
ALTER TABLE [dbo].[ApartmentBookings] ADD  DEFAULT ((0)) FOR [ApartmentBlockId]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ((0)) FOR [BusinessOwnerLoginId]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ((0)) FOR [CreatedByLoginId]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ((0)) FOR [UpdatedByLoginId]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [DeletedOn]
GO
ALTER TABLE [dbo].[Batches] ADD  DEFAULT ((0)) FOR [Status]
GO
ALTER TABLE [dbo].[BusinessCategories] ADD  DEFAULT ((0)) FOR [ProfilePageTypeId]
GO
ALTER TABLE [dbo].[BusinessContentVideos] ADD  DEFAULT ((0)) FOR [BusinessContentVideoCategoryId]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [BusinessSubCategoryId]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [SpecialDiscount]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [SpecialPrice]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [Verified]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [Privacy_UniqueUserId]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [StudentUserLoginId]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [IsBranch]
GO
ALTER TABLE [dbo].[BusinessOwners] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[BusinessPlans] ADD  DEFAULT ((0)) FOR [Status]
GO
ALTER TABLE [dbo].[BusinessPlans] ADD  DEFAULT ((0)) FOR [BusinessOwnerLoginId]
GO
ALTER TABLE [dbo].[BusinessPlans] ADD  DEFAULT ((0)) FOR [CompareAtPrice]
GO
ALTER TABLE [dbo].[BusinessPlans] ADD  DEFAULT ((0)) FOR [DiscountPercent]
GO
ALTER TABLE [dbo].[Certificates] ADD  DEFAULT ((0)) FOR [ProfilePageTypeId]
GO
ALTER TABLE [dbo].[Certificates] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[ClassBookings] ADD  DEFAULT ((0)) FOR [BatchId]
GO
ALTER TABLE [dbo].[ClassCategoryTypes] ADD  DEFAULT ((0)) FOR [ParentClassCategoryTypeId]
GO
ALTER TABLE [dbo].[ClassCategoryTypes] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[Classes] ADD  DEFAULT ((0)) FOR [BusinessOwnerLoginId]
GO
ALTER TABLE [dbo].[Classes] ADD  DEFAULT ((0)) FOR [IsPaid]
GO
ALTER TABLE [dbo].[Classes] ADD  DEFAULT ((0)) FOR [ClassCategoryTypeId]
GO
ALTER TABLE [dbo].[Classes] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [CreatedByLoginId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [UpdatedByLoginId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [UserLoginId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [DOB_DateTimeFormat]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [LevelId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [BusinessPlanId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [ClassId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [StartFromDate_DateTimeFormat]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [StaffId]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [FollowUpDate_DateTimeFormat]
GO
ALTER TABLE [dbo].[Enquiries] ADD  DEFAULT ((0)) FOR [EnquiryStatus]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [UserLoginId]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [StartDateTime]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [EndDateTime]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [TotalJoined]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [Walkings]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [CreatedOn]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [CreatedByLoginId]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [UpdatedByLoginId]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [DeletedOn]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[Events] ADD  DEFAULT ((0)) FOR [EventCategoryId]
GO
ALTER TABLE [dbo].[ExamForms] ADD  DEFAULT ((0)) FOR [BusinessId]
GO
ALTER TABLE [dbo].[ExamForms] ADD  DEFAULT ((0)) FOR [CenterNo]
GO
ALTER TABLE [dbo].[ExamForms] ADD  DEFAULT ((0)) FOR [Status]
GO
ALTER TABLE [dbo].[Licenses] ADD  DEFAULT ((0)) FOR [GSTPercent]
GO
ALTER TABLE [dbo].[Licenses] ADD  DEFAULT ((0)) FOR [MinSellingPrice]
GO
ALTER TABLE [dbo].[Licenses] ADD  DEFAULT ((0)) FOR [Price]
GO
ALTER TABLE [dbo].[Licenses] ADD  DEFAULT ((0)) FOR [IsLicenseToTeach]
GO
ALTER TABLE [dbo].[MainPlans] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[Menus] ADD  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE [dbo].[Menus] ADD  DEFAULT ((0)) FOR [IsShowOnHomePage]
GO
ALTER TABLE [dbo].[NotificationRecords] ADD  DEFAULT ((0)) FOR [ItemId]
GO
ALTER TABLE [dbo].[NotificationRecords] ADD  DEFAULT ((0)) FOR [IsNotificationLinkable]
GO
ALTER TABLE [dbo].[Orders] ADD  DEFAULT ((0)) FOR [OwnerUserLoginId]
GO
ALTER TABLE [dbo].[PlanBookings] ADD  DEFAULT ((0)) FOR [IsTransfered]
GO
ALTER TABLE [dbo].[PlanBookings] ADD  DEFAULT ((0)) FOR [TransferPackageId]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ((0)) FOR [BusinessOwnerLoginId]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ((0)) FOR [AttendanceStatus]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [AttendanceDate_DateTimeFormat]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ((0)) FOR [AttendanceMonth]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ((0)) FOR [AttendanceYear]
GO
ALTER TABLE [dbo].[StaffAttendances] ADD  DEFAULT ((0)) FOR [IsApproved]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [BusinessOwnerLoginId]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [BasicSalary]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [HouseRentAllowance]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [TravellingAllowance]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [DearnessAllowance]
GO
ALTER TABLE [dbo].[Staffs] ADD  DEFAULT ((0)) FOR [IsProfessional]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ((0)) FOR [Status]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [CreatedOn]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ((0)) FOR [CreatedByLoginId]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [UpdatedOn]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ((0)) FOR [UpdatedByLoginId]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[SubAdmins] ADD  DEFAULT ('1900-01-01T00:00:00.000') FOR [DeletedOn]
GO
ALTER TABLE [dbo].[SuperAdminSponsors] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[TrainingBookings] ADD  DEFAULT ((0)) FOR [LicenseId]
GO
ALTER TABLE [dbo].[TrainingBookings] ADD  DEFAULT ((0)) FOR [LicenseBookingId]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [TotalLectures]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [TotalClasses]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [TotalSeats]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [TotalCredits]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [LicenseId]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [LicenseBookingId]
GO
ALTER TABLE [dbo].[Trainings] ADD  DEFAULT ((0)) FOR [ShowOnHomePage]
GO
ALTER TABLE [dbo].[TransferPackages] ADD  DEFAULT ((0)) FOR [PlanBookingId]
GO
ALTER TABLE [dbo].[UserCertificates] ADD  DEFAULT ((0)) FOR [LicenseId]
GO
ALTER TABLE [dbo].[UserCertificates] ADD  DEFAULT ((0)) FOR [ItemId]
GO
ALTER TABLE [dbo].[UserLogins] ADD  DEFAULT ((0)) FOR [Latitude]
GO
ALTER TABLE [dbo].[UserLogins] ADD  DEFAULT ((0)) FOR [Longitude]
GO
ALTER TABLE [dbo].[UserLogins] ADD  DEFAULT ((0)) FOR [IsCertified]
GO
ALTER TABLE [dbo].[UserLogins] ADD  DEFAULT ((0)) FOR [Gender]
GO
ALTER TABLE [dbo].[ClassBatches]  WITH CHECK ADD  CONSTRAINT [FK_dbo.ClassBatches_dbo.Batches_BatchId] FOREIGN KEY([BatchId])
REFERENCES [dbo].[Batches] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ClassBatches] CHECK CONSTRAINT [FK_dbo.ClassBatches_dbo.Batches_BatchId]
GO
ALTER TABLE [dbo].[ClassBatches]  WITH CHECK ADD  CONSTRAINT [FK_dbo.ClassBatches_dbo.Classes_ClassId] FOREIGN KEY([ClassId])
REFERENCES [dbo].[Classes] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ClassBatches] CHECK CONSTRAINT [FK_dbo.ClassBatches_dbo.Classes_ClassId]
GO
ALTER TABLE [dbo].[UserLoginPermissions]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserLoginPermissions_dbo.Permissions_PermissionId] FOREIGN KEY([PermissionId])
REFERENCES [dbo].[Permissions] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserLoginPermissions] CHECK CONSTRAINT [FK_dbo.UserLoginPermissions_dbo.Permissions_PermissionId]
GO
ALTER TABLE [dbo].[UserLoginPermissions]  WITH CHECK ADD  CONSTRAINT [FK_dbo.UserLoginPermissions_dbo.UserLogins_UserLoginId] FOREIGN KEY([UserLoginId])
REFERENCES [dbo].[UserLogins] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[UserLoginPermissions] CHECK CONSTRAINT [FK_dbo.UserLoginPermissions_dbo.UserLogins_UserLoginId]
GO
/****** Object:  StoredProcedure [dbo].[GetAllBusinessUserDetail_ByPagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllBusinessUserDetail_ByPagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
    @userLoginId INT,
    @pageSize INT,
    @pageNumber INT,
    @mode INT
	)
AS
BEGIN
    DECLARE @offset INT = (@pageNumber - 1) * @pageSize;

    IF @mode = 1
    BEGIN
        -- Query for videos/Images
        SELECT *
        FROM (
            SELECT bv.Id AS VideoId,
                   bv.VideoTitle AS Title,
                   bv.VideoLink AS Link,
                   bv.VideoThumbnail AS Thumbnail,
                   ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) AS ImageWithPath,
                   bv.BusinessContentVideoCategoryId AS CategoryId,
                   bcvc.Name AS CategoryName,
                   bv.Description,
                   ROW_NUMBER() OVER (ORDER BY bv.Id) AS RowNum
            FROM BusinessContentVideos bv
            LEFT JOIN BusinessContentVideoCategories bcvc ON bv.BusinessContentVideoCategoryId = bcvc.Id
            WHERE bv.BusinessOwnerLoginId = @businessOwnerLoginId
        ) AS VideoData
        WHERE RowNum > @offset
        AND RowNum <= @offset + @pageSize

        UNION

        -- Query for images
        SELECT *
        FROM (
            SELECT bi.Id AS ImageId,
                   bi.ImageTitle AS Title,
                   ISNULL(NULL, '') AS Link,
                   bi.Image AS Thumbnail,
                   ('/Content/Uploads/Images/ManageBusinessImages/' + bi.Image) AS ImageWithPath,
                   ISNULL(NULL, '') AS CategoryId,
                   ISNULL(NULL, '') AS CategoryName,
                   ISNULL(NULL, '') AS Description,
                   ROW_NUMBER() OVER (ORDER BY bi.Id) AS RowNum
            FROM BusinessContentImages bi
            WHERE bi.BusinessOwnerLoginId = @businessOwnerLoginId
        ) AS ImageData
        WHERE RowNum > @offset
        AND RowNum <= @offset + @pageSize;
    END;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllApartmentBookings_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllApartmentBookings_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Apartment Bookings Requests by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	      	
		Select ab.*, abk.Name as BlockName, aa.Name as AreaName, a.Name as ApartmentName, 
		(CONVERT(varchar, ab.CreatedOn,106)) as CreatedOn_FormatDate, c.Name as ClassName, b.Name as BatchName, s.FirstName + ' ' + s.LastName as PersonFullName, s.ProfileImage as PersonProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as PersonProfileImageWithPath
		INTO #GetAllApartmentBookingsByBusiness
		from 
		ApartmentBookings ab
		inner join UserLogins ul on ab.UserLoginId= ul.Id
		inner join Apartments a on ab.ApartmentId = a.Id
		left join ApartmentAreas aa on ab.ApartmentAreaId = aa.Id
		left join ApartmentBlocks abk on ab.ApartmentBlockId = abk.Id
		inner join Batches b on ab.BatchId = b.Id
		inner join ClassBatches cb on b.Id = cb.BatchId
		inner join Classes c on cb.ClassId = c.Id
		inner join Students s on ul.Id = s.UserLoginId
		where ab.IsDeleted = 0 and ab.BusinessOwnerLoginId = @businessOwnerLoginId
		and
		( 
		  a.Name LIKE '%'+@searchFilter+'%' OR
		  ab.Activity LIKE '%'+@searchFilter+'%' OR
		  ab.Phase LIKE '%'+@searchFilter+'%' OR
		  ab.Lane LIKE '%'+@searchFilter+'%' OR
		  aa.Name LIKE '%'+@searchFilter+'%' OR
		  s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
		  c.Name LIKE '%'+@searchFilter+'%' OR
		  b.Name LIKE '%'+@searchFilter+'%' OR
		  ab.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,ab.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllApartmentBookingsByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'ApartmentName' AND @sortOrder = 'ASC' THEN ApartmentName END,
				CASE WHEN @sorting = 'ApartmentName' AND @sortOrder = 'DESC' THEN ApartmentName END DESC,
				CASE WHEN @sorting = 'BlockName' AND @sortOrder = 'ASC' THEN BlockName END,
				CASE WHEN @sorting = 'BlockName' AND @sortOrder = 'DESC' THEN BlockName END DESC,
				CASE WHEN @sorting = 'Phase' AND @sortOrder = 'ASC' THEN Phase END,
				CASE WHEN @sorting = 'Phase' AND @sortOrder = 'DESC' THEN Phase END DESC,
				CASE WHEN @sorting = 'AreaName' AND @sortOrder = 'ASC' THEN AreaName END,
				CASE WHEN @sorting = 'AreaName' AND @sortOrder = 'DESC' THEN AreaName END DESC,
				CASE WHEN @sorting = 'FlatOrVillaNumber' AND @sortOrder = 'ASC' THEN FlatOrVillaNumber END,
				CASE WHEN @sorting = 'FlatOrVillaNumber' AND @sortOrder = 'DESC' THEN FlatOrVillaNumber END DESC,
				CASE WHEN @sorting = 'PersonFullName' AND @sortOrder = 'ASC' THEN PersonFullName END,
				CASE WHEN @sorting = 'PersonFullName' AND @sortOrder = 'DESC' THEN PersonFullName END DESC,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'Activity' AND @sortOrder = 'ASC' THEN Activity END,
				CASE WHEN @sorting = 'Activity' AND @sortOrder = 'DESC' THEN Activity END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllApartmentBookingsByBusiness
		order by
		    	CASE WHEN @sorting = 'ApartmentName' AND @sortOrder = 'ASC' THEN ApartmentName END,
				CASE WHEN @sorting = 'ApartmentName' AND @sortOrder = 'DESC' THEN ApartmentName END DESC,
				CASE WHEN @sorting = 'BlockName' AND @sortOrder = 'ASC' THEN BlockName END,
				CASE WHEN @sorting = 'BlockName' AND @sortOrder = 'DESC' THEN BlockName END DESC,
				CASE WHEN @sorting = 'Phase' AND @sortOrder = 'ASC' THEN Phase END,
				CASE WHEN @sorting = 'Phase' AND @sortOrder = 'DESC' THEN Phase END DESC,
				CASE WHEN @sorting = 'AreaName' AND @sortOrder = 'ASC' THEN AreaName END,
				CASE WHEN @sorting = 'AreaName' AND @sortOrder = 'DESC' THEN AreaName END DESC,
				CASE WHEN @sorting = 'FlatOrVillaNumber' AND @sortOrder = 'ASC' THEN FlatOrVillaNumber END,
				CASE WHEN @sorting = 'FlatOrVillaNumber' AND @sortOrder = 'DESC' THEN FlatOrVillaNumber END DESC,
				CASE WHEN @sorting = 'PersonFullName' AND @sortOrder = 'ASC' THEN PersonFullName END,
				CASE WHEN @sorting = 'PersonFullName' AND @sortOrder = 'DESC' THEN PersonFullName END DESC,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'Activity' AND @sortOrder = 'ASC' THEN Activity END,
				CASE WHEN @sorting = 'Activity' AND @sortOrder = 'DESC' THEN Activity END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllApartmentBookingsByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllApartments_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllApartments_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Apartment by Business
	if(@mode=1)
	begin
	      	
		Select a.Id, a.Name, a.Blocks, a.Areas, a.Status, a.CreatedOn, (CONVERT(varchar, a.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #GetAllApartment
		from 
		Apartments a
		where a.IsDeleted = 0 and a.BusinessOwnerLoginId = @businessOwnerLoginId
		and
		( 
		  a.Name LIKE '%'+@searchFilter+'%' OR
		  a.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,a.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllApartment);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Blocks' AND @sortOrder = 'ASC' THEN Blocks END,
				CASE WHEN @sorting = 'Blocks' AND @sortOrder = 'DESC' THEN Blocks END DESC,
				CASE WHEN @sorting = 'Areas' AND @sortOrder = 'ASC' THEN Areas END,
				CASE WHEN @sorting = 'Areas' AND @sortOrder = 'DESC' THEN Areas END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllApartment
		order by
		    	CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Blocks' AND @sortOrder = 'ASC' THEN Blocks END,
				CASE WHEN @sorting = 'Blocks' AND @sortOrder = 'DESC' THEN Blocks END DESC,
				CASE WHEN @sorting = 'Areas' AND @sortOrder = 'ASC' THEN Areas END,
				CASE WHEN @sorting = 'Areas' AND @sortOrder = 'DESC' THEN Areas END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllApartment
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinesBranchEvent_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllBusinesBranchEvent_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Event Branch by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	select e.Id, e.Title,e.UserLoginId,e.Price,e.StartDate, e.EndDate, e.StartTime_24HF, e.EndTime_24HF, e.EventLocationURL, e.ShortDescription, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath,e.CreatedOn,(CONVERT(varchar, e.CreatedOn,106)) as CreatedOn_FormatDate,
		  CASE 
        WHEN e.IsPaid = 0 THEN 'free'
        WHEN e.IsPaid = 1 THEN CAST(e.Price AS VARCHAR) -- Display Price when IsPaid is 1
    END AS PaymentStatus
		 Into #GetAllBranchEventByBusiness
		 from Events e 
		 inner join Branches b on e.UserLoginId = b.BranchBusinessLoginId 
		 where e.UserLoginId = @userLoginId and e.IsDeleted = 0   
		and
		( 
		  e.Title LIKE '%'+@searchFilter+'%' OR
		  e.StartDate LIKE '%'+@searchFilter+'%' OR
		 e.EndDate LIKE '%'+@searchFilter+'%' OR
		 e.ShortDescription LIKE '%'+@searchFilter+'%' OR
		  e.Price LIKE '%'+@searchFilter+'%' OR
		   e.EventLocationURL LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBranchEventByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'ASC' THEN ShortDescription END,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'EventLocationURL' AND @sortOrder = 'ASC' THEN EventLocationURL END,
				CASE WHEN @sorting = 'EventLocationURL' AND @sortOrder = 'DESC' THEN EventLocationURL END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBranchEventByBusiness
		order by
		    	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'ASC' THEN ShortDescription END,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'EventLocationURL' AND @sortOrder = 'ASC' THEN EventLocationURL END,
				CASE WHEN @sorting = 'EventLocationURL' AND @sortOrder = 'DESC' THEN EventLocationURL END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBranchEventByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinesBranchStaff_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllBusinesBranchStaff_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Branches Staff by Business-Owner for Business-Panel
	if(@mode=1)
	begin	      	
		select s.Id, s.MasterId,ul.MasterId as StaffMasterId,CONCAT(s.FirstName, ' ', s.LastName) as StaffName ,s.StaffCategoryId,sc.Name as StaffCategoryName, ul.CreatedOn,(CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate,ul.PhoneNumber 
		Into #GetAllBranchStaffByBusiness
		from Staffs s inner join StaffCategories sc on s.StaffCategoryId  = sc.Id
		inner join UserLogins ul on s.UserLoginId = ul.Id
		inner join Branches b on s.BusinessOwnerLoginId = b.BranchBusinessLoginId
		where b.BranchBusinessLoginId =  @userLoginId   and ul.IsDeleted = 0 

		and
		( 
		  s.FirstName +''+ s.LastName LIKE '%'+@searchFilter+'%' OR
		  sc.Name LIKE '%'+@searchFilter+'%' OR
		  ul.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,ul.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBranchStaffByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'StaffCategoryName' AND @sortOrder = 'ASC' THEN StaffCategoryName END,
				CASE WHEN @sorting = 'StaffCategoryName' AND @sortOrder = 'DESC' THEN StaffCategoryName END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBranchStaffByBusiness
		order by
		    	CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'StaffCategoryName' AND @sortOrder = 'ASC' THEN StaffCategoryName END,
				CASE WHEN @sorting = 'StaffCategoryName' AND @sortOrder = 'DESC' THEN StaffCategoryName END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBranchStaffByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinesClassicDanceTechnique_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllBusinesClassicDanceTechnique_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business classic Dance  Detail by Business-Owner for Business-Panel
	if(@mode=1)
	begin	      	
		select cdt.Id, cdt.UserLoginId, cdt.Title,cdt.ProfilePageTypeId ,cdt.TechniqueItemList,cdt.Description, cdt.CreatedOn,(CONVERT(varchar, cdt.CreatedOn,106)) as CreatedOn_FormatDate
		Into #GetAllBusinessClassicDanceDetailByBusiness
		from BusinessContentClassicDanceTechnique_PPCMeta cdt 
		where cdt.UserLoginId =  @userLoginId   and cdt.IsDeleted = 0 

		and
		( 
		cdt.Title LIKE '%'+@searchFilter+'%' OR
		  cdt.Description LIKE '%'+@searchFilter+'%' OR
		  cdt.TechniqueItemList LIKE '%'+@searchFilter+'%' OR
		  cdt.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,cdt.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBusinessClassicDanceDetailByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		        CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		        CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'ASC' THEN TechniqueItemList END,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'DESC' THEN TechniqueItemList END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBusinessClassicDanceDetailByBusiness
		order by
		        CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		    	CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		        CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'ASC' THEN TechniqueItemList END,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'DESC' THEN TechniqueItemList END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBusinessClassicDanceDetailByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinessDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[sp_GetAllBusinessDetail]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
-- Get All Video Detail List of Business/User by Pagination 
	if(@mode=1)
	begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10
    SELECT @totalRecords = COUNT(bv .Id) FROM BusinessContentVideos bv 
		left join BusinessContentVideoCategories bcvc on bv.BusinessContentVideoCategoryId = bcvc.Id
			where bv.BusinessOwnerLoginId = @userLoginId
		if(@lastRecordId <= 0) 
		begin 
	       select  TOP (@recordLimit) bv.Id, bv.VideoTitle, bv.VideoLink, bv.VideoThumbnail, ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) as VideoThumbNailImageWithPath, bv.BusinessContentVideoCategoryId as VideoCategoryId, bcvc.Name as VideoCategoryName,bv.Description,@totalRecords
			from BusinessContentVideos bv 
			left join BusinessContentVideoCategories bcvc on bv.BusinessContentVideoCategoryId = bcvc.Id
			where bv.BusinessOwnerLoginId = @userLoginId 
			order by bv.CreatedOn desc
		end
		else
		begin
			select  TOP (@recordLimit) bv.Id, bv.VideoTitle, bv.VideoLink, bv.VideoThumbnail, ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) as VideoThumbNailImageWithPath, bv.BusinessContentVideoCategoryId as VideoCategoryId, bcvc.Name as VideoCategoryName,bv.Description,@totalRecords
				from BusinessContentVideos bv 
				left join BusinessContentVideoCategories bcvc on bv.BusinessContentVideoCategoryId = bcvc.Id
				where bv.BusinessOwnerLoginId = @userLoginId and bv.Id < @lastRecordId
				order by bv.CreatedOn desc
		end
	end
	-- Get Images List of Student/User by Pagination
	else if(@mode=2)
	begin
		  SELECT @totalRecords = COUNT(bi .Id) FROM BusinessContentImages bi  
			 where bi.BusinessOwnerLoginId = @userLoginId
		if(@lastRecordId <= 0) 
		begin 
		   select TOP (@recordLimit) bi.Id, bi.BusinessOwnerLoginId, bi.ImageTitle,bi.Image,('/Content/Uploads/Images/ManageBusinessImages/' + bi.Image) as ImageWithPath,@totalRecords from BusinessContentImages bi where bi.BusinessOwnerLoginId = @userLoginId 
		    order by Id  desc
	    end
		else
		begin
		     select TOP (@recordLimit) bi.Id, bi.BusinessOwnerLoginId, bi.ImageTitle,bi.Image,('/Content/Uploads/Images/ManageBusinessImages/' + bi.Image) as ImageWithPath,@totalRecords from BusinessContentImages bi where bi.BusinessOwnerLoginId = @userLoginId and bi.Id < @lastRecordId
		    order by Id  desc
		end
	 end
	--- To Get Class List Using In Master Profile API By Pagination 
	else if(@mode=3)
    begin
	    SELECT @totalRecords = COUNT(c .Id) FROM Classes c  where c.BusinessOwnerLoginId = @userLoginId
		if(@lastRecordId <= 0) 
		begin
		    select TOP (@recordLimit) c.Id,c.ClassCategoryTypeId,IsNull(c.Name,'') as Name,IsNull(c.Description,'') as Description,IsNull(c.ClassImage,'') as ClassImage, ISNull(dbo.GetClassImageWithPath(c.ClassImage),'') as ClassImageWithPath
			from Classes c 
			inner join ClassCategoryTypes cc on c.ClassCategoryTypeId = cc.Id
			where c.BusinessOwnerLoginId = @userLoginId and c.ClassCategoryTypeId = @id
			 order by Id  desc
		end
		else
	    begin
		    select TOP (@recordLimit) c.Id,c.ClassCategoryTypeId,IsNull(c.Name,'') as Name,IsNull(c.Description,'') as Description,IsNull(c.ClassImage,'') as ClassImage, ISNull(dbo.GetClassImageWithPath(c.ClassImage),'') as ClassImageWithPath
			from Classes c
			inner join ClassCategoryTypes cc on c.ClassCategoryTypeId = cc.Id
			where c.BusinessOwnerLoginId = @userLoginId and c.ClassCategoryTypeId = @id and c.Id < @lastRecordId
			order by Id  desc 
	    end
    end
	--- To Get All Classes show through ClassCategoryType 
	else if(@mode=4)
    begin
	    SELECT @totalRecords = COUNT(c .Id) FROM Classes c  where c.BusinessOwnerLoginId = @userLoginId
		if(@lastRecordId <= 0) 
		begin
		    select TOP (@recordLimit) c.Id,c.ClassCategoryTypeId,IsNull(c.Name,'') as Name,IsNull(c.Description,'') as Description,IsNull(c.ClassImage,'') as ClassImage, ISNull(dbo.GetClassImageWithPath(c.ClassImage),'') as ClassImageWithPath
			from Classes c 
			inner join ClassCategoryTypes cc on c.ClassCategoryTypeId = cc.Id
			where c.BusinessOwnerLoginId = @userLoginId 
			order by Id  desc
		end
		else
	    begin
		    select TOP (@recordLimit) c.Id,c.ClassCategoryTypeId,IsNull(c.Name,'') as Name,IsNull(c.Description,'') as Description,IsNull(c.ClassImage,'') as ClassImage, ISNull(dbo.GetClassImageWithPath(c.ClassImage),'') as ClassImageWithPath
			from Classes c
			inner join ClassCategoryTypes cc on c.ClassCategoryTypeId = cc.Id
			where c.BusinessOwnerLoginId = @userLoginId and c.Id < @lastRecordId
			order by Id  desc 
	    end
    end
 end



 


 
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinessUserDetail_ByPagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetAllBusinessUserDetail_ByPagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
    @userLoginId INT,
    @pageSize INT,
    @pageNumber INT,
    @mode INT
	)
AS
BEGIN
    DECLARE @offset INT = (@pageNumber - 1) * @pageSize;

    IF @mode = 1
    BEGIN
        -- Query for videos/Images
        SELECT *
        FROM (
            SELECT bv.Id AS VideoId,
                   bv.VideoTitle AS Title,
                   bv.VideoLink AS Link,
                   bv.VideoThumbnail AS Thumbnail,
                   ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) AS ImageWithPath,
                   bv.BusinessContentVideoCategoryId AS CategoryId,
                   bcvc.Name AS CategoryName,
                   bv.Description,
                   ROW_NUMBER() OVER (ORDER BY bv.Id) AS RowNum
            FROM BusinessContentVideos bv
            LEFT JOIN BusinessContentVideoCategories bcvc ON bv.BusinessContentVideoCategoryId = bcvc.Id
            WHERE bv.BusinessOwnerLoginId = @businessOwnerLoginId
        ) AS VideoData
        WHERE RowNum > @offset
        AND RowNum <= @offset + @pageSize

        UNION

        -- Query for images
        SELECT *
        FROM (
            SELECT bi.Id AS ImageId,
                   bi.ImageTitle AS Title,
                   ISNULL(NULL, '') AS Link,
                   bi.Image AS Thumbnail,
                   ('/Content/Uploads/Images/ManageBusinessImages/' + bi.Image) AS ImageWithPath,
                   ISNULL(NULL, '') AS CategoryId,
                   ISNULL(NULL, '') AS CategoryName,
                   ISNULL(NULL, '') AS Description,
                   ROW_NUMBER() OVER (ORDER BY bi.Id) AS RowNum
            FROM BusinessContentImages bi
            WHERE bi.BusinessOwnerLoginId = @businessOwnerLoginId
        ) AS ImageData
        WHERE RowNum > @offset
        AND RowNum <= @offset + @pageSize;
    END;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinesUserEducation_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_GetAllBusinesUserEducation_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All User-Education by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	select ue.Id, ue.SchoolName,ue.UserLoginId,ue.Designation,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description,ue.CreatedOn,(CONVERT(varchar, ue.CreatedOn,106)) as CreatedOn_FormatDate
		 Into #GetAllUserEducationByBusiness
		 from UserEducations ue 
		 where ue.UserLoginId = @userLoginId and ue.IsDeleted = 0   
		and
		( 
		  ue.SchoolName LIKE '%'+@searchFilter+'%' OR
		  ue.Designation LIKE '%'+@searchFilter+'%' OR
		  ue.StartMonth LIKE '%'+@searchFilter+'%' OR
		 ue.EndMonth LIKE '%'+@searchFilter+'%' OR
		 ue.StartYear LIKE '%'+@searchFilter+'%' OR
		 ue.EndYear LIKE '%'+@searchFilter+'%' OR
		 ue.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllUserEducationByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'SchoolName' AND @sortOrder = 'ASC' THEN SchoolName END,
				CASE WHEN @sorting = 'SchoolName' AND @sortOrder = 'DESC' THEN SchoolName END DESC,
				 CASE WHEN @sorting = 'Designation' AND @sortOrder = 'ASC' THEN Designation END,
				CASE WHEN @sorting = 'Designation' AND @sortOrder = 'DESC' THEN Designation END DESC,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'ASC' THEN StartMonth END,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'DESC' THEN StartMonth END DESC,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'ASC' THEN EndMonth END,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'DESC' THEN EndMonth END DESC,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'ASC' THEN StartYear END,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'DESC' THEN StartYear END DESC,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'ASC' THEN EndYear END,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'DESC' THEN EndYear END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllUserEducationByBusiness
		order by
		    	  CASE WHEN @sorting = 'SchoolName' AND @sortOrder = 'ASC' THEN SchoolName END,
				CASE WHEN @sorting = 'SchoolName' AND @sortOrder = 'DESC' THEN SchoolName END DESC,
				 CASE WHEN @sorting = 'Designation' AND @sortOrder = 'ASC' THEN Designation END,
				CASE WHEN @sorting = 'Designation' AND @sortOrder = 'DESC' THEN Designation END DESC,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'ASC' THEN StartMonth END,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'DESC' THEN StartMonth END DESC,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'ASC' THEN EndMonth END,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'DESC' THEN EndMonth END DESC,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'ASC' THEN StartYear END,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'DESC' THEN StartYear END DESC,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'ASC' THEN EndYear END,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'DESC' THEN EndYear END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllUserEducationByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllBusinesUserExperience_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllBusinesUserExperience_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All User-experience by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	select ue.Id, ue.Title,ue.UserLoginId,ue.CompanyName,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description,ue.CreatedOn,(CONVERT(varchar, ue.CreatedOn,106)) as CreatedOn_FormatDate
		 Into #GetAllUserExperienceByBusiness
		 from UserExperiences ue 
		 where ue.UserLoginId = @userLoginId and ue.IsDeleted = 0   
		and
		( 
		  ue.Title LIKE '%'+@searchFilter+'%' OR
		  ue.CompanyName LIKE '%'+@searchFilter+'%' OR
		  ue.StartMonth LIKE '%'+@searchFilter+'%' OR
		 ue.EndMonth LIKE '%'+@searchFilter+'%' OR
		 ue.StartYear LIKE '%'+@searchFilter+'%' OR
		 ue.EndYear LIKE '%'+@searchFilter+'%' OR
		 ue.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllUserExperienceByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CompanyName' AND @sortOrder = 'ASC' THEN CompanyName END,
				CASE WHEN @sorting = 'CompanyName' AND @sortOrder = 'DESC' THEN CompanyName END DESC,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'ASC' THEN StartMonth END,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'DESC' THEN StartMonth END DESC,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'ASC' THEN EndMonth END,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'DESC' THEN EndMonth END DESC,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'ASC' THEN StartYear END,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'DESC' THEN StartYear END DESC,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'ASC' THEN EndYear END,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'DESC' THEN EndYear END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllUserExperienceByBusiness
		order by
		    	  CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CompanyName' AND @sortOrder = 'ASC' THEN CompanyName END,
				CASE WHEN @sorting = 'CompanyName' AND @sortOrder = 'DESC' THEN CompanyName END DESC,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'ASC' THEN StartMonth END,
				CASE WHEN @sorting = 'StartMonth' AND @sortOrder = 'DESC' THEN StartMonth END DESC,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'ASC' THEN EndMonth END,
				CASE WHEN @sorting = 'EndMonth' AND @sortOrder = 'DESC' THEN EndMonth END DESC,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'ASC' THEN StartYear END,
				CASE WHEN @sorting = 'StartYear' AND @sortOrder = 'DESC' THEN StartYear END DESC,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'ASC' THEN EndYear END,
				CASE WHEN @sorting = 'EndYear' AND @sortOrder = 'DESC' THEN EndYear END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllUserExperienceByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetALLClassTimeTableDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetALLClassTimeTableDetail]
(
	@id bigint,
    @businessOwnerLoginId bigint,
    @userLoginId bigint,
    @classCategoryTypeId bigint,
    @instructorLoginId bigint,
    @classDays nvarchar(max) ,
    @mode int 
) 
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        SELECT c.Id, c.Name, c.ClassMode,b.BusinessOwnerLoginId, b.Name AS BatchName, insBO.UserLoginId AS InstructorUserLoginId, insBO.FirstName + ' ' + insBO.LastName AS InstructorFullName, c.ClassCategoryTypeId, c.Description, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, c.ClassType, c.ClassDays, ct.Name AS CategoryName
        FROM Classes c
        INNER JOIN ClassBatches cb ON c.Id = cb.ClassId
        INNER JOIN [Batches] b ON cb.BatchId = b.Id
        INNER JOIN ClassCategoryTypes ct ON c.ClassCategoryTypeId = ct.Id
        INNER JOIN BusinessOwners insBO ON b.InstructorLoginId = insBO.UserLoginId
        WHERE 
			c.IsDeleted = 0
			and b.IsDeleted = 0
			and b.Status = 1
			and (c.BusinessOwnerLoginId = @businessOwnerLoginId OR @businessOwnerLoginId IS NULL)
            AND (
                (@classCategoryTypeId = 0 OR c.ClassCategoryTypeId = @classCategoryTypeId)
                OR (@classCategoryTypeId = 0 AND @classCategoryTypeId IS NULL)
            )
            AND (
                (@classDays = '' OR c.ClassDays = @classDays )
                OR (@classDays = '' AND @classDays IS NULL)
				Or (',' + c.ClassDays + ',' LIKE '%' + @classDays + '%')
				)
      
			
            AND (
                (@instructorLoginId = 0 OR b.InstructorLoginId = @instructorLoginId)
                OR (@instructorLoginId = 0 AND @instructorLoginId IS NULL)
            )
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllClassViewPagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[sp_GetAllClassViewPagination]
(
	@id bigint,
	@userLoginId bigint,
	@recordLimit int,
	@lastRecordId bigint,
	@mode int
)
as
begin
-----Get classes
	if(@mode=1)
	begin
	declare @totalRecords bigint = 0;
		-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords = Count(c.Id) from Classes c where BusinessOwnerLoginId = @userLoginId and c.IsDeleted = 0

		if(@lastRecordId <= 0) 
		begin
			select Top (@recordLimit)  c.Id,c.Name,c.Description,b.ScheduledEndOnTime_24HF,b.ScheduledStartOnTime_24HF,c.ClassMode,c.OnlineClassLink,c.Price,
		c.ClassDays,b.StudentMaxStrength,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,IsNull(c.Address,'') as Address,IsNull(c.State,'') as State,IsNull(c.City,'')as City,IsNull(c.Country,'') as Country,IsNull(c.Pincode,'') as Pincode,IsNull(c.LandMark,'') as LandMark ,day( b.ScheduledOnDateTime) as StartDay,  FORMAT(b.ScheduledOnDateTime, 'MMMM') AS StartMonth,Year( b.ScheduledOnDateTime) as StartYear
		from Classes c 
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where c.IsDeleted = 0 and c.BusinessOwnerLoginId = @userLoginId
		ORDER BY b.ScheduledStartOnTime_24HF ASC;
		end

		else 
		begin
			select Top (@recordLimit)  c.Id,c.Name,c.Description,b.ScheduledEndOnTime_24HF,b.ScheduledStartOnTime_24HF,c.ClassMode,c.OnlineClassLink,c.Price,
		c.ClassDays,b.StudentMaxStrength,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,IsNull(c.Address,'') as Address,IsNull(c.State,'') as State,IsNull(c.City,'')as City,IsNull(c.Country,'') as Country,IsNull(c.Pincode,'') as Pincode,IsNull(c.LandMark,'') as LandMark ,day( b.ScheduledOnDateTime) as StartDay,  FORMAT(b.ScheduledOnDateTime, 'MMMM') AS StartMonth,Year( b.ScheduledOnDateTime) as StartYear
		from Classes c 
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where c.IsDeleted = 0 and c.BusinessOwnerLoginId = @userLoginId and c.Id > @lastRecordId
		ORDER BY b.ScheduledStartOnTime_24HF ASC;
		end

	end
	---- To Get Offline Video List 
	else if(@mode=2)
	begin
	if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords = Count(c.Id) from Classes c where BusinessOwnerLoginId = @userLoginId and c.IsDeleted = 0

		if(@lastRecordId <= 0) 
		begin
			select Top (@recordLimit)  c.Id, c.BusinessOwnerLoginId, c.Name,bo.FirstName +''+ bo.LastName as BusinessOwnerName,b.ScheduledEndOnTime_24HF, c.City, b.ScheduledStartOnTime_24HF,DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,c.Price,c.Description,day( b.ScheduledOnDateTime) as StartDay,  FORMAT(b.ScheduledOnDateTime, 'MMMM') AS StartMonth,Year( b.ScheduledOnDateTime) as StartYear
			FROM Classes c 
			inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
			inner join ClassBatches cb on c.Id = cb.ClassId
			inner join [Batches] b on cb.BatchId = b.Id
			inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
			inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
			WHERE b.InstructorLoginId = @userLoginId   AND c.ClassMode = 'Offline'
			ORDER BY b.ScheduledStartOnTime_24HF ASC;
		end

		else 
		begin
			select Top (@recordLimit)   c.Id, c.BusinessOwnerLoginId, c.Name,bo.FirstName +''+ bo.LastName as BusinessOwnerName,b.ScheduledEndOnTime_24HF, c.City, b.ScheduledStartOnTime_24HF,DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,c.Price,c.Description,day( b.ScheduledOnDateTime) as StartDay,  FORMAT(b.ScheduledOnDateTime, 'MMMM') AS StartMonth,Year( b.ScheduledOnDateTime) as StartYear
			FROM Classes c 
			inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
			inner join ClassBatches cb on c.Id = cb.ClassId
			inner join [Batches] b on cb.BatchId = b.Id
			inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
			inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
			WHERE b.InstructorLoginId = @userLoginId   AND c.ClassMode = 'Offline' and c.Id > @lastRecordId
			ORDER BY b.ScheduledStartOnTime_24HF ASC;
		end

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllCouponsByStudent]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllCouponsByStudent]
(
	@id bigint,
	@studentUserLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin 

	if(@mode=1)
	begin
		--select @studentId = Id from Students where UserLoginId = @userLoginId

		select  c.Id,c.UserLoginId as CouponUserLoginId, c.Code,c.Name,c.Description,c.EndDate, bo.BusinessName 
		from Coupons c 
		inner join BusinessOwners bo on bo.UserLoginId = c.UserLoginId
		where 
		c.IsDeleted = 0 and
		(c.DiscountFor = 1 or  @studentUserLoginId In (select splitdata AS StudentUserLoginnId FROM dbo.fnSplitString(c.SelectedStudent, ','))) 
		and CONVERT(date, GETUTCDATE()) <= c.EndDate 
		and c.Id not in (select cc.CouponId from CouponConsumptions cc where cc.ConsumerUserLoginId = @studentUserLoginId)

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllLicenseBookingsByBusinessOwner_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllLicenseBookingsByBusinessOwner_Pagination]
(
    @id bigint,
	@certificateId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All License Bookings Requests by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	      	
		Select l.Title as LicenseTitle, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.Description as LicenseDescription, l.Price as LicensePrice, c.Name as CertificateName, 
		--ftc.TextValue as CommissionTypeName, 
		lb.CreatedOn, (CONVERT(varchar, lb.CreatedOn,106)) as CreatedOn_FormatDate, lb.Id, lb.Quantity, lb.Status, dbo.GetLicenseBookingStatusText(lb.Status) as StatusText, o.TotalAmount as OrderTotalAmount, o.PaymentMethod as OrderPaymentMethod
		INTO #GetAllLicenseBookingsByBusiness
		from 
		LicenseBookings lb
		inner join Licenses l on lb.LicenseId = l.Id
		inner join Orders o on lb.OrderId = o.Id
		inner join PaymentResponses pr on o.Id = pr.OrderId
		inner join Certificates c on l.CertificateId = c.Id
		--inner join FieldTypeCatalogs ftc on lb.LicenseCommissionType = ftc.KeyName
		where lb.IsDeleted = 0 and lb.BusinessOwnerLoginId = @userLoginId
		and
		( 
		  l.Title LIKE '%'+@searchFilter+'%' OR
		  l.Description LIKE '%'+@searchFilter+'%' OR
		  lb.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,lb.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllLicenseBookingsByBusiness);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'ASC' THEN OrderPaymentMethod END,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'DESC' THEN OrderPaymentMethod END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllLicenseBookingsByBusiness
		order by
		    	CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'ASC' THEN OrderPaymentMethod END,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'DESC' THEN OrderPaymentMethod END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllLicenseBookingsByBusiness
	end
	-- Get All Business Licenses by Business-Owner for Business-Panel
	if(@mode=2)
	begin
	      	
		Select l.Title as LicenseTitle, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.Description as LicenseDescription, l.Price as LicensePrice, c.Name as CertificateName, 
		--ftc.TextValue as CommissionTypeName, 
		lb.CreatedOn, (CONVERT(varchar, lb.CreatedOn,106)) as CreatedOn_FormatDate, lb.Id, lb.Quantity, dbo.GetLicenceQuantityUsedByBusiness(lb.Id) as QuantityUsed, lb.LicenseMinSellingPrice
		INTO #GetAllBusinessLicenses
		from 
		LicenseBookings lb
		inner join Licenses l on lb.LicenseId = l.Id
		inner join Certificates c on l.CertificateId = c.Id
		--inner join FieldTypeCatalogs ftc on lb.LicenseCommissionType = ftc.KeyName
		where lb.BusinessOwnerLoginId = @userLoginId
		and lb.IsDeleted = 0 
		and lb.Status = 2
		and
		( 
		  l.Title LIKE '%'+@searchFilter+'%' OR
		  l.Description LIKE '%'+@searchFilter+'%' OR
		  lb.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,lb.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBusinessLicenses);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'QuantityUsed' AND @sortOrder = 'ASC' THEN QuantityUsed END,
				CASE WHEN @sorting = 'QuantityUsed' AND @sortOrder = 'DESC' THEN QuantityUsed END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBusinessLicenses
		order by
		    	CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'QuantityUsed' AND @sortOrder = 'ASC' THEN QuantityUsed END,
				CASE WHEN @sorting = 'QuantityUsed' AND @sortOrder = 'DESC' THEN QuantityUsed END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBusinessLicenses
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllLicenseBookingsBySuperAdmin_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllLicenseBookingsBySuperAdmin_Pagination]
(
    @id bigint,
	@certificateId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All License Bookings by Business-Owner for Business-Panel
	if(@mode=1)
	begin
	      	
		Select l.Title as LicenseTitle, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.Description as LicenseDescription, l.Price as LicensePrice, c.Name as CertificateName, 
		--ftc.TextValue as CommissionTypeName, 
		lb.CreatedOn, (CONVERT(varchar, l.CreatedOn,106)) as CreatedOn_FormatDate, lb.Id, lb.OrderId, lb.BusinessOwnerLoginId, lb.Quantity, lb.Status, dbo.GetLicenseBookingStatusText(lb.Status) as StatusText, 
		o.TotalAmount as OrderTotalAmount, o.PaymentMethod as OrderPaymentMethod,
		pr.Id as PaymentResponseId, pr.Approved as PaymentIsApproved,
		bo.BusinessName, bo.FirstName + ' ' + bo.LastName as BusinessOwnerFullName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
		INTO #GetAllLicenseBookingsBySuperAdmin
		from 
		LicenseBookings lb
		inner join Licenses l on lb.LicenseId = l.Id
		inner join Orders o on lb.OrderId = o.Id
		inner join PaymentResponses pr on o.Id = pr.OrderId
		inner join Certificates c on l.CertificateId = c.Id
		--inner join FieldTypeCatalogs ftc on lb.LicenseCommissionType = ftc.KeyName
		inner join BusinessOwners bo on lb.BusinessOwnerLoginId = bo.UserLoginId
		where lb.IsDeleted = 0
		and
		( 
		  l.Title LIKE '%'+@searchFilter+'%' OR
		  bo.BusinessName LIKE '%'+@searchFilter+'%' OR
		  l.Description LIKE '%'+@searchFilter+'%' OR
		  lb.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,lb.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllLicenseBookingsBySuperAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
		        CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'ASC' THEN OrderPaymentMethod END,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'DESC' THEN OrderPaymentMethod END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllLicenseBookingsBySuperAdmin
		order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
		    	CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'ASC' THEN LicenseTitle END,
				CASE WHEN @sorting = 'LicenseTitle' AND @sortOrder = 'DESC' THEN LicenseTitle END DESC,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'ASC' THEN LicenseDescription END,
				CASE WHEN @sorting = 'LicenseDescription' AND @sortOrder = 'DESC' THEN LicenseDescription END DESC,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'ASC' THEN Quantity END,
				CASE WHEN @sorting = 'Quantity' AND @sortOrder = 'DESC' THEN Quantity END DESC,	
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'ASC' THEN LicensePrice END,
				CASE WHEN @sorting = 'LicensePrice' AND @sortOrder = 'DESC' THEN LicensePrice END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'ASC' THEN OrderPaymentMethod END,
				CASE WHEN @sorting = 'OrderPaymentMethod' AND @sortOrder = 'DESC' THEN OrderPaymentMethod END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllLicenseBookingsBySuperAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllStudentCourseDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllStudentCourseDetail]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get Active Course/Classes List of Student/User by Pagination 
	if(@mode=1)
	begin			
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(cb.Id) + 1 from ClassBookings cb
		end
	    select Top (@recordLimit) cb.Id ,c.BusinessOwnerLoginId, c.Id as ClassId, c.Name, c.Description, c.OnlineClassLink, c.Price,b.InstructorLoginId, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, c.Address, c.ClassMode, c.ClassDays, c.ClassDays_ShortForm, cb.ClassPriceType, Cb.StartDate, cb.EndDate, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,IsNull(c.ClassType,'') as ClassType, 
		--COUNT(r.Id) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
		--	COALESCE(SUM(r.Rating), 0) AS TotalRating,
		bo.FirstName +''+ bo.LastName  as BusinessOwnerName,
		(select COALESCE(SUM(r.Rating), 0) AS TotalRating
			from Reviews r where r.ItemId = b.InstructorLoginId) as TotalRating, 
		 (select ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating
			from Reviews r where r.ItemId = b.InstructorLoginId) as AverageRating,
		 (select COUNT(r.Id) AS TotalReviewsEntered
			from Reviews r where r.ItemId = b.InstructorLoginId) as TotalReviewsEntered, 

			ISNULL(cpr.Status, '') AS Status, 
			Case when 
					(DATEDIFF(Day,GETUTCDATE(),cb.EndDate_DateTimeFormat) > 5)
				then 
					(case when (cpr.Status is null or cpr.Status = 0) then 1 when cpr.Status = 3 then 1 else 0 end)
				else 0 
				end 
			as CanPauseClass 
		from Classes c 
		inner join ClassBookings cb on c.Id = cb.ClassId 
		inner join Orders o on cb.OrderId = o.Id 
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners bo on b.InstructorLoginId = bo.UserLoginId
		 OUTER APPLY (
            SELECT TOP 1
                Status
            FROM
                ClassPauseRequests cpr
            WHERE
                cb.Id = cpr.ClassBookingId
            ORDER BY
                CreatedOn DESC
        ) cpr
		where cb.StudentUserLoginId = @userLoginId 
		and cast(cb.EndDate as date) >= cast(GETUTCDATE() as date) 
		and cb.Id < @lastRecordId
		--GROUP BY  cb.Id,c.Id,c.Name,c.BusinessOwnerLoginId,c.Description,c.OnlineClassLink,c.Price, b.InstructorLoginId,  b.ScheduledStartOnTime_24HF,
  --  b.ScheduledEndOnTime_24HF, c.Address, c.ClassMode, c.ClassDays, c.ClassDays_ShortForm, cb.ClassPriceType, Cb.StartDate, cb.EndDate,
  --  c.ClassImage,dbo.GetClassImageWithPath(c.ClassImage), c.ClassType, bo.FirstName + '' + bo.LastName,cpr.Status,CanPauseClass
	order by Id desc
	end
	-- Get Ended Course/Classes List of Student/User by Pagination
	else if(@mode=2)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(cb.Id) + 1 from ClassBookings cb
		end	
		
		select TOP (@recordLimit) cb.Id,c.BusinessOwnerLoginId, c.Id as ClassId,  c.Name, c.Description, c.OnlineClassLink, c.Price, b.InstructorLoginId,b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, c.Address, c.ClassMode, c.ClassDays, c.ClassDays_ShortForm, cb.ClassPriceType, cb.StartDate, cb.EndDate, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,IsNull(c.ClassType,'') as ClassType,COUNT(r.Id) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
			COALESCE(SUM(r.Rating), 0) AS TotalRating,bo.FirstName +''+ bo.LastName  as BusinessOwnerName
		FROM
		Classes c
		INNER JOIN ClassBookings cb ON c.Id = cb.ClassId
		INNER JOIN Orders o ON cb.OrderId = o.Id
		inner join [Batches] b on cb.BatchId = b.Id
		LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
		inner join BusinessOwners bo on b.InstructorLoginId = bo.UserLoginId
		WHERE
		cb.StudentUserLoginId = @userLoginId
		AND CAST(cb.EndDate AS DATE) < CAST(GETUTCDATE() AS DATE) 
		and cb.Id < @lastRecordId
	GROUP BY  cb.Id,c.Id,c.Name,c.BusinessOwnerLoginId,c.Description,c.OnlineClassLink,c.Price, b.InstructorLoginId,  b.ScheduledStartOnTime_24HF,
    b.ScheduledEndOnTime_24HF, c.Address, c.ClassMode, c.ClassDays,c.ClassDays_ShortForm, cb.ClassPriceType, Cb.StartDate, cb.EndDate,
    c.ClassImage,dbo.GetClassImageWithPath(c.ClassImage), c.ClassType, bo.FirstName + '' + bo.LastName
		ORDER BY Id DESC   	    
	end
	-- Get Booking Detail List by UserLoginId In Visitor Panel
	else if(@mode=3)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(o.Id) + 1 from Orders o
		end	
		
		select TOP (@recordLimit) Id, ItemType, ItemId, CreatedOn,ItemName 
		FROM (
				SELECT o.Id, o.ItemType, o.ItemId, o.CreatedOn,e.Title as ItemName
				FROM Orders o
				INNER JOIN Events  e ON o.ItemId = e.Id
				WHERE o.UserLoginId = @userLoginId
			UNION

				SELECT o.Id, o.ItemType, o.ItemId, o.CreatedOn,bp.Name as  ItemName
				FROM Orders o
				INNER JOIN BusinessPlans bp ON o.Id = bp.Id
				WHERE o.UserLoginId = @userLoginId

			UNION

				SELECT o.Id, o.ItemType, o.ItemId, o.CreatedOn,c.Name as ItemName
				FROM Orders o
				INNER JOIN Classes c ON o.Id = c.Id
				WHERE o.UserLoginId = @userLoginId
			) AS combined_results 
		where Id < @lastRecordId
		ORDER BY CreatedOn DESC   
	end
    -- Get near expiry courses Detail List by UserLoginId In Visitor Panel
	else if(@mode=4)
	begin
		if(@lastRecordId <= 0) 
		begin
			select @lastRecordId = Max(cb.Id) + 1 from ClassBookings cb
		end
		
		--SELECT TOP (@recordLimit) c.Id, c.Name,  cb.StartDate,  cb.EndDate,  bo.FirstName + ' ' + bo.LastName as BusinessName,  s.FirstName + ' ' + s.LastName as InstructorName,  s.ProfileImage,  dbo.GetStaffProfileImageWithPath(s.ProfileImage) as InstructorImageWithPath 
		--FROM  Classes c
		--INNER JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		--INNER JOIN Staffs s ON c.InstructorLoginId = s.UserLoginId
		--INNER JOIN ClassBookings cb ON c.Id = cb.ClassId
		--WHERE
		--cb.StudentUserLoginId = @userLoginId
		--AND DATEDIFF(DAY, cb.StartDate, cb.EndDate) = 3
  --      AND DATEDIFF(DAY, GETUTCDATE(), cb.EndDate) <= 3
		--and cb.Id < @lastRecordId
		--order by Id desc

		SELECT TOP (@recordLimit) cb.Id, c.Id as ClassId, c.Name,  cb.StartDate,  cb.EndDate,  bo.FirstName + ' ' + bo.LastName as BusinessName,  insBO.FirstName + ' ' + insBO.LastName as InstructorName,  insBO.ProfileImage,  dbo.GetStaffProfileImageWithPath(insBO.ProfileImage) as InstructorImageWithPath, insBOCat.Name as InstructorCategoryName, DATEDIFF(DAY, GETUTCDATE(), cast(cb.EndDate as datetime)) as ExpiresInDays
		FROM  Classes c
		INNER JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		--INNER JOIN Staffs s ON c.InstructorLoginId = s.UserLoginId
		INNER JOIN ClassBookings cb ON c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join BusinessCategories insBOCat on insBO.BusinessSubCategoryId = insBOCat.Id
		WHERE
		cb.StudentUserLoginId = @userLoginId
        AND DATEDIFF(DAY, GETUTCDATE(), cast(cb.EndDate as datetime)) between 0 and 3
		and cb.Id < @lastRecordId
		order by Id desc
		
    end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllStudentEventList]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllStudentEventList]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
     declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	------To Get Joined/Enrolled Events By User-Login-Id In Visitor-Panel Using in App 
	if(@mode=1)
	begin

		if(@lastRecordId <= 0) 
		begin
		    select Top(@recordLimit) eb.Id,eb.EventId,eb.EventTicketQRCode,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.Price,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.Title,e.EventLocationURL,e.ShortDescription from EventBookings eb inner join Events  e on eb.EventId = e.Id 
               inner join Orders o on eb.OrderId = o.Id 
              where eb.UserLoginId = @userLoginId
		end
		else
		begin
		    select Top(@recordLimit) eb.Id,eb.EventId,eb.EventTicketQRCode,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.Price,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.Title,e.ShortDescription from EventBookings eb inner join Events  e on eb.EventId = e.Id 
               inner join Orders o on eb.OrderId = o.Id 
              where eb.UserLoginId = @userLoginId and eb.Id < @lastRecordId
			order by eb.Id desc
		end
    end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllStudentGroupRecord]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllStudentGroupRecord]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- To Get Group By Login-User In Visitor-Panel Using in App 
	if(@mode=1)
	begin

		if(@lastRecordId <= 0) 
		begin
			select @lastRecordId = Max(Id) + 1 from Groups g
        end

		select Top(@recordLimit) g.Id, g.Name,g.Description,g.GroupImage, dbo.GetGroupImageWithPath(g.GroupImage) as GroupImageWithPath 
		,bo.Id as BusinessOwnerId, bo.UserLoginId as BusinessOwnerLoginId, bo.BusinessName, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
		, c.Name as ClassName, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, c.ClassDays_ShortForm, insBO. FirstName + ' ' + insBO.LastName as InstructorName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath, insUL.IsCertified as InstructorIsCertified, insUL.UniqueUserId as InstructorUniqueUserId, b.Id as BatchId, b.Name as BatchName, c.ClassCategoryTypeId, cct.Name as ClassCategoryTypeName
		from Groups g 
		inner join GroupMembers gm on g.Id = gm.GroupId
		inner join BusinessOwners bo on g.BusinessOwnerId = bo.Id
		inner join [Batches] b on g.Id = b.GroupId
		inner join ClassBatches cb on b.Id = cb.BatchId
		inner join Classes c on cb.ClassId = c.Id
		inner join ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id 
		where gm.UserLoginId = @userLoginId 
		and g.Id < @lastRecordId
		and g.IsDeleted = 0
		and b.IsDeleted = 0
		and c.IsDeleted = 0
		order by g.Id desc
     end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetAllTrainingDetailSearch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetAllTrainingDetailSearch]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@location nvarchar(max),
	--@trainingType nvarchar(max),
	@latitude decimal(18,2),
	@longitude decimal(18,2),
	@searchkeyword nvarchar(max),
	@searchBy nvarchar(max),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get All Training List by Pagination
	if(@mode=1)
	begin			
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(t.Id) + 1 from Trainings  t
		end

	    select Top (@recordLimit)   t.Id,  t.UserLoginId,  t.TrainingName, t.TrainingImage,dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath, t.StartDate,  DAY(t.StartDate) as StartDay, DATENAME(MONTH, t.StartDate) as StartMonth,YEAR(t.StartDate) as StartYear, t.CenterName, t.Location,  t.ShortDescription, t.Address
		FROM  Trainings t
		where   t.Id < @lastRecordId
		and t.StartDate_DateTimeFormat >= GETUTCDATE()
		order by Id desc
    end
	if(@mode=2)
	begin			
		--if(@lastRecordId <= 0) 
		--begin 
		--	select @lastRecordId = Max(t.Id) + 1 from Trainings  t
		--end
	       select Top (@recordLimit)   t.Id,  t.UserLoginId,  t.TrainingName, t.TrainingImage,dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath, t.StartDate,  DAY(t.StartDate) as StartDay, DATENAME(MONTH, t.StartDate) as StartMonth,YEAR(t.StartDate) as StartYear, t.CenterName, t.Location,  t.ShortDescription FROM  Trainings t
			where  t.Id > @lastRecordId 
			and t.Location = @searchkeyword 
			and 'location' = @searchBy
			and t.StartDate_DateTimeFormat >= GETUTCDATE()
		      order by Id desc
    end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetBusinessOwnersByCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetBusinessOwnersByCategory]
(
	@id bigint,
	@businessCategoryId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int,
	@userLoginId bigint
)
as
begin
	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get Business Owners list by Parent-Category-Id
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin
			select TOP (@recordLimit) bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName,bo.UserLoginId,case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and (bo.BusinessCategoryId = @businessCategoryId or bc.ParentBusinessCategoryId = @businessCategoryId) and sf.StudentLoginId = @userLoginId
			order by Id desc
		end
		else 
		begin
			select TOP (@recordLimit) bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName,bo.UserLoginId,case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and (bo.BusinessCategoryId = @businessCategoryId or bc.ParentBusinessCategoryId = @businessCategoryId) and bo.Id < @lastRecordId and sf.StudentLoginId = @userLoginId
			order by Id desc
		end
	end
	-- Get Business Owners list by Sub-Category-Id
	if(@mode=2)
	begin

		if(@lastRecordId <= 0) 
		begin
			select TOP (@recordLimit) bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName,bo.UserLoginId,case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and (bo.BusinessCategoryId = @businessCategoryId) and sf.StudentLoginId = @userLoginId
			order by Id desc
		end
		else 
		begin
			select TOP (@recordLimit) bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName,bo.UserLoginId,case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and (bo.BusinessCategoryId = @businessCategoryId) and bo.Id < @lastRecordId and sf.StudentLoginId = @userLoginId
			order by Id desc
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetBusinessOwnersBySearch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetBusinessOwnersBySearch]
(
	@id bigint,
	@businessCategoryId bigint,
	@searchKeyword nvarchar(max),
	@latitude decimal(18,15),
	@longitude decimal(18,15),
	@radius decimal(18,2),
	@lastRecordId bigint,
	@recordLimit int,
	@mode int,
	@userLoginId bigint
)
as
begin
	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Search Business Owners by Business-name
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end
		
		select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
		left join StudentFavourites sf on bo.UserLoginId = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
		where ul.IsDeleted = 0 and bo.Id < @lastRecordId 
		and bo.BusinessName like '%'+@searchKeyword+'%'
		order by Id desc
	end
	-- Search Business Onwers by Business-name with Business-Category-Id (not in use till now)
	else if(@mode=2)
	begin
		if(@lastRecordId <= 0) 
		begin
			select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and sf.StudentLoginId = @userLoginId and bo.BusinessName like '%'+@searchKeyword+'%' and bo.BusinessCategoryId = @businessCategoryId
			order by Id desc
		end
		else 
		begin
			select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
			bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
			inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
			where ul.IsDeleted = 0 and bo.Id < @lastRecordId and sf.StudentLoginId = @userLoginId and bo.BusinessName like '%'+@searchKeyword+'%' and bo.BusinessCategoryId = @businessCategoryId
			order by Id desc
		end
	end
	-- Search Business Owners by Business-location by location keywords
	if(@mode=3)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end

		select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
		inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
		where ul.IsDeleted = 0 
		and bo.Id < @lastRecordId 
		and 
		(
		ul.Country like '%'+@searchKeyword+'%' or
		ul.State like '%'+@searchKeyword+'%' or
		ul.City like '%'+@searchKeyword+'%' or
		ul.Address like '%'+@searchKeyword+'%'
		)
		order by Id desc
	end
	-- Search Business Owners by Business-location by Current-location (Latitude - Longitude)
	if(@mode=4)
	begin
		
		DECLARE @earthRadius FLOAT = 6371; -- Earth's radius in kilometers
		DECLARE @maxLat decimal(18,15), @minLat decimal(18,15), @maxLon decimal(18,15), @minLon decimal(18,15);

		-- Calculate maximum and minimum latitude and longitude values based on specified radius
		SET @maxLat = @latitude + (@radius / @earthRadius) * (180 / PI());
		SET @minLat = @latitude - (@radius / @earthRadius) * (180 / PI());
		SET @maxLon = @longitude + (@radius / @earthRadius) * (180 / PI()) / COS(@latitude * PI() / 180);
		SET @minLon = @longitude - (@radius / @earthRadius) * (180 / PI()) / COS(@latitude * PI() / 180);

		-- verify distance between the two coordinates at : https://www.nhc.noaa.gov/gccalc.shtml

		-- Debugging statements to check calculated values
		PRINT 'Max latitude: ' + CONVERT(VARCHAR, @maxLat);
		PRINT 'Min latitude: ' + CONVERT(VARCHAR, @minLat);
		PRINT 'Max longitude: ' + CONVERT(VARCHAR, @maxLon);
		PRINT 'Min longitude: ' + CONVERT(VARCHAR, @minLon);

		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end

		-- Retrieve Business-users within the specified radius
		select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		left join StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId
		inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
		where ul.IsDeleted = 0 
		and bo.Id < @lastRecordId 
		and sf.StudentLoginId = @userLoginId
		--and Convert(decimal(18,15), ul.Latitude) BETWEEN @minLat AND @maxLat
		--AND Convert(decimal(18,15), ul.Longitude) BETWEEN @minLon AND @maxLon
		and ul.Latitude BETWEEN @minLat AND @maxLat
		AND ul.Longitude BETWEEN @minLon AND @maxLon

		order by Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetBusinessOwnersBySearch_SuperAdmin]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetBusinessOwnersBySearch_SuperAdmin]
(
	@id bigint,
	@userLoginId bigint,
	@certificateId bigint,
	@businessCategoryId bigint,
	@searchKeyword nvarchar(max),
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Search Business Owners by Business-name/Owner-Name with Certification Profile
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end

		select TOP (@recordLimit) bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, 
		case when bcert.BusinessOwnerLoginId IS NULL then 0 else 1 end as IsCertificateAssigned,
		bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName, ul.MasterId as BusinessMasterId, ul.UniqueUserId as BusinessUniqueUserId
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		left join BusinessCertifications bcert on bo.UserLoginId = bcert.BusinessOwnerLoginId and bcert.CertificateId = @certificateId
		where ul.IsDeleted = 0 and bo.Id < @lastRecordId 
		and (bo.BusinessName like '%'+@searchKeyword+'%' 
			or ul.MasterId like '%'+@searchKeyword+'%'
			or ul.UniqueUserId like '%'+@searchKeyword+'%'
		)
		order by Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetBusinessPlanRecord]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_GetBusinessPlanRecord]
(
	@id bigint,
	@city nvarchar (max),
	@latitude decimal(18,2),
	@longitude decimal(18,2),
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get All Active Business Plan Detial For Visitor-Panel
	if(@mode=1)
	begin

		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bp.Id) + 1 from BusinessPlans bp
		end

		select TOP (@recordLimit) bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage) as PlanImageWithPath, ul.City
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		inner join UserLogins ul on bp.BusinessOwnerLoginId = ul.Id
		where bp.Status = 1 and bp.IsDeleted = 0 and bp.Id < @lastRecordId 
		and ul.City = @city
		order by bp.Id desc
	 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetClassListByFilter]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetClassListByFilter]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@searchValue nvarchar(max),
	@classCategoryTypeId bigint,
	@classMode nvarchar(max),
	@mode int
)
as
begin
	-- Get Classes List with Filter by Business-Owner [Used in Business-Owner-Mobile-App Class-section]
	if(@mode=1)
	begin
		select c.Id, c.Name, c.ClassCategoryTypeId, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath 
		from Classes c 
		where c.BusinessOwnerLoginId = @businessOwnerLoginId 
		and c.IsDeleted = 0 
		and c.ClassMode = @classMode
		and (@classCategoryTypeId = 0 or c.ClassCategoryTypeId = @classCategoryTypeId)
		and (@searchValue = '' or c.Name like '%'+@searchValue+'%')
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetDetailByMasterId]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetDetailByMasterId]
(
	@masterId nvarchar(max),
	@mode int
)
as
begin
	-- Get Student Basic Detail by Master-Id 
	if(@mode=1)
	begin
		select ul.Email, IsNull(ul.PhoneNumber,'') as PhoneNumber, ISNULL(ul.PhoneNumber_CountryCode,'') as PhoneNumberCountryCode, ul.MasterId,
		s.Id, s.FirstName, s.LastName, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, s.BusinessStudentProfileImage, dbo.GetStudentImageWithPath(s.BusinessStudentProfileImage) as BusinessStudentProfileImageWithPath, s.UserLoginId 
		from UserLogins ul
		inner join Students s on ul.Id = s.UserLoginId
		where ul.MasterId = @masterId
	end
	-- Get Student-User or Business-User detail by Master-Id [Non-deleted]
	else if(@mode=2)
	begin
		
		select ul.Email, IsNull(ul.PhoneNumber,'') as PhoneNumber, ISNULL(ul.PhoneNumber_CountryCode,'') as PhoneNumberCountryCode, ul.MasterId, ul.RoleId, ul.Status,
		s.Id, s.FirstName, s.LastName, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, s.UserLoginId 
		from UserLogins ul
		inner join Students s on ul.Id = s.UserLoginId
		where ul.MasterId = @masterId and ul.IsDeleted = 0 and ul.RoleId = 3
		Union
		select ul.Email, IsNull(ul.PhoneNumber,'') as PhoneNumber, ISNULL(ul.PhoneNumber_CountryCode,'') as PhoneNumberCountryCode, ul.MasterId, ul.RoleId, ul.Status,
		bo.Id, bo.FirstName, bo.LastName, bo.ProfileImage, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath, bo.UserLoginId 
		from UserLogins ul
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		where ul.MasterId = @masterId and ul.IsDeleted = 0 and ul.RoleId = 4

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetInstructorProfileDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetInstructorProfileDetail]
(
	@id bigint,
	@userLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get Student Favourites
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(sf.Id) + 1 from StudentFavourites sf
		end
		SELECT DISTINCT TOP (@recordLimit)
			subquery.Id,
			subquery.FavouriteUserLoginId,
			subquery.InstructorName,
			subquery.ProfileImage
		FROM (
			SELECT
				sf.Id,
				sf.FavouriteUserLoginId,
				s.FirstName + ' ' + s.LastName as InstructorName,
				dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImage,
				ROW_NUMBER() OVER (PARTITION BY sf.Id ORDER BY sf.Id DESC) AS RowNumber
			FROM
				StudentFavourites sf
				INNER JOIN UserLogins ul ON sf.FavouriteUserLoginId = ul.Id
				INNER JOIN Staffs s ON ul.MasterId = s.MasterId
			WHERE
				sf.StudentLoginId = @userLoginId
				AND sf.Id < @lastRecordId
			) AS subquery
		WHERE subquery.RowNumber = 1
    end
	----To Get Coaches Event List by Id
	if(@mode=2)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(e.Id) + 1 from Events e
		end
		select  e.Id ,e.Title,e.ShortDescription,e.EndTime_24HF,e.StartTime_24HF,e.StartDate,e.EndDate,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage)as EventImageWithPath from Events e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId 
		inner join BusinessCategories bc on bo.BusinessSubCategoryId = bc.Id
		where bo.UserLoginId = @userLoginId AND e.Id < @lastRecordId
		order by Id desc
    end
	----To Get Coaches Created Classes detail by Id   
	if(@mode=3)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(c.Id) + 1 from Classes c
		end
		select c.Id, c.Name,c.Description,c.Address,c.ClassDays,c.ClassMode from Classes c 
		inner join BusinessOwners bo on  c.BusinessOwnerLoginId = bo.UserLoginId
		where bo.UserLoginId = @userLoginId  AND c.Id < @lastRecordId
		order by Id desc
    end
	----To  Get  Coaches About detail by Id   
	if(@mode=4)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners  bo
		end
		select bo.UserLoginId, bo.Id,bo.FirstName +''+ bo.LastName as Name, bo.BusinessName ,bo.Address,bo.ProfileImage,dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath 
		from BusinessOwners bo where bo.UserLoginId =  @userLoginId  AND bo.Id < @lastRecordId
		order by Id desc
    end
	----To  Get  Coaches Packages detail by Id   
	if(@mode=5)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bp.Id) + 1 from BusinessPlans  bp
		end
		select bp.Id,bp.Description,bp.PlanImage,bp.Name,bp.Price from BusinessPlans bp
		inner join BusinessOwners bo on bp.BusinessOwnerLoginId = bo.UserLoginId
		where bo.UserLoginId =  @userLoginId  AND bp.Id < @lastRecordId
		order by Id desc
    end
    ----To  Get  Coaches (Instructor) detail by Id   
	if(@mode=6)
	begin
		select bc.Id, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath, bo.FirstName + '' + bo.LastName AS BusinessName,
		 cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) AS Rating
		FROM BusinessOwners bo
		INNER JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		INNER JOIN BusinessCategories bsc ON bo.BusinessCategoryId = bsc.Id
		INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
		WHERE bo.UserLoginId = @userLoginId
    end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetNotifications_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetNotifications_Pagination]
(
	@id bigint,
	@toUserLoginId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@userLoginId bigint,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get notification List by Pagination 
	if(@mode=1)
	begin
		select @totalRecords = Count(n.Id) from Notifications n inner join NotificationRecords nr on n.NotificationRecordId = nr.Id where UserLoginId = @userLoginId and nr.IsDeleted = 0

		if(@lastRecordId <= 0) 
		begin
			select TOP (@recordLimit) n.Id as NotificationId,nr.NotificationTitle, nr.NotificationText, nr.CreatedOn, (CONVERT(varchar, nr.CreatedOn,106)) as CreatedOn_FormatDate,n.IsRead,@totalRecords, nr.ItemId, nr.ItemTable, nr.IsNotificationLinkable, nr.NotificationType
			from Notifications n
			inner join NotificationRecords nr on n.NotificationRecordId = nr.Id
			where n.UserLoginId = @toUserLoginId
			and nr.IsDeleted = 0 
			order by NotificationId desc
		end
		else 
		begin
			select TOP (@recordLimit) n.Id as NotificationId, nr.NotificationTitle, nr.NotificationText, nr.CreatedOn, (CONVERT(varchar, nr.CreatedOn,106)) as CreatedOn_FormatDate,n.IsRead,@totalRecords, nr.ItemId, nr.ItemTable, nr.IsNotificationLinkable, nr.NotificationType
			from Notifications n
			inner join NotificationRecords nr on n.NotificationRecordId = nr.Id
			where n.UserLoginId = @toUserLoginId
			and nr.IsDeleted = 0  and n.Id < @lastRecordId
			order by  NotificationId desc
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetQueriesByStudent_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_GetQueriesByStudent_Pagination]
(
	@id bigint,
	@studentId bigint,
	@lastRecordId bigint,
	@recordLimit int,
	@userLoginId bigint,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get Queries List by Pagination for Student
	if(@mode=1)
	begin
		select @studentId = Id from Students where UserLoginId = @userLoginId
		
		--select @totalRecords = Count(*) from Queries e where StudentId = @studentId and e.IsDeleted = 0
		
		if(@lastRecordId <= 0) 
		begin
			select TOP (@recordLimit) en.Id,en.BusinessOwnerId,en.Title,en.IsReplied,(CONVERT(varchar, en.CreatedOn,106)) as CreatedOn_FormatDate, bo.BusinessName as BusinessName,en.ReplyBody,(CONVERT(varchar, en.RepliedOn,106)) as RepliedOn_FormatDate,en.Description
			from Queries en 
			inner join BusinessOwners bo on en.BusinessOwnerId = bo.Id
			where StudentId = @studentId and en.IsDeleted = 0 
			order by Id desc
		end
		else 
		begin
			select TOP (@recordLimit) en.Id,en.BusinessOwnerId,en.Title,en.IsReplied,(CONVERT(varchar, en.CreatedOn,106)) as CreatedOn_FormatDate, bo.BusinessName as BusinessName,en.ReplyBody,(CONVERT(varchar, en.RepliedOn,106)) as RepliedOn_FormatDate,en.Description
			from Queries en 
			inner join BusinessOwners bo on en.BusinessOwnerId = bo.Id
			where en.StudentId = @studentId and en.IsDeleted = 0 and en.Id < @lastRecordId
			order by Id desc
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetRecordByMenu]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetRecordByMenu]
(
	@id bigint,
	@userLoginId bigint,
	@menutag nvarchar (max),
	@categoryKey nvarchar (max),
	@itemType  nvarchar (max),
	@city nvarchar (max),
	@latitude decimal(18,2),
	@longitude decimal(18,2),
	@lastRecordId bigint,
	@recordLimit int,
	@mode int,
	@categorySearch nvarchar(max),
	@searchType nvarchar(max),
	@searchValue nvarchar(max)
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get Active Academy List by Pagination
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end
		
		-- matching names
		if(@searchType = 'name')
		begin
			select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName +' '+ bo.LastName  as OwnerFullName, bo.BusinessName as BusinessName, bo.SpecialDiscount, bo.SpecialPrice, bo.SpecialDuration,
				dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
				ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			where bsc.MenuTag = @menutag and bc.CategoryKey = @categoryKey 	and bo.Id < @lastRecordId 
			and BusinessName like '%'+ @searchValue + '%'
			and bsc.Name like '%'+ @categorySearch +'%'
			order by bo.Id desc
		end
		-- matching location
		else if(@searchType = 'location')
		begin
			select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName +' '+ bo.LastName  as OwnerFullName, bo.BusinessName as BusinessName, bo.SpecialDiscount, bo.SpecialPrice, bo.SpecialDuration,
				dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
				ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			where bsc.MenuTag = @menutag and bc.CategoryKey = @categoryKey 	and bo.Id < @lastRecordId 
			and ul.City like ''+ @searchValue + '%'
			and bsc.Name like '%'+ @categorySearch +'%'
			order by bo.Id desc
		end
		-- all (no filter)
		else
		begin
			select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName +' '+ bo.LastName  as OwnerFullName, bo.BusinessName as BusinessName, bo.SpecialDiscount, bo.SpecialPrice, bo.SpecialDuration,
				dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
				ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			where bsc.MenuTag = @menutag and bc.CategoryKey = @categoryKey 	and bo.Id < @lastRecordId 
			--and ul.City like ''+ @city + '%'
			and bsc.Name like '%'+ @categorySearch +'%'
			order by bo.Id desc
		end
	end
	--Get Coaches  List (Instructor)For Visitor-Panel 
	else if(@mode=2)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(bo.Id) + 1 from BusinessOwners bo
		end

		-- matched instructor name
		if(@searchType = 'name')
		begin
			--WITH FilteredInstructors AS (
				select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bc.Id as BusinessCategoryId, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath, bo.FirstName + ' ' + bo.LastName AS FullName, bo.FirstName, bo.LastName, bo.About,
				--cast(3 as decimal) as AverageRating
				cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
				case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite,
				ul.UniqueUserId, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
				ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
				FROM BusinessOwners bo
				INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId = bc.Id 
				INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
				INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
				INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
				LEFT JOIN StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
				WHERE bsc.MenuTag = @menutag 
				AND bsc.CategoryKey = @categoryKey
				and bo.Id < @lastRecordId
				and bsc.Name like '%'+ @categorySearch +'%'
				AND (
					bo.FirstName like '%' + @searchValue + '%' 
					or
					bo.LastName like '%' + @searchValue + '%'
					or
					(bo.FirstName + ' ' + bo.LastName) like '%' + @searchValue + '%'
				)
				order by bo.Id desc
			--)
			
			--SELECT Id, BusinessOwnerLoginId, BusinessCategoryId, ProfileImageWithPath, FullName, FirstName, LastName, About, AverageRating, IsFavourite
			--FROM FilteredInstructors
			--order by Id desc;
		end
		-- matched city location
		else if(@searchType = 'location')
		begin
			select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bc.Id as BusinessCategoryId, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath, bo.FirstName + ' ' + bo.LastName AS FullName, bo.FirstName, bo.LastName, bo.About,
			--cast(3 as decimal) as AverageRating
			cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
			case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite,
			ul.UniqueUserId, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
			ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			LEFT JOIN StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
			WHERE bsc.MenuTag = @menutag 
			AND bsc.CategoryKey = @categoryKey
			and bo.Id < @lastRecordId
			AND ul.City like ''+ @searchValue + '%'
			and bsc.Name like '%'+ @categorySearch +'%'
			order by bo.Id desc
		end
		-- all
		else
		begin
			select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bc.Id as BusinessCategoryId, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath, bo.FirstName + ' ' + bo.LastName AS FullName, bo.FirstName, bo.LastName, bo.About,
			--cast(3 as decimal) as AverageRating
			cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
			case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite,
			ul.UniqueUserId, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
			ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			LEFT JOIN StudentFavourites sf on ul.Id = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
			WHERE bsc.MenuTag = @menutag 
			AND bsc.CategoryKey = @categoryKey
			and bo.Id < @lastRecordId
			and bsc.Name like '%'+ @categorySearch +'%'
			order by bo.Id desc
		end

	end
	-- Get Events/Activities List For Visitor-Panel
	else if(@mode=3)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(e.Id) + 1 from [Events] e
		end

		select TOP (@recordLimit) e.Id, e.Title, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage)as EventFeaturedImageWithPath, e.City
		from [Events] e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId 
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
		WHERE bsc.MenuTag = @menutag  and e.Id < @lastRecordId 
		and e.City like ''+ @searchValue + '%'
		and bsc.Name like '%'+ @categorySearch +'%'
		order by e.Id desc
	end
	-- Get Class List for Android App
	else if(@mode=4)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(c.Id) + 1 from Classes c
		end

		-- matched class/batch name
		if(@searchType = 'name')
		begin
			select TOP (100) c.Id, c.Name, c.Description, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.City, c.ClassDays, c.ClassDays_ShortForm
		,b.InstructorLoginId, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF,  b.[Name] as BatchName
			,insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified
			from Classes c
			inner join ClassBatches cbtch on c.Id = cbtch.ClassId 
			inner join [Batches] b on cbtch.BatchId = b.Id
			inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
			inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
			inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId 
			inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
			WHERE 
			bsc.MenuTag = @menutag and
			c.Id < @lastRecordId 
			and c.IsDeleted = 0 and b.Isdeleted = 0
			and bsc.Name like '%'+ @categorySearch +'%'
			AND (
				c.Name like '%' + @searchValue + '%' 
				or
				b.Name like '%' + @searchValue + '%'
			)
			order by c.Id desc
		end
		-- matched city location
		else if(@searchType = 'location')
		begin
			select TOP (100) c.Id, c.Name, c.Description, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.City, c.ClassDays, c.ClassDays_ShortForm
		,b.InstructorLoginId, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, b.[Name] as BatchName
			,insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified
			from Classes c
			inner join ClassBatches cbtch on c.Id = cbtch.ClassId 
			inner join [Batches] b on cbtch.BatchId = b.Id
			inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
			inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
			inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId 
			inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
			WHERE 
			bsc.MenuTag = @menutag and
			c.Id < @lastRecordId 
			and c.IsDeleted = 0 and b.Isdeleted = 0
			and (c.City like ''+ @searchValue + '%')
			and bsc.Name like '%'+ @categorySearch +'%'
			order by c.Id desc
		end
		else
		begin
			select TOP (100) c.Id, c.Name, c.Description, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.City, c.ClassDays, c.ClassDays_ShortForm,
		b.InstructorLoginId, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, b.[Name] as BatchName
			,insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified
			from Classes c
			inner join ClassBatches cbtch on c.Id = cbtch.ClassId 
			inner join [Batches] b on cbtch.BatchId = b.Id
			inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
			inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
			inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId 
			inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
			WHERE 
			bsc.MenuTag = @menutag and
			c.Id < @lastRecordId 
			and c.IsDeleted = 0 and b.Isdeleted = 0
			and bsc.Name like '%'+ @categorySearch +'%'
			order by c.Id desc
		end
	end
	---------------
	-- For Search Page Academy with Filter.
	else if(@mode=-100)
	begin
		select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName +' '+ bo.LastName  as OwnerFullName, bo.BusinessName as BusinessName, bo.SpecialDiscount, bo.SpecialPrice, bo.SpecialDuration,
				dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
				ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName
				--,bsc.MenuTag
			FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
			INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
			INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
			where 
			(@menutag = '' or bsc.MenuTag = @menutag) 
			--and (@categoryId = 0 or bsc.Id = @categoryId)
			and (bc.CategoryKey = 'b2b')
			and (@city = '' or ul.City like '%' + @city + '%' or ul.FullAddressLocation like '%' + @city + '%')
			and (@searchValue = '' or BusinessName like '%'+ @searchValue + '%')
			--and bo.Id < @lastRecordId 
			order by bo.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetRecordsBySearch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetRecordsBySearch]
(
	@id bigint,
	@userLoginId bigint,
	@menuTag nvarchar (max),
	@location nvarchar (max),
	@latitude nvarchar(max),
	@longitude nvarchar(max),
	@itemType nvarchar (max),
	@searchText  nvarchar (max),
	@itemMode nvarchar(max),
	@priceType nvarchar(max),
	@categoryId bigint,
	@pageSize int,
	@page int,
	@mode int,
	@startDate nvarchar(20),
	@days nvarchar(max)
)
as
BEGIN
	DECLARE @latitudedesi DECIMAL(10, 2) = 0;
    DECLARE @longitudedesi DECIMAL(10, 2) = 0;

    DECLARE @totalRecords BIGINT = 0;

	-- if current location then set the latitude and longitude values
	IF(@latitude != '' and @longitude != '')
	BEGIN 
		SET @latitudedesi = CAST(@latitude AS DECIMAL(10, 2));

		SET @longitudedesi = CAST(@longitude AS DECIMAL(10, 2));
	END
	--ELSE 
	--BEGIN
	--	select @latitudedesi = cm.Latitude, @longitudedesi = cm.Longitude 
	--	from CityMasters cm where Name = @location
	--END


	-- Get All B2B Academies by search filter - Web App 
	IF(@mode = 1)
	BEGIN
		
		SELECT
                bo.Id,
                bo.UserLoginId,
                bo.FirstName + ' ' + bo.LastName AS BusinessOwnerName,
                bo.BusinessName,
                bsc.Name AS BusinessCategoryName,
                ISNULL(ul.Address, '') AS Address,
                ISNULL(ul.City, '') AS City,
                ISNULL(ul.State, '') AS State,
                dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,
                ul.Latitude,
                ul.Longitude,
                bsc.MenuTag,
                dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) AS BusinessLogoWithPath,
                --COUNT(r.Id) AS TotalReviewsEntered,
                --ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
                --COALESCE(SUM(r.Rating), 0) AS TotalRating,
				cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
                bo.Verified,
				dbo.GetBusinessVerifiedTextValue(bo.Verified) as VerifiedTextValue,
                ISNULL(Icd.Description, '') AS Description,
                P.[Key],
                ISNULL(ul.UniqueUserId, '') AS UniqueUserId, 
				CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite,
                (
                    6371 *
                    ACOS(
                        COS(RADIANS(ul.Latitude)) *
                        COS(RADIANS(@latitudedesi)) *
                        COS(RADIANS(ul.Longitude) - RADIANS(@longitudedesi)) +
                        SIN(RADIANS(ul.Latitude)) *
                        SIN(RADIANS(@latitudedesi))
                    )
                ) AS DistanceInKilometers
            FROM BusinessOwners bo
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
            INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
            --LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId
            LEFT JOIN InstructorContentDescription_PPCMeta Icd ON bo.UserLoginId = Icd.UserLoginId
            INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
            INNER JOIN ProfilePageTypes p ON bsc.ProfilePageTypeId = p.Id
			Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
            WHERE 
			1 = dbo.IsBusinessDataAvailableForVisitor(bo.UserLoginId)
			and (bc.CategoryKey = 'b2b')
			and (@menuTag = 'all' or @menuTag = '' or bsc.MenuTag = @menuTag) -- TODO: if category not selected then filter with menu tag. otherwise ignore menu-tag.
			and (@categoryId = 0 or bsc.Id = @categoryId)
			and (@searchText = '' or BusinessName like '%'+ @searchText + '%')
			and (@location = '' or ul.City like '%' + @location + '%' or ul.FullAddressLocation like '%' + @location + '%' or ul.Address like '%' + @location + '%')
            --GROUP BY bo.Id, bo.UserLoginId, bo.FirstName + ' ' + bo.LastName, bsc.Name, bo.BusinessName, ul.City, ul.State, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), ul.Latitude, ul.Longitude, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo), ul.Address, bsc.MenuTag, bo.Verified, Icd.Description, p.[Key], ul.UniqueUserId,sf.FavouriteUserLoginId
			order by bo.Id desc
			OFFSET @pageSize * @page ROWS
			FETCH NEXT @pageSize ROWS ONLY
	END -- end mode=1
	-- GET Instructors list by Serarch Filter. - Web App
	ELSE IF(@mode = 2)
	BEGIN
		SELECT bo.Id,
		ISNuLL(ul.UniqueUserId, '') as UniqueUserId,
		bo.UserLoginId AS InstructorUserLoginId,
		bo.FirstName + ' ' + bo.LastName AS InstructorName,
		bsc.Name AS BusinessCategoryName,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,  
		--COUNT(*) AS TotalReviewsEntered, 
		--ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, 
		--COALESCE(SUM(r.Rating), 0) AS TotalRating, 
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
		--c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath,
		IsNull(bo.Experience,'') as Experience,
		bo.Privacy_UniqueUserId as Privacy_UniqueUserId, 
		bo.Verified as Verified,
		dbo.GetBusinessVerifiedTextValue(bo.Verified) as VerifiedTextValue,
		IsNull(Icd.Description,'') as InstructorContentDescription,   
		CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite,
		ul.IsCertified as InstructorIsCertified
		FROM BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id 
		Left Join InstructorContentDescription_PPCMeta Icd on bo.UserLoginId = Icd.UserLoginId
		--Left JOIN UserCertificates uc on bo.UserLoginId = uc.UserLoginId
		--Left JOIN Certificates c on uc.CertificateId = c.Id
		--LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId 
		Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId and sf.StudentLoginId = @userLoginId
		WHERE 
		1 = dbo.IsBusinessDataAvailableForVisitor(bo.UserLoginId)
		and bsc.CategoryKey = 'instructor'
		and(@menuTag = 'all' or @menuTag = '' or bsc.MenuTag = @menuTag)
		and (@categoryId = 0 or bsc.Id = @categoryId)
		and (@searchText = '' or FirstName + ' ' + LastName like '%'+ @searchText + '%')
		and (@location = '' or ul.City like '%' + @location + '%' or ul.FullAddressLocation like '%' + @location + '%' or ul.Address like '%' + @location + '%')
		--GROUP BY bo.Id, ul.UniqueUserId, bo.UserLoginId, bo.FirstName, bo.LastName, bsc.Name, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon),bo.Experience,bo.Privacy_UniqueUserId,bo.Verified,Icd.Description,sf.FavouriteUserLoginId, ul.IsCertified
		order by bo.Id desc
		OFFSET @pageSize * @page ROWS
		FETCH NEXT @pageSize ROWS ONLY
	END -- end mode=2
	-- GET Events list by Serarch Filter. - Web App
	ELSE IF(@mode = 3)
	BEGIN

		SELECT e.Id, e.Title, CONCAT(DATENAME(month, e.StartDate), ' ',  DATENAME(day, e.StartDate),'', DATENAME(year, e.StartDate)) AS StartDate, DATENAME(MONTH, e.StartDate) AS StartMonth, DATENAME(dw, e.StartDate) AS Weeks, YEAR(e.StartDate) AS StartYear,DATENAME(Day, e.StartDate) AS StartDay, e.EndDate,e.StartTime_24HF, e.EndTime_24HF, e.IsPaid,e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,  e.AdditionalInformation, e.AboutEvent, IsNull(e.TicketInformation,'') as TicketInformation, IsNull(e.Walkings,'') as Walkings, ISNULL(e.Address,'') AS Address, e.Country, e.State, e.City, e.PinCode, e.LandMark, bsc.MenuTag, @totalRecords, 
			(CASE WHEN e.EndDateTime < GETUTCDATE() THEN 1 ELSE 0 END) as IsExpired
		FROM Events e
		INNER JOIN BusinessOwners bo ON e.UserLoginId = bo.UserLoginId
		LEFT JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
		WHERE 
		1 = dbo.IsBusinessDataAvailableForVisitor(bo.UserLoginId)
		and e.IsDeleted = 0
		and (@menuTag = 'all' or @menuTag = '' or bsc.MenuTag = @menuTag)
		and (@categoryId = 0 or e.EventCategoryId = @categoryId)
		and (@searchText = '' or Title like '%'+ @searchText + '%')
		and (@priceType = '' or (@priceType = 'free' and e.Price = 0) or (@priceType = 'paid' and e.Price > 0))
		and (@startDate = '' or e.StartDate = cast(@startDate as date))
		and (@location = '' or e.City like '%' + @location + '%'or e.Address like '%' + @location + '%' or e.Pincode like '%' + @location + '%')
		order by e.Id desc
		OFFSET @pageSize * @page ROWS
		FETCH NEXT @pageSize ROWS ONLY

	END -- end mode=3
	-- GET Trainings list by Serarch Filter. - Web App
	ELSE IF(@mode = 4)
	BEGIN
		select t.Id,
		t.UserLoginId,
		DAY(t.StartDate) AS StartDay, 
		DATENAME(MONTH,t.StartDate) AS StartMonth, 
		DATENAME(dw, t.StartDate) AS Weeks, 
		YEAR(t.StartDate) AS StartYear, 
		t.InstructorUserLoginId, I.FirstName +' '+ I.LastName as InstructorName,
		dbo.GetBusinessProfileImageWithPath(I.ProfileImage) as ProfileImageWithPath,
		t.TrainingName, t.ShortDescription, t.InstructorEmail, t.InstructorMobileNumber, t.InstructorAlternateNumber, t.IsPaid, t.Price, t.AdditionalPriceInformation, t.CenterName, t.Location, t.Address, t.City, t.State, t.Country, t.PinCode, t.LocationUrl, t.StartDate, t.EndDate, t.StartTime_24HF, t.EndTime_24HF, t.Description, t.MusicType, t.EnergyLevel, t.DanceStyle, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath, bsc.MenuTag
		from trainings t
		inner join businessOwners bo on t.UserLoginId = bo.UserLoginId
		inner join BusinessOwners I  on t.InstructorUserLoginId = I.UserLoginId 
		--left join Staffs s on t.InstructorUserLoginId = s.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where 
		1 = dbo.IsBusinessDataAvailableForVisitor(bo.UserLoginId)
		and t.Status = 1 and t.IsDeleted = 0
		and (@menuTag = 'all' or @menuTag = '' or bsc.MenuTag = @menuTag)
		and (@categoryId = 0 or t.LicenseId = @categoryId)
		and (@searchText = '' or t.TrainingName like '%'+ @searchText + '%')
		and (@priceType = '' or (@priceType = 'free' and t.Price = 0) or (@priceType = 'paid' and t.Price > 0))
		and (@startDate = '' or t.StartDate = cast(@startDate as date))
		and (@location = '' or t.City like '%' + @location + '%'or t.Location like '%' + @location + '%'or t.Address like '%' + @location + '%' or t.Pincode like '%' + @location + '%')
		order by t.Id desc
		OFFSET @pageSize * @page ROWS
		FETCH NEXT @pageSize ROWS ONLY
	END -- end mode=4
	-- GET Classes list by Serarch Filter. - Web App
	ELSE IF(@mode=5)
	BEGIN
		SELECT c.Id, 
		ISNULL(c.Description, '') AS Description, 
		c.BusinessOwnerLoginId,
		ISNULL(c.Name, '') AS ClassName, 
		ISNULL(b.Name, '') AS BatchName,
		b.ClassDurationSeconds,
		ISNULL(c.OnlineClassLink, '') AS OnlineClassLink, 
		ISNULL(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy'), '') AS FormattedScheduledOnDateTime, 
		ISNULL(c.Address, '') AS Address,
		c.ClassDays,
		ISNULL(c.ClassDays_ShortForm, '') AS ClassDays_ShortForm, 
		ISNULL(c.ClassType, '') AS ClassType, 
		c.classMode, 
		ISNULL(c.ClassImage, '') AS ClassImage,
		dbo.GetClassImageWithPath(c.ClassImage) AS ClassImageWithPath,
		ISNULL(b.ScheduledStartOnTime_24HF, '') AS ScheduledStartOnTime_24HF,
		ISNULL(b.ScheduledEndOnTime_24HF, '') AS ScheduledEndOnTime_24HF,
		ISNULL(b.ScheduledOnDateTime, '') AS ScheduledOnDateTime,
		ISNULL(bo.BusinessName, '') AS BusinessName,
		I.UserLoginId as InstructorLoginId,
		I.FirstName + ' ' + I.LastName as InstructorName,
		ISNULL(I.ProfileImage, '') AS InstructorProfileImage,
		dbo.GetBusinessProfileImageWithPath(I.ProfileImage) AS InstructorProfileImageWithPath,
		ISNULL(DATEDIFF(DAY, b.ScheduledOnDateTime, GETDATE()), 0) AS DaysDifference,
		ISNULL(DATEDIFF(HOUR, b.ScheduledOnDateTime, GETDATE()) % 24, 0) AS HoursDifference,
		ISNULL(DATEDIFF(MINUTE, b.ScheduledOnDateTime, GETDATE()) % 60, 0) AS MinutesDifference,
		ISNULL(bsc.Name, '') AS BusinessSubCategoryName, 
		ISNULL(DAY(b.ScheduledOnDateTime), 0) AS ScheduledDay, 
		ISNULL(Format(b.ScheduledOnDateTime, 'MMMM'), '') AS ScheduledMonth,
		bo.FirstName + '' + bo.LastName AS BusinessOwnerName,
		--ISNULL(COUNT(*), 0) AS TotalReviewsEntered,
		--ISNULL(MAX(r.Rating), 0) AS Rating, 
		--ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
		--ISNULL(SUM(r.Rating), 0) AS TotalRating, 
		ISNULL(bsc.MenuTag, '') AS MenuTag, 
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = I.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as InstructorAverageRating,
		IUL.IsCertified as InstructorIsCertified,
		ISNULL(cct.Name, '') as ClassCategoryTypeName,
		@totalRecords
		FROM Classes c
		INNER JOIN ClassBatches cb ON cb.ClassId = c.Id
		INNER JOIN ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id
		INNER JOIN Batches b ON cb.BatchId = b.Id
		INNER JOIN BusinessOwners I on b.InstructorLoginId = I.UserLoginId
		INNER JOIN UserLogins IUL on I.UserLoginId = IUL.Id
		INNER JOIN UserLogins ul on b.BusinessOwnerLoginId = ul.Id
		INNER JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id
		where 
		1 = dbo.IsBusinessDataAvailableForVisitor(bo.UserLoginId)
		and c.IsDeleted = 0 
		and b.Status = 1 
		and b.IsDeleted = 0 
		and (@menuTag = 'all' or @menuTag = '' or bsc.MenuTag = @menuTag)
		and (@categoryId = 0 or cct.Id = @categoryId)
		and (@searchText = '' or c.Name like '%'+ @searchText + '%' or b.Name like '%'+ @searchText + '%')
		and (@priceType = '' or (@priceType = 'free' and c.Price = 0) or (@priceType = 'paid' and c.Price > 0))
		and (@itemMode = '' or (@itemMode = 'online' and c.ClassMode = 'Online') or (@itemMode = 'offline' and c.ClassMode = 'Offline'))
		and (@location = '' or c.City like '%' + @location + '%' or c.Address like '%' + @location + '%' or c.Pincode like '%' + @location + '%')
		and (@days = '' or c.ClassDays like '%' + @days +'%')
		Order by c.Id desc
		OFFSET @pageSize * @page ROWS
		FETCH NEXT @pageSize ROWS ONLY
	END -- end mode=5
END
GO
/****** Object:  StoredProcedure [dbo].[sp_GetRelatedBusinesses]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetRelatedBusinesses] 
(
	@businessOwnerLoginId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @businessSubCategoryId bigint, @businessCategoryId bigint
	-- Get Related Businesses by the given business-Owner-Login-Id (using its Category and SubCategory)
	if(@mode=1)
	begin
		select @businessCategoryId = bo.BusinessCategoryId, @businessSubCategoryId = bo.BusinessSubCategoryId from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId
		
		select TOP (@recordLimit) bo.Id, bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName +' '+ bo.LastName  as OwnerFullName, bo.BusinessName as BusinessName, bo.SpecialDiscount, bo.SpecialPrice, bo.SpecialDuration,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
		ppt.Id as ProfilePageTypeId, ppt.[Key] as ProfilePageTypeKey, ppt.Name as ProfilePageTypeName, bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName
		FROM BusinessOwners bo
		INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId  = bc.Id 
		INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId  = bsc.Id 
		INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
		INNER JOIN ProfilePageTypes ppt on bsc.ProfilePageTypeId = ppt.Id
		where bo.BusinessCategoryId = @businessCategoryId 
		and bo.BusinessSubCategoryId = @businessSubCategoryId
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetStudentListById]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetStudentListById]
(
	@id bigint,
	@studentList nvarchar(max),
	@userLoginId bigint,
	@mode int
)
as 
begin 
	-- Get Students List By their UserLoginId List passed.
	if(@mode=1)
	begin 
     		select s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath,s.FirstName,S.LastName  from Students s inner join UserLogins ul on s.UserLoginId = ul.Id where s.UserLoginId In (select splitdata AS StudentUserLoginId FROM dbo.fnSplitString(@studentList, ','))
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetTrainingRecord]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_GetTrainingRecord]
(
	@id bigint,
	@city nvarchar (max),
	@latitude decimal(18,2),
	@longitude decimal(18,2),
	@lastRecordId bigint,
	@recordLimit int,
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

	-- Get All Training Record By City 
	if(@mode=1)
	begin
		if(@lastRecordId <= 0) 
		begin 
			select @lastRecordId = Max(t.Id) + 1 from Trainings t
		end

		select TOP (@recordLimit) t.Id, t.TrainingName,t.ShortDescription,t.CenterName,t.Address,t.StartDate,t.EndDate,
		t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath
		from Trainings t
		where t.City = @city and t.Id < @lastRecordId
		order by t.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_GetUpcomingEvents]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_GetUpcomingEvents]
(
	@id bigint,
	@eventUserLoginId bigint,
	@currentDateTime nvarchar(max),
	@recordLimit int,
	@lastRecordId bigint,
	@mode int
)
as
begin
	-- Get Upcoming events-list for Business-Profile-Page
	if(@mode=1)
	begin
		select Top (@recordLimit) e.Id, e.Title,e.UserLoginId,e.StartDate, DAY( e.StartDate) AS StartDay, DATENAME(MONTH, e.StartDate) AS StartMonth, e.EndDate, e.StartTime_24HF, e.EndTime_24HF, e.IsPaid, e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.AdditionalInformation, e.AboutEvent, e.TicketInformation, e.Walkings,bo.FirstName +''+ bo.LastName as BusinessName ,e.Address,  DATENAME(Year, e.StartDate) AS StartYear
		from Events e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId
		where e.IsDeleted = 0 
		and e.UserLoginId = @eventUserLoginId 
		and e.StartDateTime >= cast(@currentDateTime as datetime)
		ORDER BY e.StartDateTime ASC;
	end
	-----Get Upcoming events
else if(@mode=2)
	begin
	declare @totalRecords bigint = 0;
		-- set default record limit
	if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords = Count(e.Id) from Events e where UserLoginId = @eventUserLoginId and e.IsDeleted = 0

		if(@lastRecordId <= 0) 
		begin
			select Top (@recordLimit) e.Id, e.Title, e.StartDate, DAY( e.StartDate) AS StartDay, DATENAME(MONTH, e.StartDate) AS StartMonth, e.EndDate, e.StartTime_24HF, e.EndTime_24HF, e.IsPaid, e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.AdditionalInformation, e.AboutEvent, e.TicketInformation, e.Walkings,bo.FirstName +''+ bo.LastName as BusinessName  
		from Events e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId
		where e.IsDeleted = 0 
		and e.UserLoginId = @eventUserLoginId 
		and e.StartDateTime >= cast(@currentDateTime as datetime)
		ORDER BY e.StartDateTime ASC;
		end

		else 
		begin
			select Top (@recordLimit) e.Id, e.Title, e.StartDate, DAY( e.StartDate) AS StartDay, DATENAME(MONTH, e.StartDate) AS StartMonth, e.EndDate, e.StartTime_24HF, e.EndTime_24HF, e.IsPaid, e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.AdditionalInformation, e.AboutEvent, e.TicketInformation, e.Walkings,bo.FirstName +''+ bo.LastName as BusinessName  
		from Events e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId
		where e.IsDeleted = 0  and e.Id > @lastRecordId
		and e.UserLoginId = @eventUserLoginId 
		and e.StartDateTime >= cast(@currentDateTime as datetime)
		ORDER BY e.StartDateTime ASC;
		end

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertMasterProResume_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertMasterProResume_PPCMeta]
   @Id BIGINT,
   @UserLoginId BIGINT,
    @Age NVARCHAR(MAX),
    @Nationality NVARCHAR(MAX),
    @Freelance NVARCHAR(MAX),
    @Skype NVARCHAR(MAX),
    @Languages NVARCHAR(MAX),
	@mode int
AS
BEGIN
	if(@mode=1)
	BEGIN
		INSERT INTO MasterProResume_PPCMeta (UserLoginId, Age, Nationality, Freelance, Skype, Languages)
		VALUES (@UserLoginId, @Age, @Nationality, @Freelance, @Skype, @Languages)
	END

	else if(@mode=2)
	BEGIN
		SELECT * FROM MasterProResume_PPCMeta WHERE Id = @Id
	END
	else if(@mode=3)
	BEGIN
		UPDATE MasterProResume_PPCMeta
		SET UserLoginId = @UserLoginId,
			Age = @Age,
			Nationality = @Nationality,
			Freelance = @Freelance,
			Skype = @Skype,
			Languages = @Languages
		WHERE Id = @Id
	END
	else if(@mode=4)
	BEGIN
		DELETE FROM MasterProResume_PPCMeta WHERE Id = @Id
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdate_ResetPasswordDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdate_ResetPasswordDetail]
(
	@id bigint,
	@resetPasswordToken nvarchar(max),
	@mode int
)
as
begin
	---- To Update UserLogins To resetPasswordToken
    if(@mode=1)
	 begin
	     if exists(select  1  from UserLogins ul where ul.Id = @id)
		 begin
		     Update UserLogins set ResetPasswordToken = @resetPasswordToken where Id = @id
			 SELECT 1 AS ret,
                   'ResetPasswordToken has been successfully updated' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'UserResetPasswordTokenCreated_SuccessMessage' AS resourceKey;
			 
		end
	end
	--- To Get all UserLogin Detail 
	else if(@mode=2)
	begin
		select * from UserLogins ul where ul.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateAdvertisement]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateAdvertisement]
(
	@id bigint,
	@advertisementLink nvarchar(max),
	@image  nvarchar(max),
	@advertisementCategory  nvarchar(max),
	@imageOrientationType nvarchar(max),
	@isActive int,
	@submittedByLoginId bigint,
	@mode int,
	@createdForLoginId bigint
)
as 
begin
	-- Insert Advertisement By Id
	if(@mode=1)
	begin
		insert into Advertisements(Image,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,AdvertisementCategory,Status,ImageOrientationType,CreatedForLoginId,AdvertisementLink)
		values(@image, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, Cast('1/1/2000' as datetime), @advertisementCategory, @isActive, @imageOrientationType,@createdForLoginId,@advertisementLink)

		select 1 as ret, 'Advetisement Image inserted successfully' as responseMessage,  'BusinessPanel' as resourceFileName, 'AdvetisementImageinserted_SuccessMessage' as resourceKey
	end
	-- Update Advertisement By Id
	else if(@mode=2)
	begin
		 Update Advertisements  set Image = @image, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId, AdvertisementCategory = @advertisementCategory, Status = @isActive, ImageOrientationType = @imageOrientationType, AdvertisementLink = @advertisementLink where Id = @id 

		select 1 as ret, 'Advetisement  updated successfully' as responseMessage, 'BusinessPanel' as resourceFileName, 'Advetisementupdated_SuccessMessage' as resourceKey
	end
	-- Soft-Delete Advertisement By Id
	else if(@mode=3)
	begin
		   Update Advertisements  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'Advertisements deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Advetisementdeleted_SuccessMessage' as resourceKey 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateApartment]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateApartment]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@name nvarchar(max),
	@blocks nvarchar(max),
	@areas nvarchar(max),
	@status int,
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	-- Insert Apartment 
	if(@mode=1)
	begin
		if exists (select * from Apartments a where a.Name = @name and a.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			insert into Apartments(BusinessOwnerLoginId,Name,Blocks,Areas,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) values(@businessOwnerLoginId,@name,@blocks,@areas,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,cast('01/01/2000' as datetime))

			set @id = SCOPE_IDENTITY();
			select 1 as ret, 'Apartment created successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentCreated_SuccessMessage' as resourceKey
		end
	end
	-- Update Apartment 
	if(@mode=2)
	begin
		if exists (select * from Apartments a where a.Name = @name and a.IsDeleted = 0 and a.Id != @id)
		begin
			select -1 as ret, 'Apartment name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			update Apartments set Name = @name, Blocks = @blocks, Areas = @areas, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Apartment updated successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentUpdated_SuccessMessage' as resourceKey
		end
	end
	-- Delete Apartment
	else if(@mode=3)
	begin
		if not exists (select Id from Apartments a where a.Id = @id and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Apartments set IsDeleted = 1 where Id = @id

			select 1 as ret, 'Apartment deleted successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentDeleted_SuccessMessage' as resourceKey
		end
	end
	-- Change Apartment Status
	else if(@mode=4)
	begin
		if not exists (select Id from Apartments a where a.Id = @id and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Apartments set Status = (case when Status = 1 then 0 else 1 end) where Id = @id

			select 1 as ret, 'Apartment status changed successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentStatusChanged_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateApartmentArea]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateApartmentArea]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@apartmentId bigint,
	@name nvarchar(max),
	@isActive int,
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	-- Insert Apartment Area
	if(@mode=1)
	begin
		if not exists (select * from Apartments a where a.Id = @apartmentId and a.IsDeleted = 0 and a.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select Id from ApartmentAreas ar where ar.IsDeleted = 0 and ar.Name = @name and ar.ApartmentId = @apartmentId)
		begin
			select -1 as ret, 'Apartment Area name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			insert into ApartmentAreas(ApartmentId,Name,IsActive,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) values(@apartmentId,@name,@isActive,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,cast('01/01/2000' as datetime))

			set @id = SCOPE_IDENTITY();
			select 1 as ret, 'Apartment Area created successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaCreated_SuccessMessage' as resourceKey
		end
	end
	-- Update Apartment Area
	if(@mode=2)
	begin
		if not exists (select * from Apartments a where a.Id = @apartmentId and a.IsDeleted = 0 and a.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		if not exists (select Id from ApartmentAreas ar where ar.Id = @id and ar.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Area Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select Id from ApartmentAreas ar where ar.IsDeleted = 0 and ar.Name = @name and ar.ApartmentId = @apartmentId and ar.Id != @id)
		begin
			select -1 as ret, 'Apartment Area name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			update ApartmentAreas set Name = @name, IsActive= @isActive, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Apartment Area updated successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaUpdated_SuccessMessage' as resourceKey
		end
	end
	-- Delete Apartment Area
	else if(@mode=3)
	begin
		set @apartmentId = (select ar.ApartmentId from ApartmentAreas ar where ar.Id = @id)

		if not exists (select Id from Apartments a where a.Id = @apartmentId and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		if not exists (select Id from ApartmentAreas ar where ar.Id = @id and ar.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Area Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update ApartmentAreas set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

			select 1 as ret, 'Apartment Area deleted successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaDeleted_SuccessMessage' as resourceKey
		end
	end
	-- Change Apartment Area Status
	else if(@mode=4)
	begin
		set @apartmentId = (select ar.ApartmentId from ApartmentAreas ar where ar.Id = @id)

		if not exists (select Id from Apartments a where a.Id = @apartmentId and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		if not exists (select Id from ApartmentAreas ar where ar.Id = @id and ar.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Area Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update ApartmentAreas set IsActive = (case when IsActive = 1 then 0 else 1 end) where Id = @id

			select 1 as ret, 'Apartment Area status changed successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentAreaStatusChanged_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateApartmentBlock]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateApartmentBlock]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@apartmentId bigint,
	@name nvarchar(max),
	@isActive int,
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	-- Insert Apartment Block
	if(@mode=1)
	begin
		if not exists (select * from Apartments a where a.Id = @apartmentId and a.IsDeleted = 0 and a.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select Id from ApartmentBlocks ab where ab.IsDeleted = 0 and ab.Name = @name and ab.ApartmentId = @apartmentId)
		begin
			select -1 as ret, 'Apartment Block name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			insert into ApartmentBlocks(ApartmentId,Name,IsActive,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) values(@apartmentId,@name,@isActive,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,cast('01/01/2000' as datetime))

			set @id = SCOPE_IDENTITY();
			select 1 as ret, 'Apartment Block created successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockCreated_SuccessMessage' as resourceKey
		end
	end
	-- Update Apartment Block
	if(@mode=2)
	begin
		if not exists (select * from Apartments a where a.Id = @apartmentId and a.IsDeleted = 0 and a.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else if not exists (select * from ApartmentBlocks ab where ab.Id = @id and ab.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Block Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select Id from ApartmentBlocks ab where ab.IsDeleted = 0 and ab.Name = @name and ab.ApartmentId = @apartmentId and ab.Id != @id)
		begin
			select -1 as ret, 'Apartment Block name already exists!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			update ApartmentBlocks set Name = @name, IsActive= @isActive, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Apartment Block updated successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockUpdated_SuccessMessage' as resourceKey
		end
	end
	-- Delete Apartment Block
	else if(@mode=3)
	begin
		set @apartmentId = (select ab.ApartmentId from ApartmentBlocks ab where ab.Id = @id)

		if not exists (select a.Id from Apartments a where a.Id = @apartmentId and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else if not exists (select Id from ApartmentBlocks ab where ab.Id = @id and ab.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Block Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update ApartmentBlocks set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

			select 1 as ret, 'Apartment Block deleted successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockDeleted_SuccessMessage' as resourceKey
		end
	end
	-- Change Apartment Block Status
	else if(@mode=4)
	begin
		set @apartmentId = (select ab.ApartmentId from ApartmentBlocks ab where ab.Id = @id)

		if not exists (select Id from Apartments a where a.Id = @apartmentId and a.BusinessOwnerLoginId = @businessOwnerLoginId and a.IsDeleted = 0)
		begin 
			select -1 as ret, 'Apartment Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentNotFound_ErrorMessage' as resourceKey
		end
		else if not exists (select Id from ApartmentBlocks ab where ab.Id = @id and ab.IsDeleted = 0)
		begin
			select -1 as ret, 'Apartment Block Not Found!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update ApartmentBlocks set IsActive = (case when IsActive = 1 then 0 else 1 end) where Id = @id

			select 1 as ret, 'Apartment Block status changed successfully!' as responseMessage, @id as Id,'BusinessPanel' as resourceFileName, 'ApartmentBlockStatusChanged_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateApartmentBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateApartmentBooking]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@masterId nvarchar(max),
	@batchId bigint,
	@apartmentId bigint,
	@apartmentBlockId bigint,
	@flatOrVillaNumber nvarchar(max),
	@phase nvarchar(max),
	@lane nvarchar(max),
	@occupantType nvarchar(max),
	@apartmentAreaId bigint,
	@activity nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	-- Insert Apartment-Booking
	if(@mode=1)
	begin
		insert into ApartmentBookings(BusinessOwnerLoginId,UserLoginId,MasterId,BatchId,ApartmentId,ApartmentBlockId,FlatOrVillaNumber,Phase,Lane,OccupantType,ApartmentAreaId,Activity,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		values(@businessOwnerLoginId,@userLoginId,@masterId,@batchId,@apartmentId,@apartmentBlockId,@flatOrVillaNumber,@phase,@lane,@occupantType,@apartmentAreaId,@activity,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,cast('01/01/2000' as datetime))

		set @id = SCOPE_IDENTITY()

		select 1 as ret, 'Appartment Booked successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'ApartmentBooked_SuccessMessage' as resourceKey, @id as Id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBatch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBatch]
(
	@id bigint,
	@userLoginId bigint,
	@name nvarchar(max),
	@startTime24HF nvarchar(max),
	@endTime24HF nvarchar(max),
	@studentMaxStrength int,
	@instructorLoginId bigint,
	@groupId bigint,
	@classDuration int,
	@submittedByLoginId bigint,
	@mode int,
	@status int
)
as 
begin 
	--Insert Class 
	if(@mode=1)
	begin
		if exists (select b.Id from [Batches] b where b.BusinessOwnerLoginId = @userLoginId and b.Name = @name and b.IsDeleted = 0)
		begin
			select -1 as ret, 'Batch of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'BatchNameAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			insert into [Batches] ([Name],ScheduledStartOnTime_24HF,ScheduledEndOnTime_24HF,StudentMaxStrength,BusinessOwnerLoginId,InstructorLoginId,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn,ClassDurationSeconds,GroupId,Status,ScheduledOnDateTime)
			values(@name,@startTime24HF,@endTime24HF,@studentMaxStrength,@userLoginId,@instructorLoginId,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,GETUTCDATE(),@classDuration,@groupId,@status,GETUTCDATE())
			
			select 1 as ret, 'Batch successfully created' as responseMessage,'BusinessPanel' as resourceFileName, 'BatchCreated_SuccessMessage' as resourceKey
		end
	end
	--Update Batch Data by ID
	else if(@mode =2)
	begin
		if exists (select b.Id from [Batches] b where b.BusinessOwnerLoginId = @userLoginId and b.Name = @name and b.Id != @id and b.IsDeleted = 0)
		begin
			select -1 as ret, 'Batch of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'BatchNameAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			update [Batches] set Name = @name, ScheduledStartOnTime_24HF = @startTime24HF, ScheduledEndOnTime_24HF = @endTime24HF, StudentMaxStrength = @studentMaxStrength, InstructorLoginId = @instructorLoginId, UpdatedByLoginId = @submittedByLoginId, UpdatedOn= GETUTCDATE(), ClassDurationSeconds = @classDuration, GroupId = @groupId, Status = @status where Id = @id and BusinessOwnerLoginId = @userLoginId
			
			select 1 as ret, 'Batch updated successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'BatchUpdated_SuccessMessage' as resourceKey 
		end
	end
	--Delete Batch by Id
	else if(@mode=3)
	begin
		if not exists(select b.Id from [Batches] b where b.Id = @id and b.BusinessOwnerLoginId = @userLoginId)
		begin
			select -1 as ret, 'Batch not exists!' as responseMessage,'BusinessPanel' as resourceFileName,'BatchNotExists_ErrorMessage' as resourceKey
		end
		else
		begin
			update [Batches] set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and BusinessOwnerLoginId = @userLoginId
			select 1 as ret, 'Batch has been deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BatchDeleted_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessAboutDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_InsertUpdateBusinessAboutDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @subTitle nvarchar(max),
    @description nvarchar(max),
    @aboutImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentAbouts WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentAbouts
            SET Title = @title,
                SubTitle = @subTitle,
                Description = @description,
                AboutImage = @aboutImage,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentAbout Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAboutUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentAbouts (UserLoginId, ProfilePageTypeId, Title, SubTitle, Description, AboutImage, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId, @profilePageTypeId, @title, @subTitle, @description, @aboutImage, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content About successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAboutCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessAboutServiceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessAboutServiceDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@aboutServicetitle nvarchar(max),
@aboutServiceDescription nvarchar(max),
@aboutServiceIcon nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
    if(@mode=1)
    begin
     INSERT INTO BusinessContentAboutServiceDetails (UserLoginId, AboutServiceTitle, AboutServiceDescription, AboutServiceIcon, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn,ProfilePageTypeId)
            VALUES (@userLoginId, @aboutServicetitle, @aboutServiceDescription, @aboutServiceIcon, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME),@profilePageTypeId);

            SELECT 1 AS ret,
                   'Business Content About Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAboutServiceCreated_SuccessMessage' AS resourceKey;
     end
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentAboutServiceDetails  SET AboutServiceTitle = @aboutServicetitle,AboutServiceDescription = @aboutServiceDescription, AboutServiceIcon = @aboutServiceIcon,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentAboutService Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAboutServiceUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content About Service Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentAboutServiceDetails  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentAboutService deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentAboutServicedeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessBranch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessBranch]
(
@id bigint,
@businessOwnerLoginId  bigint,
@branchbusinessLoginId bigint,
@name nvarchar(max),
@status int,
@submittedByLoginId bigint,
@mode int 
) 
as
begin 
--Insert data of UserLogin/BusinessOwner
    if(@mode=1)
	 begin
	    Insert into Branches (BusinessOwnerLoginId,BranchBusinessLoginId,Name,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)values(@businessOwnerLoginId,@branchbusinessLoginId,@name,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))
		select 1 as ret, 'Business Branches  Created successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessBranchesCreated_SuccessMessage' as resourceKey
	 end
	 --- To change the branch status 
	 else if(@mode=2)
	 begin
		if not exists(select b.Id from Branches b  where b.Id = @id)
		begin
			select -1 as ret, 'Branch not exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'Branch_NotExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			update Branches set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

			select 1 as ret, 'Branch status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Branch_StatusUpdated_SuccessMessage' as resourceKey
		end
	end
	else if(@mode=3)
	begin
		Update Branches set Name =  @name,Status = @status,UpdatedOn = GETUTCDATE(),UpdatedByLoginId= @submittedByLoginId where BranchBusinessLoginId =@branchbusinessLoginId and BusinessOwnerLoginId = @businessOwnerLoginId
		select 1 as ret, 'Branch detail  Update successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'Branches_Update_SuccessMessage' as resourceKey 
	end
	IF (@mode = 4)
	BEGIN
		BEGIN TRY
			IF NOT EXISTS (SELECT 1 FROM BusinessOwners WHERE UserLoginId = @branchbusinessLoginId)
			BEGIN
				-- Business Owner does not exist
				SELECT -1 as ret, 'Sorry, Business Owner not exists!' as responseMessage,
					'BusinessPanel' as resourceFileName, 'BusinessOwnerNotExist_ErrorMessage' as resourceKey;
			END
			ELSE
			BEGIN
				BEGIN TRANSACTION;

				-- Soft delete the record from Branches and UserLogins
				UPDATE Branches SET IsDeleted = 1, DeletedOn = GETUTCDATE() WHERE BranchBusinessLoginId = @branchbusinessLoginId;
				UPDATE UserLogins SET IsDeleted = 1, DeletedOn = GETUTCDATE(), DeletedByLoginId = @submittedByLoginId WHERE Id = @branchbusinessLoginId;

				COMMIT;

				-- Success message
				SELECT 1 as ret, 'Branch detail deleted successfully!' as responseMessage,
					'BusinessPanel' as resourceFileName, 'Branches_Deleted_SuccessMessage' as resourceKey;
			END
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK;

			-- Error message
			SELECT -1 as ret, 'Business error!' as responseMessage,
				'BusinessPanel' as resourceFileName, 'Business_ErrorMessage' as resourceKey;
		END CATCH
	END	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessCategory]
(
	@id	bigint,
	@parentBusinessCategoryId bigint,
	@name nvarchar(max),
	@categoryImage nvarchar(max),
	@isActive int,
	@submittedByLoginId bigint,
	@mode int,
	@categoryKey nvarchar(max),
	@menuTag nvarchar(max),
	@profilePageTypeId bigint
)
as
begin
	-- Insert Business Category
	if(@mode=1)
	begin
		if exists(select Id from BusinessCategories bc where bc.Name = @name and bc.IsDeleted = 0)
		begin
			select -1 as ret, 'Business Category of same name already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'BusinessCategoryAlreadyExit_ErrorMessage' as resourceKey
			--return
		end
		else 
		begin
			insert into BusinessCategories(Name,ParentBusinessCategoryId,CategoryImage,IsActive,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,CategoryKey,MenuTag,ProfilePageTypeId)
			values(@name,@parentBusinessCategoryId,@categoryImage,@isActive,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('01/01/2000' as datetime),@categoryKey,@menuTag,@profilePageTypeId)

			select 1 as ret, 'Business Category added successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessCategoryAdded_SuccessMessage' as resourceKey
		end
	end
	-- Update Business Category
	else if(@mode=2)
	begin

		if exists(select Id from BusinessCategories bc where bc.Name = @name and bc.IsDeleted = 0 and bc.Id != @id)
		begin
			select -1 as ret, 'Business Category of same name already exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessCategoryAlreadyExist_ErrorMessage' as resourceKey
		end
		else if (@parentBusinessCategoryId = @id)
		begin
			select -1 as ret, 'Invalid Parent Category!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'InvalidParentCategory_ErrorMessage' as resourceKey
		end
		else 
		begin
			update BusinessCategories set Name = @name, ParentBusinessCategoryId = @parentBusinessCategoryId, IsActive = @isActive, CategoryImage = @categoryImage, UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE(), CategoryKey = @categoryKey, MenuTag = @menuTag, ProfilePageTypeId = @profilePageTypeId where Id = @id
		
			select 1 as ret, 'Business Category updated successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'BusinessCategoryUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessClassicDanceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessClassicDanceDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @subTitle nvarchar(max),
    @techniqueImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM ClassicDanceTechniques WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE ClassicDanceTechniques
            SET Title = @title,
                SubTitle = @subTitle,
                TechniqueImage = @techniqueImage,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Classic Dance Technique Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentClassicDanceTechniqueUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO ClassicDanceTechniques (UserLoginId, ProfilePageTypeId, Title, SubTitle, TechniqueImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @subTitle, @techniqueImage, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content ClassicDanceTechnique successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentClassicDanceTechniqueCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessContentAccessCourseDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Sp_InsertUpdateBusinessContentAccessCourseDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @subTitle nvarchar(max),
    @description nvarchar(max),
    @courseImage nvarchar(max),
	@accessCourse nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentAccessCourseDetails WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentAccessCourseDetails
            SET Title = @title,
                SubTitle = @subTitle,
                Description = @description,
                CourseImage = @courseImage,
				AccessCourse = @accessCourse,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentAccessCourseDetail Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAccessCourseDetailUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentAccessCourseDetails (UserLoginId, ProfilePageTypeId, Title, SubTitle, Description, CourseImage, AccessCourse, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @ProfilePageTypeId, @title, @subTitle, @description, @courseImage, @accessCourse, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Access Course Detail successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAccessCourseDetailCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentAudio_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentAudio_PPCMeta]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
	@portfolioImage nvarchar(max),
    @audioImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentPortfolio_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentPortfolio_PPCMeta
            SET Title = @title,   Description = @description,AudioImage = @audioImage,PortfolioImage = @portfolioImage,    UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentAudio Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAudioUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentPortfolio_PPCMeta (UserLoginId, ProfilePageTypeId, Title,  Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId,PortfolioImage,AudioImage)
            VALUES (@userLoginId, @ProfilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId,@portfolioImage,@audioImage);

            SELECT 1 AS ret,
                   'Business Content Audio successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAudioCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentAudioDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentAudioDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@artistName nvarchar(max),
@audioFile nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
-------------------------To Insert Audio Detail
    if(@mode=1)
    begin
     INSERT INTO BusinessContentPortfolios (UserLoginId,ProfilePageTypeId,Title,ArtistName, AudioFile, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId, @title, @artistName, @audioFile, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Audio successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAudioCreated_SuccessMessage' AS resourceKey;
     end
	 ------To Update Audio Detail By Id 
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentPortfolios  SET Title = @title,ArtistName = @artistName,AudioFile = @audioFile,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentAudio Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAudioUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Audio Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentPortfolios  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentAudio deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentAudiodeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessContentBanner]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE procedure [dbo].[Sp_InsertUpdateBusinessContentBanner]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@subTitle nvarchar(max),
@description nvarchar(max),
@buttonText nvarchar(max),
@buttonLink nvarchar(max),
@bannerImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
if(@mode=1)
  
  BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentBanners WHERE UserLoginId = @userLoginId)
        BEGIN
            Update BusinessContentBanners set Title = @title,SubTitle = @subTitle,Description = @description,ButtonText = @buttonText,ButtonLink = @buttonLink, BannerImage = @bannerImage , UpdatedOn = GETUTCDATE() where UserLoginId = @userLoginId		
  select 1 as ret, 'BusinessContentBanner Update successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentBannerUpdate_SuccessMessage' as resourceKey;
        END
        ELSE
        BEGIN
           insert into BusinessContentBanners (UserLoginId,ProfilePageTypeId,Title,SubTitle,Description,ButtonText,ButtonLink,BannerImage,IsButtonActive,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
	values(@userLoginId,@profilePageTypeId,@title,@subTitle,@description,@buttonText,@buttonLink,@bannerImage,1,0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

	select 1 as ret, 'Business Content Banner successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinesscontentBannerCreated_SuccessMessage' as resourceKey
        END;
    END
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentCategories_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[sp_InsertUpdateBusinessContentCategories_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@profilePageTypeId bigint,
@courseCategoryId bigint,
@submittedByLoginId int,
@mode int
)
as
begin

------------------To insert Course CategoryId Detail------------
    if(@mode=1)

    begin
     INSERT INTO BusinessContentCategoryCource_PPCMeta (BusinessOwnerLoginId,ProfilePageTypeId, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn,CourseCategoryId)
            VALUES (@businessOwnerLoginId,@profilePageTypeId, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME),@courseCategoryId);

			
            SELECT 1 AS ret,
                   'Business Content Cource Category detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentCourceCategoryCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Delete Course Category Detail By Id
	 else if(@mode=2)
	 
	begin
	delete from BusinessContentCategoryCource_PPCMeta where  BusinessOwnerLoginId = @businessOwnerLoginId;
		   select 1 as ret, 'BusinessContent Cource Category deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentCourceCategorydeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentCategoriesDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentCategoriesDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentCategories WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentCategories
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentCategories Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentCategoriesUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentCategories (UserLoginId, Title, Description,  CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId,ProfilePageTypeId)
            VALUES (@userLoginId,  @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId,@ProfilePageTypeId);

            SELECT 1 AS ret,
                   'Business Content About successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAboutCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentClassicDance_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessContentClassicDance_PPCMeta]
(
@id bigint,
@userLoginId  bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@description nvarchar(max),
@techniqueItemList nvarchar(max),
@submittedByLoginId bigint,
@mode int 
) 
as
begin 
--Insert classic dance detail by businessOwnerLoginId
    if(@mode=1)
	 begin
	    Insert into BusinessContentClassicDanceTechnique_PPCMeta (UserLoginId,ProfilePageTypeId,Description,TechniqueItemList,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,Title)values(@userLoginId,@profilePageTypeId,@description,@techniqueItemList,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@title)
		select 1 as ret, 'Business Classic Dance Detail   Created successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessClassicDanceDetailCreated_SuccessMessage' as resourceKey
	 end
--- To Update Business Content Classic Dance Detail  By Id     
	else if(@mode=2)
	       begin
		        Update BusinessContentClassicDanceTechnique_PPCMeta set  Title = @title,Description =  @description,TechniqueItemList = @techniqueItemList,UpdatedOn = GETUTCDATE(),UpdatedByLoginId= @submittedByLoginId where Id = @id
				select 1 as ret, 'Business Content Classic Dance detail  Update successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessContentClassicDance_Update_SuccessMessage' as resourceKey 
	        end
------- To Delete Classic Dance Detail by Id 
	else if(@mode=3)
		 begin
        	update BusinessContentClassicDanceTechnique_PPCMeta set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id
				select 1 as ret, 'BusinessContentClassicDance detail  Deleted successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessClassicDanceDetail_Deleted_SuccessMessage' as resourceKey 
    	        COMMIT
	    end  	
end

GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentClassicVideoDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[sp_InsertUpdateBusinessContentClassicVideoDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @subTitle nvarchar(max),
    @note nvarchar(max),
	@videoLink nvarchar(max),
    @videoImage nvarchar(max),
	@buttonText nvarchar(max),
	@buttonLink nvarchar(max),
	@buttonText1 nvarchar(max),
	@buttonLink1 nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentClassicDanceVideoSection_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentClassicDanceVideoSection_PPCMeta
            SET Title = @title,
                SubTitle = @subTitle,
                Note = @note,
              VideoImage = @videoImage,
			  VideoLink = @videoLink,
			  ButtonText = @buttonText,
			  ButtonLink = @buttonLink,
			  ButtonLink1 = @buttonLink1,
			  ButtonText1 = @buttonText1,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentClassicDanceVideo Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentClassicDanceVideoUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentClassicDanceVideoSection_PPCMeta (UserLoginId, ProfilePageTypeId, Title, SubTitle, Note, VideoImage, VideoLink,ButtonLink,ButtonText,ButtonLink1,ButtonText1, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @subTitle, @note, @videoImage,@videoLink,@buttonLink,@buttonText,@buttonLink1,@buttonText1, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Classic Dance Video successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentClassicDanceVideoCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentClassPPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentClassPPCMeta]
(
    @id bigint,
    @userLoginId bigint,
	@profilePageTypeId bigint,
	@title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentClass_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentClass_PPCMeta
            SET 
               Description = @description, Title = @title,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentPlan Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentPlanUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentClass_PPCMeta (UserLoginId, ProfilePageTypeId,Description,Title,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @description,@title,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Plan successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentPlanCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentClientDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentClientDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@name nvarchar(max),
@description nvarchar(max),
@clientImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------------------To insert Client Detail------------
    if(@mode=1)
    begin
     INSERT INTO BusinessContentClient_PPCMeta (UserLoginId, ProfilePageTypeId,Name, Description, ClientImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId, @name, @description, @clientImage, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content client Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentClientCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Update Client Detail By Id
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentClient_PPCMeta  SET Name = @name,Description = @description, ClientImage = @clientImage,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentClient Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentClientUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Client  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentClient_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentClient deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentClientdeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentContactInformation_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_InsertUpdateBusinessContentContactInformation_PPCMeta]
(
    @id bigint,
    @userLoginId bigint,
	@profilepageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
--- To Insert/Update Business Content Contact Information by UserLoginId 
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentContactInformation_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentContactInformation_PPCMeta
            SET Title = @title ,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content Contact Information Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentContactDetailUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentContactInformation_PPCMeta (UserLoginId,ProfilePageTypeId,Title, Description,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId,@profilepageTypeId, @title, @description,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Contact Detail successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentContactDetailCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentCourseDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentCourseDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@courseSignIcon nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------------------To insert Course Detail------------
    if(@mode=1)
    begin
     INSERT INTO BusinessContentCourseDetail_PPCMeta (UserLoginId, ProfilePageTypeId,Title, CourseSignIcon, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId, @title,@courseSignIcon, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Course Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentCourseCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Update Course Detail By Id
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentCourseDetail_PPCMeta  SET Title = @title, CourseSignIcon = @courseSignIcon,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentCourse Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentCourseUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Course  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentCourseDetail_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentCourse deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentCoursedeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentCurriculumDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentCurriculumDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@curriculumOptions nvarchar(max),
@curriculumImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------------------To insert Course Detail------------
    if(@mode=1)
    begin
     INSERT INTO BusinessContentCurriculum_PPCMeta (UserLoginId, ProfilePageTypeId,Title, CurriculumOptions,CurriculumImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId, @title,@curriculumOptions,@curriculumImage ,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Curriculum Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentCurriculumCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Update Course Detail By Id
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentCurriculum_PPCMeta  SET Title = @title, CurriculumOptions = @curriculumOptions,CurriculumImage = @curriculumImage,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentCurriculum Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentCurriculumUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Course  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentCurriculum_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentCurriculum deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentCurriculumdeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentEducationDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentEducationDetail]
(
@id bigint,
@userLoginId bigint,
@university nvarchar(max),
@submittedByLoginId int,
@universityLogo nvarchar(max),
@universityImage nvarchar(max),
@description nvarchar(max),
@mode int
)
as
begin
------------------To insert Education Detail------------
    if(@mode=1)
	if exists(select Id from BusinessContentEducation_PPCMeta  where University = @university and IsDeleted = 0)
		begin
			select -1 as ret, 'Business University    same name already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'BusinessUniversityAlreadyExit_ErrorMessage' as resourceKey
			--return
		end
		else
    begin
     INSERT INTO BusinessContentEducation_PPCMeta (UserLoginId, University, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn,UniversityLogo,UniversityImage,Description)
            VALUES (@userLoginId,@university,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME),@universityLogo,@universityImage,@description);

            SELECT 1 AS ret,
                   'Business Content Education Service successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinesscontentEducationCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Update Education Detail By Id
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentEducation_PPCMeta  SET  University = @university,UniversityLogo =@universityLogo,UniversityImage = @universityImage,Description = @description, UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentEducation Update successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinessContentEducationUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Education  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentEducation_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentEducation deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessContentEducationdeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentEventCompanyDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentEventCompanyDetail]
(
    @id bigint,
    @businessOwnerLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @image nvarchar(max),
	@eventOptions nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT BusinessOwnerLoginId FROM BussinessContentEventCompanyDetail_PPCMeta WHERE BusinessOwnerLoginId = @businessOwnerLoginId)
        BEGIN
            UPDATE BussinessContentEventCompanyDetail_PPCMeta
            SET Title = @title,
                Description = @description,
                Image = @image,
				EventOptions = @eventOptions,
                UpdatedOn = GETUTCDATE()
            WHERE BusinessOwnerLoginId = @businessOwnerLoginId;

            SELECT 1 AS ret,
                   'BusinessContentEventCompany Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentEventCompanyUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BussinessContentEventCompanyDetail_PPCMeta (BusinessOwnerLoginId, ProfilePageTypeId, Title, Description, Image,EventOptions ,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@businessOwnerLoginId, @profilePageTypeId, @title, @description, @image,@eventOptions, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content EventCompany successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentEventCompanyCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_InsertUpdateBusinessContentEventImage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_InsertUpdateBusinessContentEventImage]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@profilePageTypeId bigint,
	@eventId bigint,
	@eventImage nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        
            INSERT INTO BusinessContentEventImages_PPCMeta(BusinessOwnerLoginId, ProfilePageTypeId, EventId, Image, CreatedOn, CreatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@businessOwnerLoginId, @profilePageTypeId, @eventId, @eventImage, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Event Image successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentEventImageCreated_SuccessMessage' AS resourceKey;
       
    END
 -- Delete Business-Content EventImage Detail
	else if(@mode = 2)
	begin
		delete from BusinessContentEventImages_PPCMeta where Id = @id 

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessEventImage_Deleted_SuccessMessage' as resourceKey
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentEventPPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[sp_InsertUpdateBusinessContentEventPPCMeta]
(
    @id bigint,
    @userLoginId bigint,
	@profilePageTypeId bigint,
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentEvent_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentEvent_PPCMeta
            SET 
               Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentPlan Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentPlanUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentEvent_PPCMeta (UserLoginId, ProfilePageTypeId,Description,Status,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @description, 0,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Plan successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentPlanCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentFitness_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentFitness_PPCMeta]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @fitnessImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentFitnessMovement_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentFitnessMovement_PPCMeta
            SET Title = @title,
                Description = @description,
                FitnessImage = @fitnessImage,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentFitness Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentFitnessUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentFitnessMovement_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, FitnessImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @ProfilePageTypeId, @title, @description, @fitnessImage, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content  Inserted Fitness successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentFitnessCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentFitnessMovement]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessContentFitnessMovement]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@requirements nvarchar(max),
@investment nvarchar(max),
@inclusions nvarchar(max),
@description nvarchar(max),
@submittedByLoginId int,
@mode int
)
AS
begin
--------To Add Fitness Movement Detail------
  if(@mode=1)
    begin
     INSERT INTO BusinessContentFitnessMovements (UserLoginId,ProfilePageTypeId, Title,Requirements, Investment, Inclusions, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn,Description)
            VALUES (@userLoginId,@profilePageTypeId, @title,@requirements, @investment, @inclusions, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME),@description);

            SELECT 1 AS ret,
                   'Business Content Fitness Movement Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentFitnessMovementCreated_SuccessMessage' AS resourceKey;
     end
	 ------------To Update Fitness Movement Detail
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentFitnessMovements  SET Title = @title, Requirements = @requirements,Investment = @investment, Inclusions = @inclusions,Description = @description,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentFitnessMovement Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentFitnessMovementUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Fitness Movement   Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentFitnessMovements  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentFitnessMovement deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentFitnessMovementdeleted_SuccessMessage' as resourceKey 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentLanguage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_InsertUpdateBusinessContentLanguage]
(
@id bigint,
@businessOwnerLoginId bigint,
@profilePageTypeId bigint,
@languageId bigint,
@submittedByLoginId int,
@mode int
)
as
begin

------------------To insert Language Detail------------
    if(@mode=1)

    begin
     INSERT INTO BusinessContentLanguage_PPCMeta (BusinessOwnerLoginId,ProfilePageTypeId,LanguageId, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@businessOwnerLoginId,@profilePageTypeId, @languageId, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

			
            SELECT 1 AS ret,
                   'Business Content Language detail  successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinesscontentLanguageCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Delete Language Detail By Id
	 else if(@mode=2)
	 
	begin
	delete from BusinessContentLanguage_PPCMeta where  BusinessOwnerLoginId = @businessOwnerLoginId;
		   select 1 as ret, 'BusinessContentLanguage deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessContentLanguagedeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentLanguageDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_InsertUpdateBusinessContentLanguageDetail]
(
@id bigint,
@userLoginId bigint,
@language nvarchar(max),
@languageIcon nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------------------To insert Language Detail------------
    if(@mode=1)
	if exists(select Id from BusinessLanguages bc where bc.Language = @language and bc.IsDeleted = 0)
		begin
			select -1 as ret, 'Business Language    same name already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'BusinessLanguageAlreadyExit_ErrorMessage' as resourceKey
			--return
		end
		else
    begin
     INSERT INTO BusinessLanguages (UserLoginId,Language, LanguageIcon, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId, @language,@languageIcon, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Language detail  successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinesscontentLanguageCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Update Language Detail By Id
	 else if(@mode=2)
	 begin
	      UPDATE BusinessLanguages  SET Language = @language, LanguageIcon = @languageIcon,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentLanguage Update successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinessContentLanguageUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Language  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessLanguages  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentLanguage deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessContentLanguagedeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentMuchMoreService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentMuchMoreService]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@content nvarchar(max),
@serviceIcon nvarchar(max),
@submittedByLoginId int,
@mode int
)
AS
begin
--------To Add Much More Service Detail------
  if(@mode=1)
    begin
     INSERT INTO BusinessContentMuchMoreService_PPCMeta (UserLoginId,ProfilePageTypeId,Content, ServiceIcon, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId,@content, @serviceIcon, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content MuchMoreService successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentMuchMoreServiceCreated_SuccessMessage' AS resourceKey;
     end
	 ------------To Update Much More Service Detail
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentMuchMoreService_PPCMeta  SET  Content = @content,ServiceIcon = @serviceIcon ,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentMuchMoreService Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentMuchMoreServiceUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Much More Service  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentMuchMoreService_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentMuchMoreService deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentMuchMoreServicedeleted_SuccessMessage' as resourceKey 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentPlanPPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[sp_InsertUpdateBusinessContentPlanPPCMeta]
(
    @id bigint,
    @userLoginId bigint,
    @businessPlanTitle nvarchar(max),
    @businessPlanDescription nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentPlan_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentPlan_PPCMeta
            SET BusinessPlanTitle = @businessPlanTitle ,
                BusinessPlanDescription = @businessPlanDescription,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentPlan Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentPlanUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentPlan_PPCMeta (UserLoginId,BusinessPlanTitle, BusinessPlanDescription,Status,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @businessPlanTitle, @businessPlanDescription, 0,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Plan successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentPlanCreated_SuccessMessage' AS resourceKey;
        END;
    END
END

GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentProfessionalDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[sp_InsertUpdateBusinessContentProfessionalDetail]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @professionalTitle nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentProfessionals WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentProfessionals
            SET ProfessionalTitle = @professionalTitle,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentProfessional Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentProfessionalUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentProfessionals (UserLoginId, ProfilePageTypeId, ProfessionalTitle, Description, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @ProfilePageTypeId, @professionalTitle, @description, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Professional successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentProfessionalCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentReviewDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentReviewDetail]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @description nvarchar(max),
    @reviewImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentReview_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentReview_PPCMeta
            SET 
                Description = @description,
                ReviewImage = @reviewImage,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentReview Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentReviewUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentReview_PPCMeta (UserLoginId, ProfilePageTypeId, Description, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId,ReviewImage)
            VALUES (@userLoginId, @ProfilePageTypeId, @description, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId,@reviewImage);

            SELECT 1 AS ret,
                   'Business Content Review successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentReviewCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessContentService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_InsertUpdateBusinessContentService]
(
    @id bigint,
    @userLoginId bigint,
    @serviceTitle nvarchar(max),
    @shortDescription nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentServices WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentServices
            SET ServiceTitle = @serviceTitle ,
                ShortDescription = @shortDescription,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentService Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentServiceUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentServices (UserLoginId,ServiceTitle, ShortDescription, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @serviceTitle, @shortDescription, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentServiceCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentSportsBanner]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessContentSportsBanner]
(
@id bigint,
@userLoginId bigint,
@ProfilePageTypeId bigint,
@title nvarchar(max),
@subTitle nvarchar(max),
@description nvarchar(max),
@buttonText nvarchar(max),
@buttonLink nvarchar(max),
@bannerImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
if(@mode=1)
 begin
    insert into BusinessContentBanners (UserLoginId,ProfilePageTypeId,Title,SubTitle,Description,ButtonText,ButtonLink,BannerImage,IsButtonActive,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
	values(@userLoginId,@ProfilePageTypeId,@title,@subTitle,@description,@buttonText,@buttonLink,@bannerImage,1,0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

	select 1 as ret, 'Business Content Banner successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinesscontentBannerCreated_SuccessMessage' as resourceKey
 end
 if(@mode=2)
  begin
  Update BusinessContentBanners set Title = @title,SubTitle = @subTitle,Description = @description,ButtonText = @buttonText,ButtonLink = @buttonLink, BannerImage = @bannerImage , UpdatedOn = GETUTCDATE() where Id = @id		
  select 1 as ret, 'BusinessContentBanner Update successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentBannerUpdate_SuccessMessage' as resourceKey
  end
  -- Soft-Delete Business  Content Banner Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentBanners  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentBanner deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentBannerdeleted_SuccessMessage' as resourceKey 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentStudioEquipment_PPCMetaDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentStudioEquipment_PPCMetaDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @subTitle nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentStudioEquipment_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentStudioEquipment_PPCMeta
            SET Title = @title,
                SubTitle = @subTitle,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentStudioEquipment Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentStudioEquipmentUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentStudioEquipment_PPCMeta (UserLoginId, ProfilePageTypeId, Title, SubTitle,  CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @subTitle, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Studio Equipment inserted  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentStudioEquipmentCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentStudioEquipmentDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentStudioEquipmentDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @equipmentType nvarchar(max),
    @equipmentValue nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
-------------------------To Insert Bussiness Studio Equipment Detail 
if(@mode=1)
begin
   INSERT INTO BusinessContentStudioEquipments (UserLoginId, ProfilePageTypeId, EquipmentType, EquipmentValue,  CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId,IsDeleted,DeletedOn)
            VALUES (@userLoginId, @profilePageTypeId, @equipmentType, @equipmentValue, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId,0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Studio Equipment inserted  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentStudioEquipmentCreated_SuccessMessage' AS resourceKey;
end
-----------------To Update Business Content Studio Equipment By Id  
   else IF (@mode = 2)
    BEGIN
            UPDATE BusinessContentStudioEquipments  SET EquipmentType = @equipmentType,   EquipmentValue = @equipmentValue,
                UpdatedOn = GETUTCDATE()
            WHERE Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentStudioEquipment Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentStudioEquipmentUpdate_SuccessMessage' AS resourceKey;
   END
      -- Soft-Delete Business  Content Business Content Studio Equipment By Id  
	else if(@mode=3)
	begin
		   Update BusinessContentStudioEquipments  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentStudio Equipment deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentStudioEquipmentdeleted_SuccessMessage' as resourceKey 
	end
    
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessContentTennis_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE procedure [dbo].[Sp_InsertUpdateBusinessContentTennis_PPCMeta]
(
@id bigint,
@userLoginId bigint,
@ProfilePageTypeId bigint,
@title nvarchar(max),
@subTitle nvarchar(max),
@description nvarchar(max),
@tennisImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
if(@mode=1)
begin
     insert into BusinessContentTennis_PPCMeta (UserLoginId,ProfilePageTypeId,Title,SubTitle,Description,TennisImage,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
	values(@userLoginId,@ProfilePageTypeId,@title,@subTitle,@description,@tennisImage,0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

	select 1 as ret, 'Business Content Tennis successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinesscontentTennisCreated_SuccessMessage' as resourceKey
end
 else if(@mode=2)
  BEGIN
        
            Update BusinessContentTennis_PPCMeta set Title = @title,SubTitle = @subTitle,Description = @description,  TennisImage = @tennisImage , UpdatedOn = GETUTCDATE() where Id = @id		
  select 1 as ret, 'BusinessContentTennis Update successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentTennisUpdate_SuccessMessage' as resourceKey;
        END
      -- Soft-Delete Business  Content Tennis Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentTennis_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentTennis deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentTennisdeleted_SuccessMessage' as resourceKey 
	end
   
end
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessContentVideoPPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_InsertUpdateBusinessContentVideoPPCMeta]
(
    @id bigint,
    @userLoginId bigint,
    @title nvarchar(max),
    @videoDescription nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentVideos_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentVideos_PPCMeta
            SET Title = @title ,
                VideoDescription = @videoDescription,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentVideo Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentVideoUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentVideos_PPCMeta (UserLoginId,Title, VideoDescription,Status,CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @title, @videoDescription, 0,GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Video successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentVideoCreated_SuccessMessage' AS resourceKey;
        END;
    END
END


GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessContentWorldClassDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessContentWorldClassDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentWorldClassProgram_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentWorldClassProgram_PPCMeta
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content World Class Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentWorldClassUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentWorldClassProgram_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content World Class successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentWorldClassCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessCourseCategoryDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessCourseCategoryDetail]
(
@id bigint,
@userLoginId bigint,
@title nvarchar(max),
@description nvarchar(max),
@courseCategoryImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------To insert Course Category Detail
    if(@mode=1)
    begin
     INSERT INTO BusinessCourseCategories (UserLoginId, Title, Description, CourseCategoryImage, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId, @title, @description, @courseCategoryImage, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content Course Category  successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinesscontentCourseCategoryCreated_SuccessMessage' AS resourceKey;
     end
	 ------- To Update Course Category  
	 else if(@mode=2)
	 begin
	      UPDATE BusinessCourseCategories  SET Title = @title,Description = @description, CourseCategoryImage = @courseCategoryImage,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentCourseCategory Update successfully!' AS responseMessage,
                   'SuperAdminPanel' AS resourceFileName,
                   'BusinessContentCourseCategoryUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Course Category Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessCourseCategories  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentCourseCategory deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessContentCourseCategorydeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessExploreDClassicDanceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessExploreDClassicDanceDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentExploreDetail_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentExploreDetail_PPCMeta
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content Explore Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentExploreUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentExploreDetail_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Explore Detail successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentExploreCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessFindMasterProfileDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessFindMasterProfileDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @exploreType nvarchar(max),
    @description nvarchar(max),
    @image nvarchar(max),
	@scheduleLink nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
		if exists(select 1 from BusinessContentFindMasterProfileDetail_PPCMeta bcf where bcf.ExploreType = @exploreType and bcf.IsDeleted = 0 )
		begin
			select -1 as ret, 'Sorry, same explore Type is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyExploreTypeExit_ErrorMessage' as resourceKey
		end
		else
        BEGIN
            INSERT INTO BusinessContentFindMasterProfileDetail_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description,Image, ScheduleLink, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId,ExploreType,IsDeleted,DeletedOn)
            VALUES (@userLoginId, @profilePageTypeId, @title, @description, @image, @scheduleLink, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId,@exploreType,0,Cast('1/1/2000' as datetime));

            SELECT 1 AS ret,
                   'Business Content Find Master Profile successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentFindMasterProfileCreated_SuccessMessage' AS resourceKey;
        END;
    END
	--- To Update Find Detail
	else if(@mode=2)
    begin
        UPDATE BusinessContentFindMasterProfileDetail_PPCMeta  SET Title = @title,Description = @description,ScheduleLink = @scheduleLink, Image = @image, UpdatedOn = GETUTCDATE()
        WHERE Id = @id;

        SELECT 1 AS ret,
			'BusinessContent Find Master Profile Update successfully!' AS responseMessage,
			'BusinessPanel' AS resourceFileName,
			'BusinessContentFindMasterProfileUpdate_SuccessMessage' AS resourceKey;
  
    end
	--- To Delete Find Master Profile Detail By Id 
	else if(@mode=3)
    begin
	    UPDATE BusinessContentFindMasterProfileDetail_PPCMeta SET IsDeleted = 1, DeletedOn = GETUTCDATE() WHERE Id = @id;
        SELECT 1 as ret, 'Find Master Profile Detail deleted successfully!' as responseMessage,
                'BusinessPanel' as resourceFileName, 'FindMasterProfile_Deleted_SuccessMessage' as resourceKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessImages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessImages] 
(
	@id bigint,
	@userLoginId bigint,
	@imageTitle nvarchar(max),
	@image nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--Insert Image
	if(@mode = 1)
	begin
		insert into BusinessContentImages(ImageTitle,Image,BusinessOwnerLoginId,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)
		Values(@imageTitle,@image,@userLoginId,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
		
		select 1 as ret, 'Image saved successfully' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessImages_Created_SuccessMessage' as resourceKey
	end
	--Delete Business-Images List
	else if(@mode = 2)
	begin
		delete from BusinessContentImages where Id = @id and BusinessOwnerLoginId = @userLoginId;

		select 1 as ret, 'Image deleted successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessImages_Deleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessLicenses]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessLicenses]
(
	@id bigint,
	@licenseBookingId bigint,
	@businessOwnerLoginId bigint,
	@licenseId bigint,
	@quantity int,
	@quantityUsed int,
	@mode int
)
as
begin
	-- Insert Business License by License-Booking-Id
	if(@mode = 1)
	begin
		insert into BusinessLicenses(LicenseBookingId,LicenseId,BusinessOwnerLoginId,Quantity,QuantityUsed,LicenseIsPaid,LicensePrice,LicenseCommissionType,LicenseCommissionValue,LicenseGSTPercent,LicenseGSTDescription,LicenseMinSellingPrice,CreatedOn,UpdatedOn)
		select @licenseBookingId, lb.LicenseId, lb.BusinessOwnerLoginId, lb.Quantity, @quantityUsed, lb.LicenseIsPaid, lb.LicensePrice, lb.LicenseCommissionType, lb.LicenseCommissionValue,lb.LicenseGSTPercent,lb.LicenseGSTDescription,lb.LicenseMinSellingPrice, GETUTCDATE(), GETUTCDATE() from LicenseBookings lb  where lb.Id = @licenseBookingId
		
		set @licenseBookingId = SCOPE_IDENTITY();
		select 1 as ret, 'Successfully added licenses to Business!' as responseMessage, @licenseBookingId as Id,'SuperAdminPanel' as resourceFileName, 'BusinessLicensesAdded_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessMasterProfileBannerDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessMasterProfileBannerDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @bannerType nvarchar(max),
    @title nvarchar(max),
	@subTitle nvarchar(max),
    @description nvarchar(max),
    @BannerImage nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
	BEGIN
		IF EXISTS (SELECT 1 FROM BusinessContentMasterProfileBanner_PPCMeta bcb WHERE bcb.BannerType = @bannerType AND bcb.IsDeleted = 0)
		BEGIN
			SELECT -1 AS ret,
				   'Sorry, the same Banner Type is already used by another user!' AS responseMessage,
				   'BusinessPanel' AS resourceFileName,
				   'AlreadyBannerTypeExist_ErrorMessage' AS resourceKey;
		END
		ELSE
		BEGIN
			INSERT INTO BusinessContentMasterProfileBanner_PPCMeta (UserLoginId, ProfilePageTypeId, BannerType, Title, SubTitle, Description, BannerImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
			VALUES (@userLoginId, @profilePageTypeId, @bannerType, @title, @subTitle, @description, @bannerImage, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

			SELECT 1 AS ret,
				   'Business Content Banner successfully!' AS responseMessage,
               'BusinessPanel' AS resourceFileName,
               'BusinesscontentBannerCreated_SuccessMessage' AS resourceKey;
		END
	END
	--- To Update Find Detail
	else if(@mode=2)
    begin
        UPDATE BusinessContentMasterProfileBanner_PPCMeta  SET Title = @title, SubTitle = @subTitle,Description = @description,BannerImage = @bannerImage, UpdatedOn = GETUTCDATE()
            WHERE Id = @id;

        SELECT 1 AS ret,
            'BusinessContentBanner Update successfully!' AS responseMessage,
            'BusinessPanel' AS resourceFileName,
            'BusinessContentBannerUpdate_SuccessMessage' AS resourceKey;
  
    end
	--- To Delete Find Master Profile Detail By Id 
	else if(@mode=3)
    begin
	    UPDATE BusinessContentMasterProfileBanner_PPCMeta SET IsDeleted = 1, DeletedOn = GETUTCDATE() WHERE Id = @id;
        SELECT 1 as ret, ' Business Content Banner Deleted successfully!' as responseMessage,
                'BusinessPanel' as resourceFileName, 'BusinessContentBannerDelete_SuccessMessage' as resourceKey;
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessMemberShipPackageDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessMemberShipPackageDetail]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
	---- To Add/Update Member Ship Package Detail 
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentMemberShipPackageDetail_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentMemberShipPackageDetail_PPCMeta
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content MemberShip Package  Detail  Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentMemberShipPackageUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentMemberShipPackageDetail_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content MemberShip Package Detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentMemberShipPackageCreated_SuccessMessage' AS resourceKey;
        END
    END
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_InsertUpdateBusinessMuchMoreServiceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_InsertUpdateBusinessMuchMoreServiceDetail]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @title nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentMuchMoreServices WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentMuchMoreServices
            SET Title = @title,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentMuchMoreService Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentMuchMoreServiceUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentMuchMoreServices (UserLoginId, ProfilePageTypeId, Title, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @ProfilePageTypeId, @title, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content MuchMoreService successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentMuchMoreServiceCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessNoticeBoardDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[sp_InsertUpdateBusinessNoticeBoardDetail]
(
@id bigint,
@userLoginId bigint,
@startDate nvarchar(max),
@description nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
------To insert Notice Board Detail
    if(@mode=1)
    begin
     INSERT INTO BusinessNoticeBoards (UserLoginId, StartDate, Description, Status, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId, @startDate, @description, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content  Notice Board  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentBusinessNoticeBoardCreated_SuccessMessage' AS resourceKey;
     end
	 ------- To Update  BusinessNoticeBoard  
	 else if(@mode=2)
	 begin
	      UPDATE BusinessNoticeBoards  SET StartDate = @startDate,Description = @description,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'BusinessContentBusinessNoticeBoard Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentBusinessNoticeBoardUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content Notice Board Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessNoticeBoards  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentBusinessNoticeBoard deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentBusinessNoticeBoarddeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessOwner]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessOwner]
(
	@id bigint,
	@email nvarchar(max),
	@password nvarchar(max),
	@phoneNumber nvarchar(max),
	@phoneNumber_CountryCode nvarchar(max),	
	@roleId bigint,
	@businessName nvarchar(max),
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@address nvarchar(max),
	@DOB nvarchar(max),
	@rejectionReason nvarchar(max),
	@businessCategoryId bigint,
	@IsPrimeMember int,
	@submittedByLoginId bigint,
	@mode int,
	@businessSubCategoryId bigint,
	@verified int,
	@uniqueUserId nvarchar(max)
)
as
begin
	declare @businessCategoryKeyName nvarchar(max) = '';
	declare @lastRecordIdDetail_ID bigint = 1;

	--Insert New Restaurant/Customer Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    declare @masterId nvarchar(max)
		declare @prefix nvarchar(max)
		declare @value bigint

		set @businessCategoryKeyName = (select bc.CategoryKey from BusinessCategories bc where bc.Id = @businessCategoryId)

		-- Generate MBI_ MasterId if Individual Category
		if(@businessCategoryKeyName = 'individual')
		begin
			select @value = lr.Value+1, @prefix=lr.Prefix from LastRecordIdDetails lr where lr.Id = 4
			--set MasterId 
			set @masterId = @prefix +CAST(@value AS VARCHAR(max))
			set @lastRecordIdDetail_ID = 4
		end
		else 
		begin
			select @value = lr.Value+1, @prefix=lr.Prefix from LastRecordIdDetails lr where lr.Id = 1
			--set MasterId 
			set @masterId = @prefix +CAST(@value AS VARCHAR(max))
			set @lastRecordIdDetail_ID = 1
		end

		-- if same email already exists for BusinessOwner
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId In (4,5))
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else if exists(select ul.Id from UserLogins ul where ul.PhoneNumber = @phoneNumber and ul.IsDeleted = 0 and ul.RoleId In (4,5))
		begin
			select -1 as ret, 'Sorry, same phone-number is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyPhoneNumberExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				insert into UserLogins(UserName,Email,Password,PhoneNumber,PhoneNumber_CountryCode,EmailConfirmed,RoleId,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,DeletedByLoginId,Status,MasterId,Gender,UniqueUserId)
				values('',@email,@password,@phoneNumber,@phoneNumber_CountryCode,0,@roleId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),0,1,@masterId,0,@uniqueUserId)

				set @UserLoginId = (select @@IDENTITY);
				update LastRecordIdDetails set Value = @value where Id = @lastRecordIdDetail_ID

				insert into BusinessOwners(UserLoginId,BusinessName,FirstName,LastName,Address,DOB,DOB_DateTime,IsAccountAccepted,RejectionReason,BusinessCategoryId,IsPrimeMember,ProfileImage,BusinessLogo,About,BusinessSubCategoryId,Verified,IsBranch)
				values(@UserLoginId,@businessName,@firstName,@lastName,@address,@DOB,Cast(@DOB as datetime),0,@rejectionReason,@businessCategoryId,@IsPrimeMember,'','','', @businessSubCategoryId,0,0)

				select 1 as ret, 'Business Owner Registered successfuly!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'BusinessOwnerRegistered_SuccessMessage' as resourceKey, @masterId as MasterId
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Business error!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'Business_ErrorMessage' as resourceKey
			END CATCH
		end
		     
   end
	-- Delete Business Owner by Business-Owner-Id
	else if(@mode=2)
	begin
		if not exists(select bo.Id from BusinessOwners bo where bo.Id = @id)
		begin
			select -1 as ret, 'Sorry, Business Owner not exists!' as responseMessage,'BusinessPanel' as resourceFileName , 'BusinessOwnerNotExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			select @UserLoginId = bo.UserLoginId from BusinessOwners bo where bo.Id = @id

			update UserLogins set IsDeleted = 1, DeletedOn = GETUTCDATE(), DeletedByLoginId = @submittedByLoginId where Id = @UserLoginId

			select 1 as ret, 'Business Owner deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessOwnerDeleted_SuccessMessage' as resourceKey
		end
	end
	-- Update Business Owner
	else if(@mode=3)
	begin
	    set @UserLoginId  = (select bo.UserLoginId from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId= ul.Id where ul.Id=@id)
		
		-- if same email already exists for the business 
		if exists(select ul.Id from UserLogins ul inner join BusinessOwners bo on ul.Id=bo.UserLoginId  where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId In (4,5) and ul.Id != @id and bo.UserLoginId=@UserLoginId)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else if exists(select ul.Id from UserLogins ul inner join BusinessOwners bo on ul.Id=bo.UserLoginId where ul.PhoneNumber = @phoneNumber and ul.IsDeleted = 0and ul.Id!= @id and bo.UserLoginId=@UserLoginId and ul.RoleId In (4,5))
		begin
			select -1 as ret, 'Sorry, same phone-number is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyPhoneNumberExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				Update UserLogins set Email = @email,Password = @password,PhoneNumber= @phoneNumber,UpdatedOn = GETUTCDATE() where Id = @id	
				
				update  BusinessOwners set FirstName = @firstName,LastName= @lastName,BusinessCategoryId = @businessCategoryId, BusinessSubCategoryId = @businessSubCategoryId, Verified = @verified where UserLoginId = @UserLoginId
				select 1 as ret, 'Business Owner Updated successfuly!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'BusinessOwnerUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Business error!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'Business_ErrorMessage' as resourceKey
			END CATCH
		end     
	end
	-- Delete Business Owner By Id
	else if(@mode=4)		
	begin
	set @UserLoginId = (select ul.Id from UserLogins ul inner join BusinessOwners bo on ul.Id = bo.UserLoginId where UserLoginId = @id)
		if not exists(select bo.Id from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id  where bo.UserLoginId = @id and ul.Id = @UserLoginId)
		begin
			select -1 as ret, 'Sorry, Business Owner not exists!' as responseMessage,'BusinessPanel' as resourceFileName , 'BusinessOwnerNotExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			select @UserLoginId = bo.UserLoginId from BusinessOwners bo where bo.Id = @id

			update UserLogins set IsDeleted = 1, DeletedOn = GETUTCDATE(), DeletedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Business Owner deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessOwnerDeleted_SuccessMessage' as resourceKey
		end
	end  
	--- To Update the Business Branch Detail By UserLoginId 
	else if(@mode=5)  
	begin
	    set @id  = (select bo.UserLoginId from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId= ul.Id where ul.Id=@id)
		
		-- if same email already exists for the business 
		if exists(select ul.Id from UserLogins ul inner join BusinessOwners bo on ul.Id=bo.UserLoginId  where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId In (4,5) and ul.Id != @id and bo.UserLoginId=@id)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else if exists(select ul.Id from UserLogins ul inner join BusinessOwners bo on ul.Id=bo.UserLoginId where ul.PhoneNumber = @phoneNumber and ul.IsDeleted = 0and ul.Id!= @id and bo.UserLoginId=@UserLoginId and ul.RoleId In(4,5))
		begin
			select -1 as ret, 'Sorry, same phone-number is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyPhoneNumberExit_ErrorMessage' as resourceKey
		end
		else 
	    begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				Update UserLogins set Email = @email, PhoneNumber= @phoneNumber,UpdatedOn = GETUTCDATE()
				where Id = @id	
				
				update  BusinessOwners set FirstName = @firstName,LastName= @lastName, BusinessName = @businessName where UserLoginId = @id

				select 1 as ret, 'Business Owner Updated successfuly!' as responseMessage,  @id as Id,
				'BusinessPanel' as resourceFileName , 'BusinessOwnerUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Business error!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'Business_ErrorMessage' as resourceKey
			END CATCH
		end 
    end
	---- Toggle Home-Page-Visibility Status for Business/Instructor By Id - [Super-Admin-Panel]
	else if(@mode=6)
	begin
		if not exists(select bo.Id from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id where bo.Id = @id and ul.IsDeleted = 0)
		begin
			select -1 as ret, 'Business not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update BusinessOwners set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
	---- Toggle Account Status for Business/Instructor By Id - [Super-Admin-Panel]
	else if(@mode=7)
	begin
		if not exists(select bo.Id from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id where bo.Id = @id and ul.IsDeleted = 0)
		begin
			select -1 as ret, 'Business not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update BusinessOwners set IsAccountAccepted = Case when IsAccountAccepted = 1 then 0 else 1 end where Id = @id

			select 1 as ret, 'Account status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'AccountStatusUpdated_SuccessMessage' as resourceKey
		end
	end
	---- Toggle Prime Member Status for Business/Instructor By Id - [Super-Admin-Panel]
	else if(@mode=8)
	begin
		if not exists(select bo.Id from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id where bo.Id = @id and ul.IsDeleted = 0)
		begin
			select -1 as ret, 'Business not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update BusinessOwners set IsPrimeMember = Case when IsPrimeMember = 1 then 0 else 1 end where Id = @id

			select 1 as ret, 'Status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'StatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessPlan]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessPlan]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@businessPlanDurationTypeId bigint,
	@name nvarchar(max),
	@description nvarchar(max),
	@price decimal(18,2),
	@status int,
	@compareAtPrice decimal(18,2),
	@planImage nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@discountPercent decimal(18,2)
)
AS
BEGIN

	-- Insert Business Plan
	if(@mode=1)
	begin
	    --set @UserLoginId=0;
					
		if exists(select bp.Id from BusinessPlans bp where bp.Name = @name and bp.IsDeleted = 0 and bp.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Sorry, same plan name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'AlreadyPlanNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				insert into BusinessPlans(BusinessOwnerLoginId,Name,Price,BusinessPlanDurationTypeId,Description,CompareAtPrice,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,Status,PlanImage,DiscountPercent)
				values(@businessOwnerLoginId,@name,@price,@businessPlanDurationTypeId,@description,@compareAtPrice,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@status,@planImage,@discountPercent)

				select 1 as ret, 'Plan created successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanCreated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Plan not created. Something went wrong!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanNotCreated_ErrorMessage' as resourceKey
				end
			END CATCH
		end
	end
	-- Updat Business Plan
	else if(@mode=2)
	begin
		-- update
		if exists(select bp.Id from BusinessPlans bp where bp.Name = @name and bp.IsDeleted = 0 and bp.BusinessOwnerLoginId = @businessOwnerLoginId and bp.Id != @id)
		begin
			select -1 as ret, 'Sorry, same plan name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'AlreadyPlanNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
					update BusinessPlans set BusinessPlanDurationTypeId = @businessPlanDurationTypeId, Name = @name, Price = @price, Description = @description,  Status = @status, CompareAtPrice = @compareAtPrice, PlanImage = @planImage, DiscountPercent = @discountPercent, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id and BusinessOwnerLoginId = @businessOwnerLoginId

					select 1 as ret, 'Plan updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanUpdated_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Plan not updated. Something went wrong!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanNotUpdated_ErrorMessage' as resourceKey
				end
			END CATCH
		end
	end
	-- Delete Business Plan by Id
	else if(@mode=3)
	begin
		--select @UserLoginId = s.UserLoginId from Staffs s where s.Id = @id
		update BusinessPlans set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and BusinessOwnerLoginId = @businessOwnerLoginId

		select 1 as ret, 'Plan deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanDeleted_SuccessMessage' as resourceKey
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessProfile]
(
	@id bigint,
	@email nvarchar(max),
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@profileImage nvarchar(max),
	@businessLogo nvarchar(max),
	@about nvarchar(max),
	@address nvarchar(max),
	@country nvarchar(max),
	@state nvarchar(max),
	@city nvarchar(max),
	@pinCode nvarchar(max),
	@landMark nvarchar(max),
	@latitude decimal(18,15),
	@longitude decimal(18,15),
	@phoneNumber nvarchar(max),
	@documentTitle nvarchar(max),
	@documentUploadedFiles nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@businessName nvarchar(max),
	@experience nvarchar(max),
	@privacy_UniqueUserId int,
	@officialWebSiteUrl nvarchar(max),
	@faceBookProfileLink nvarchar(max),
    @linkedInProfileLink nvarchar(max),
	@instagramProfileLink nvarchar(max),
	@twitterProfileLink nvarchar(max),
	@coverImage nvarchar(max)
)
as
begin
	--Update Business Profile Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    --set @UserLoginId=0;
					
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.Id!= @id)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		if exists(select bo.Id from BusinessOwners bo where bo.BusinessName = @businessName and bo.UserLoginId!= @id)
		begin
			select -1 as ret, 'Sorry, same business name already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessNameAlreadyExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				
				update UserLogins set  Email=@email, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId,Address = @address,State= @state,City= @city,Country = @country,Pincode = @pincode,FullAddressLocation = @landMark,Latitude= @latitude,Longitude = @longitude,PhoneNumber = @phoneNumber,FacebookProfileLink = @faceBookProfileLink,LinkedInProfileLink = @linkedInProfileLink,InstagramProfileLink =@instagramProfileLink, TwitterProfileLink = @twitterProfileLink where Id = @id 
			
				update BusinessOwners set FirstName = @firstName , LastName = @lastName ,About =@about, BusinessName = @businessName, Experience = @experience,Privacy_UniqueUserId = @privacy_UniqueUserId, OfficialWebSiteUrl = @officialWebSiteUrl where UserLoginId = @id

				if(@documentTitle != '' and @documentUploadedFiles !='')
					begin
						insert into DocumentDetails(BusinessOwnerId,DocumentTitle,DocumentFile,Status,CreatedOn,UpdatedOn)Values(@id,@documentTitle,@documentUploadedFiles,0,GETUTCDATE(),GETUTCDATE())
					end

				select 1 as ret, 'Business Profile Updated successfuly!' as responseMessage,  @id as Id,
				'BusinessPanel' as resourceFileName, 'BusinessProfileUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Profile error!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'BusinessProfile_ErrorMessage' as resourceKey
			END CATCH
		end
   end
   --update Business-Profile-Image
	else if(@mode=2)
	begin
		update BusinessOwners set ProfileImage = @profileImage where UserLoginId = @id

		select 1 as ret, 'Business Profile Image Updated successfuly!' as responseMessage,  @id as Id,
		'BusinessPanel' as resourceFileName, 'BusinessProfileImageUpdated_SuccessMessage' as resourceKey
	end
	---Update Business-logo
	else if(@mode=3)
	begin
		update BusinessOwners set BusinessLogo = @businessLogo where UserLoginId = @id

		select 1 as ret, 'Business Logo Updated successfuly!' as responseMessage,  @id as Id,
		'BusinessPanel' as resourceFileName, 'BusinessLogoUpdated_SuccessMessage' as resourceKey
	end
	---Add Business-Documents
	else if(@mode=4)
	begin
		if(@documentTitle != '' and @documentUploadedFiles !='')
		begin
			insert into DocumentDetails(BusinessOwnerId,DocumentTitle,DocumentFile,Status,CreatedOn,UpdatedOn)Values(@id,@documentTitle,@documentUploadedFiles,0,GETUTCDATE(),GETUTCDATE())
			select 1 as ret, 'Business Documents  uploaded successfuly!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'BusinessDocumentsUpdated_SuccessMessage' as resourceKey
		end
	end
	--update Business-Cover-Image
	else if(@mode=5)
	begin
		update BusinessOwners set CoverImage = @coverImage where UserLoginId = @id

		select 1 as ret, 'Business Cover Image Updated successfuly!' as responseMessage,  @id as Id,
		'BusinessPanel' as resourceFileName, 'BusinessCoverImageUpdated_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessService]
(
	@id bigint,
	@userLoginId bigint,
	@title nvarchar(max),
	@description nvarchar(max),
	@featuredImage nvarchar(max),
	@icon nvarchar(max),
	@status int,
	@submittedByLoginId bigint,
	@mode int
)
as 
begin
	
	-- insert business service detail by business-login-id
	if(@mode=1)
	begin
		insert into BusinessServices(UserLoginId,Title,Icon,FeaturedImage,Description,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		values(@userLoginId,@title,@icon,@featuredImage,@description,0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))
		
		select 1 as ret, 'Business Service added successfuly!' as responseMessage , 'BusinessPanel' as resourceFileName, 'BusinessServiceInserted_SuccessMessage' as resourceKey
	end
	-- update business service by businessOwner-login-id
	else if(@mode=2)
	 begin
		update BusinessServices set Title =@title, Description = @description,FeaturedImage = @featuredImage,Icon = @icon,Status = @status,UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE() where Id = @id 
			select 1 as ret, 'Business Service updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessServiceUpdated_SuccessMessage' as resourceKey
		end
	--To Delete the business service detail
	else if(@mode=3)
		begin
			update BusinessServices set IsDeleted = 1 where Id = @id 
			select 1 as ret, 'Business Service Deleted successfully!' as responseMessage ,'BusinessPanel' as resourceFileName, 'BusinessServiceDelete_SuccessMessage' as resourceKey
		end
	end

GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessSponsor]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessSponsor]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@sponsorTitle nvarchar(max),
	@sponsorLink nvarchar(max),
	@sponsorIcon nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
--insert Sponsors details
 if(@mode = 1)
 begin
     insert into BusinessContentSponsors(BusinessOwnerLoginId,SponsorTitle,SponsorIcon,SponsorLink,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)values(@businessOwnerLoginId,@sponsorTitle,@sponsorIcon,@sponsorLink,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
		
		select 1 as ret, 'Business Sponsor successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessSponsorCreatedMessage' as resourceKey 
  end
--Update Sponsor Data By Id 
else if(@mode = 2)
   begin
     update BusinessContentSponsors set SponsorTitle = @sponsorTitle,SponsorIcon= @sponsorIcon,SponsorLink=@sponsorLink,UpdatedByLoginId = @submittedByLoginId,UpdatedOn= GETUTCDATE() where Id = @id 
		
		select 1 as ret, ' Sponsor successfully Updated!' as responseMessage,'BusinessPanel' as resourceFileName, 'SponsorUpdatedMessage' as resourceKey 
   end

--Delete  Sponsor by Id
 else if(@mode=3)
      begin
      delete from BusinessContentSponsors
             where Id = @id;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'SponsorDetailsSuccessfullyDeleted' as resourceKey
		
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessStudents]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessStudents]
(
	@id bigint,
	@businessId bigint,
	@businessOwnerLoginId bigint,
	@studentId bigint,
	@studentUserLoginId bigint,
	@mode int
)
as
begin
	-- insert/link student if not exists by StudentLoginId and BusinessOwnerLoginId
	if(@mode=1)
	begin
		if not exists(select bs.Id from BusinessStudents bs inner join BusinessOwners bo on bs.BusinessOwnerId = bo.Id inner join Students s on bs.StudentId = s.Id where bo.UserLoginId = @businessOwnerLoginId and s.UserLoginId = @studentUserLoginId)
		begin

			set @studentId = (select s.Id from Students s where s.UserLoginId = @studentUserLoginId)
			set @businessId = (select bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId)

			insert into BusinessStudents(BusinessOwnerId, StudentId) values (@businessId, @studentId)

			select 1 as ret, 'student linked with Business!' as responseMessage
		end
		else 
		begin	
			select -1 as ret, 'Student already exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StudentAlreadyExists_ErrorMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessTermCondition]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateBusinessTermCondition]
(
    @id bigint,
    @userLoginId bigint,
    @profilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentTermCondition_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE BusinessContentTermCondition_PPCMeta
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content Term Condition Detail  Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentTermConditionUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO BusinessContentTermCondition_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Term Condition Detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentTermConditionCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessTimings]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessTimings]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@dayName nvarchar(max),
	@dayValue int,
	@isOpened int,
	@openingTime_12HoursFormat nvarchar(max),
	@openingTime_24HoursFormat nvarchar(max),
	@closingTime_12HoursFormat nvarchar(max),
	@closingTime_24HoursFormat nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--Insert Business-Timing Data
	if(@mode=1)
	begin
		--Set Business-Timing (according to the specific day)
		if exists(select bt.Id from BusinessTimings bt where bt.BusinessOwnerLoginId = @businessOwnerLoginId and bt.DayName = @dayName)
		begin
			update BusinessTimings set IsOpened = @isOpened, OpeningTime_12HoursFormat = @openingTime_12HoursFormat, OpeningTime_24HoursFormat = @openingTime_24HoursFormat,
			ClosingTime_12HoursFormat = @closingTime_12HoursFormat, ClosingTime_24HoursFormat = @closingTime_24HoursFormat, UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE()
			where BusinessOwnerLoginId = @businessOwnerLoginId and DayName = @dayName

		end
		else 
		begin
			insert into BusinessTimings(BusinessOwnerLoginId,DayName,DayValue,IsOpened,OpeningTime_12HoursFormat,OpeningTime_24HoursFormat,ClosingTime_12HoursFormat,ClosingTime_24HoursFormat,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId)
			values(@businessOwnerLoginId,@dayName,@dayValue,@isOpened,@openingTime_12HoursFormat,@openingTime_24HoursFormat,@closingTime_12HoursFormat,@closingTime_24HoursFormat,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)
		end

		select 1 as ret, 'Business timing has been successfully saved' as responseMessage ,'BusinessPanel' as resourceFileName, 'BusinessTiming_Saved_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinessVideos] 
(
	@id bigint,
	@userLoginId bigint,
	@videoTitle nvarchar(max),
	@videoLink nvarchar(max),
	@thumbNail nvarchar(max),
	@description nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@businessContentCategoryId bigint
)
as
begin
	--Insert Videos
	if(@mode = 1)
	begin
		insert into BusinessContentVideos(VideoTitle,VideoLink,BusinessOwnerLoginId,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,VideoThumbNail,BusinessContentVideoCategoryId,Description)
		Values(@videoTitle,@videoLink,@userLoginId,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@thumbNail,@businessContentCategoryId,@description)

		select 1 as ret, 'Video save successfully' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessVideos_Saved_SuccessMessage' as resourceKey
	end
	-- Delete Business-Video
	else if(@mode = 2)
	begin
		delete from BusinessContentVideos where Id = @id and BusinessOwnerLoginId = @userLoginId;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessVideos_Deleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinessWorldClassProgramDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinessWorldClassProgramDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@options nvarchar(max),
@image nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
    if(@mode=1)
    begin
     INSERT INTO BusinessContentWorldClassPrograms (UserLoginId, Title,Image,Options, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn,ProfilePageTypeId)
            VALUES (@userLoginId ,@title,@image,@options, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME),@profilePageTypeId);

            SELECT 1 AS ret,
                   'Business Content World Class Program Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentWorldClassProgramServiceCreated_SuccessMessage' AS resourceKey;
     end
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentWorldClassPrograms  SET Title = @title, Options = @options, Image = @image,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'Business Content World Class Program Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentWorldClassProgramUpdate_SuccessMessage' AS resourceKey;
	 end
	   -- Soft-Delete Business  Content World Class Program  Detail By Id
	else if(@mode=3)
	begin
		   Update BusinessContentWorldClassPrograms  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'Business Content  World Class Program deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentWorldClassProgramdeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinesUniversityDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateBusinesUniversityDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@profilePageTypeId bigint,
@qualification nvarchar (max),
@startDate nvarchar(max),
@endDate nvarchar(max),
@universityName nvarchar(max),
@universityLogo nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin

------------------To insert University Detail------------
    if(@mode=1)

    begin
     INSERT INTO BusinessUniversities (CreatedOn,UpdatedOn,ProfilePageTypeId,BusinessOwnerLoginId, Qualification,StartDate, EndDate,UniversityName, CreatedByLoginId, UpdatedByLoginId, IsDeleted, DeletedOn,UniversityLogo)
            VALUES (GETUTCDATE(),@submittedByLoginId,@profilePageTypeId,@businessOwnerLoginId, @qualification,  @startDate, @endDate, @universityName,@submittedByLoginId,@submittedByLoginId,0, CAST('1/1/2000' AS DATETIME),@universityLogo);

			
            SELECT 1 AS ret,
                   'Business Content University detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentUniversityCreated_SuccessMessage' AS resourceKey;
     end

	 else if(@mode=2)
	 begin
	     Update BusinessUniversities set Qualification = @qualification,StartDate = @startdate,EndDate = @endDate,UniversityLogo = @universityLogo ,UpdatedOn = @submittedByLoginId 
		 SELECT 1 AS ret,
                   'Business Content University detail Updated successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentUniversityUpdate_SuccessMessage' AS resourceKey;
	 end
	 -----------------------To Delete University Detail By Id
	 else if(@mode=3)
	 
	begin
	Update  BusinessUniversities set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'BusinessContentUniversity deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentUniversitydeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateBusinesUniversityDetail_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateBusinesUniversityDetail_PPCMeta]
(
@id bigint,
@profilePageTypeId bigint,
@businessOwnerLoginId bigint,
@universityId bigint,
@submittedByLoginId int,
@mode int
)
as
begin

------------------To insert University Detail------------
    if(@mode=1)

    begin
     INSERT INTO BusinessContentUniversity_PPCMeta(ProfilePageTypeId,BusinessOwnerLoginId,UniversityId,CreatedOn,UpdatedOn)
            VALUES (@profilePageTypeId,@businessOwnerLoginId,@universityId,GETUTCDATE(),@submittedByLoginId);

			
            SELECT 1 AS ret,
                   'Business Content University detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentUniversityCreated_SuccessMessage' AS resourceKey;
     end
	 -----------------------To Delete University Detail By Id
	 else if(@mode=2)
	 
	begin
	delete from BusinessContentUniversity_PPCMeta where  BusinessOwnerLoginId = @businessOwnerLoginId;
		   select 1 as ret, 'BusinessContentUniversity deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentUniversitydeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateCertificate]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateCertificate]
(
	@id bigint,
	@name nvarchar(max),
	@certificateIcon nvarchar(max),
	@shortDescription  nvarchar(max),
	@status int,
	@profilePageTypeId bigint,
	@certificateTypeKey nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@link nvarchar(max)
)
as
begin
	---To Add Certifciate Record
	if(@mode=1)
	begin
		  insert into Certificates (Name,CertificateIcon,ShortDescription,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,ProfilePageTypeId,CertificateTypeKey,Link) values(@name,@certificateIcon,@shortDescription,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@profilePageTypeId,@certificateTypeKey,@link)

		  select 1 as ret, 'Certificate Created successfuly!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'CertificateCreated_SuccessMessage' as resourceKey
		end	
		----To Update CertificateRecord By Id
	else if(@mode=2)
	begin
		update Certificates set Name = @name,CertificateIcon = @certificateIcon,ShortDescription = @shortDescription, Status = @status, ProfilePageTypeId = @profilePageTypeId, CertificateTypeKey = @certificateTypeKey, Link = @link, UpdatedOn= GETUTCDATE(),UpdatedByLoginId = @submittedByLoginId where Id = @id 

	    select 1 as ret, 'Certificate Updated successfuly!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'CertificateUpdated_SuccessMessage' as resourceKey
    end
	---- Soft-Delete Certificate Record By Id
	else if(@mode=3)
	begin
		Update Certificates set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

		select 1 as ret, 'Certificate  deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateDeleted_SuccessMessage' as resourceKey
	end
	---- Toggle Home-Page-Visibility Status for Certificate By Id - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select c.Id from Certificates c where c.Id = @id and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Certificate not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update Certificates set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClass]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateClass]
(
	@id bigint,
	@userLoginId bigint,
	@name nvarchar(max),
	@classDescription nvarchar(max),
	@startTime24HF nvarchar(max),
	@endTime24HF nvarchar(max),
	@classMode nvarchar(max),
	@studentMaxStrength int,
	@classDays nvarchar(max),
	@price decimal(18,2),
	@onlineClassLink nvarchar(max),
	@classOfflineAddress nvarchar(max),
	@classOfflineCountry nvarchar(max),
	@classOfflineCity nvarchar(max),
	@classOfflinePinCode nvarchar(max),
	@classOfflineLandMark nvarchar(max),
	@classOfflineState nvarchar(max),
	@classPriceType nvarchar(max),
	@isPaid int,
	@classOnlineURLLinkPassword nvarchar(max),
	@instructor bigint,
	@submittedByLoginId bigint,
	@mode int,
	@classImage nvarchar(max),
	@howToBookText nvarchar(max),
	@groupId bigint,
	@classType nvarchar(max),
	@classDuration int,
	@classLocationLatitude decimal(18,15),
	@classLocationLongitude decimal(18,15),
	@classDays_ShortForm nvarchar(max),
	@classCategoryTypeId bigint
)
as 
begin 
	-- Insert Class 
	if(@mode=1)
	begin
		--if exists (select c.Id from Classes c inner join BusinessOwners bo on c.BusinessOwnerLoginId =    bo.UserLoginId where c.Name = @name and  bo.UserLoginId = @userLoginId and c.IsDeleted = 0)
		--begin
		--	select -1 as ret, 'Class of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassNameAlreadyExist' as resourceKey 
		--end
		--else
		--begin
			insert into Classes(Name,Description,Price,ClassDays,ClassMode,BusinessOwnerLoginId,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn,OnlineClassLink,Address,Country,State,City,IsPaid,LandMark,ClassURLLinkPassword,ClassPriceType,Pincode,ClassImage,ClassType,HowToBookText,Latitude,Longitude,ClassDays_ShortForm,ClassCategoryTypeId)
			values(@name,@classDescription,@price,@classDays,@classMode,@submittedByLoginId,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,GETUTCDATE(),@onlineClassLink,@classOfflineAddress,@classOfflineCountry,@classOfflineState,@classOfflineCity,@isPaid,@classOfflineLandMark,@classOnlineURLLinkPassword,@classPriceType,@classOfflinePinCode,@classImage,@classType,@howToBookText,@classLocationLatitude,@classLocationLongitude,@classDays_ShortForm,@classCategoryTypeId)
			
			set @id = SCOPE_IDENTITY()
			select 1 as ret, 'Class successfully created' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassSuccessfullyCreated' as resourceKey, @id as Id
		--end
	end
	-- Update Class Data by Class ID
	else if(@mode =2)
	begin
		--if exists (select c.Id from Classes c inner join BusinessOwners bo on c.BusinessOwnerLoginId=    bo.UserLoginId where c.Name = @name and  UserLoginId = @userLoginId and c.Id != @id and c.IsDeleted =0)
		--begin
		--	select -1 as ret, 'Class of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassNameAlreadyExist' as resourceKey 
		--end
		--else
		--begin
			update Classes set Name= @name,Description = @classDescription,Price= @price,ClassDays=@classDays,ClassMode= @classMode,BusinessOwnerLoginId=@submittedByLoginId,UpdatedByLoginId= @submittedByLoginId,UpdatedOn= GETUTCDATE(),OnlineClassLink=@onlineClassLink ,Address = @classOfflineAddress,State=@classOfflineState,Country=@classOfflineCountry,City= @classOfflineCity,LandMark=@classOfflineLandMark,Pincode=@classOfflinePinCode,IsPaid=@isPaid,ClassURLLinkPassword= @classOnlineURLLinkPassword,ClassPriceType= @classPriceType, ClassImage = @classImage, ClassType = @classType, HowToBookText = @howToBookText,Latitude = @classLocationLatitude,Longitude=@classLocationLongitude, ClassDays_ShortForm = @classDays_ShortForm, ClassCategoryTypeId = @classCategoryTypeId where Id = @id 
			
			select 1 as ret, 'Class updated successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassSuccessfullyUpdated' as resourceKey 
		--end
	end
	-- Delete Class by Id
	else if(@mode=3)
	begin
		if not exists(select c.Id from Classes c inner join BusinessOwners bo on c.BusinessOwnerLoginId =    bo.UserLoginId where c.Id = @id and UserLoginId = @userLoginId and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Class not exists!' as responseMessage,'BusinessPanel' as resourceFileName,'ClassInvaildMessage' as resourceKey
		end
		else
		begin
			update Classes set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and BusinessOwnerLoginId = @userLoginId
			select 1 as ret, 'Class has been deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ClassDeleteMessage' as resourceKey
		end
	end
	---- Toggle Home-Page-Visibility Status of Class By Id  - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select c.Id from Classes c where c.Id = @id and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Class not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ClassInvaildMessage' as resourceKey
		end
		else
		begin
			Update Classes set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassBatches]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateClassBatches]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@classId bigint,
	@batchId bigint,
	@mode int
)
as
begin
	-- insert Class-Batch by Business-Owner
	if(@mode=1)
	begin
		if not exists(select Id from Classes c where c.BusinessOwnerLoginId = @businessOwnerLoginId and c.Id = @classId and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Class not exists!' as responseMessage,'BusinessPanel' as resourceFileName,'ClassInvaildMessage' as resourceKey
		end
		else 
		begin
			insert into ClassBatches(ClassId,BatchId) values(@classId,@batchId)

			select 1 as ret, 'Class-Batch inserted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName,'ClassBatch_Created_SuccessMessage' as resourceKey
		end
	end
	-- delete all batches by Class-Id of Business-Owner
	else if(@mode=2)
	begin
		if not exists(select Id from Classes c where c.BusinessOwnerLoginId = @businessOwnerLoginId and c.Id = @classId and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Class not exists!' as responseMessage,'BusinessPanel' as resourceFileName,'ClassInvaildMessage' as resourceKey
		end
		else 
		begin
			delete from ClassBatches where ClassId = @classId
			
			select 1 as ret, 'All class batches deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName,'ClassBatch_DeletedAll_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[sp_InsertUpdateClassBooking]
(
	@id bigint,
	@orderId bigint,
	@classId bigint,
	@userLoginId bigint,
	@classQRCode nvarchar(max),
	@classStartDate nvarchar(max),
	@classEndDate nvarchar(max),
	@mode int,
	@batchId bigint
)
as
begin
	declare @classBookingId bigint = 0;
	if(@mode = 1)
	begin
		insert into ClassBookings(OrderId,ClassId,StudentUserLoginId,ClassQRCode,Name,Description,Price,CreatedOn,UpdatedOn,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,ClassPriceType,BatchId)
		select @orderId, @classId, @userLoginId,@classQRCode, c.Name, c.Description, c.Price, GETUTCDATE(), GETUTCDATE(),@classStartDate,cast(@classStartDate as datetime),@classEndDate,cast(@classEndDate as datetime),c.ClassPriceType,@batchId from Classes c  where c.Id = @classId
		
		set @classBookingId = SCOPE_IDENTITY();
		select 1 as ret, 'Class successfully booked!' as responseMessage, @classBookingId as Id,'BusinessPanel' as resourceFileName, 'ClassBooked_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassCategoryType]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateClassCategoryType]
(
	@id bigint,
	@businessCategoryId bigint,
	@parentClassCategoryTypeId bigint,
	@name nvarchar(max),
	@image nvarchar(max),
	@isActive int,
	@submittedByLoginId bigint,
	@mode int,
	@description nvarchar(max)
)
as
begin
	-- Insert Class-Category-Type
	if(@mode=1)
	begin
		-- already category-name exists in same business-category
		if exists(select * from ClassCategoryTypes cct where cct.Name = @name and cct.BusinessCategoryId = @businessCategoryId and cct.IsDeleted = 0)
		begin
			select -1 as ret, 'Category-Type of same name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_NameAlreadyExist_ErrorMessage' as resourceKey 
		end
		-- insert 
		else 
		begin
			insert into ClassCategoryTypes(BusinessCategoryId,Name,Image,IsActive,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,ParentClassCategoryTypeId,Description) 
			values (@businessCategoryId,@name,@image,@isActive,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,cast('01/01/2000' as datetime),@parentClassCategoryTypeId,@description)

			select 1 as ret, 'Class-Category-Type created successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_Created_SuccessMessage' as resourceKey 
		end
	end
	-- Update Class-Category-Type by id
	else if(@mode=2)
	begin
		-- if Class-Category-Type not found
		if not exists(select Id from ClassCategoryTypes where Id = @id and IsDeleted = 0)
		begin
			select -1 as ret, 'Category-Type not exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_NotExist_ErrorMessage' as resourceKey 
		end
		else 
		begin
			update ClassCategoryTypes set [Name] = @name,ParentClassCategoryTypeId= @parentClassCategoryTypeId, BusinessCategoryId = @businessCategoryId, [Image] = @image, IsActive = @isActive, Description = @description, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Class-Category-Type updated successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_Updated_SuccessMessage' as resourceKey 
		end
	end
	-- Delete Class-Category-Type
	else if(@mode=3)
	begin
		-- if Class-Category-Type not found
		if not exists(select Id from ClassCategoryTypes where Id = @id and IsDeleted = 0)
		begin
			select -1 as ret, 'Category-Type not exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_NotExist_ErrorMessage' as resourceKey 
		end
		else 
		begin
			update ClassCategoryTypes set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

			select 1 as ret, 'Class-Category-Type deleted successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_Deleted_SuccessMessage' as resourceKey 
		end
	end
	-- Change Active Stataus
	else if(@mode=4)
	begin
		if not exists(select Id from ClassCategoryTypes where Id = @id and IsDeleted = 0)
		begin
			select -1 as ret, 'Category-Type not exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_NotExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			update ClassCategoryTypes set IsActive = (case IsActive when 1 then 0 else 1 end)
			where Id = @id

			select 1 as ret, 'Class-Category-Type status has been successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'ClassCategoryType_StatusUpdated_SuccessMessage' as resourceKey
		end
	end
	---- Toggle Home-Page-Visibility Status for Class-Category-Type By Id - [Super-Admin-Panel]
	else if(@mode=5)
	begin
		if not exists(select c.Id from ClassCategoryTypes c where c.Id = @id and c.IsDeleted = 0)
		begin
			select -1 as ret, 'Category not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update ClassCategoryTypes set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassFeature]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateClassFeature]
(
	@id bigint,
	@userLoginId bigint,
	@classId bigint,
	@title nvarchar(max),
	@description nvarchar(max),
	@icon nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--insert ClassFeature details
	if(@mode = 1)
	begin
		if(not exists(select Id from Classes where Id = @classId and BusinessOwnerLoginId = @userLoginId))
		begin
			select -1 as ret, 'Invalid Class Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_InvalidClassId_ErrorMessage' as resourceKey
		end
		else if exists (select Id from ClassFeatures cf where cf.Title = @title and cf.ClassId = @classId)
		begin
			select -1 as ret, 'Feature title already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_TitleAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			insert into ClassFeatures(ClassId,Title,Icon,Description,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)
			values(@classId,@title,@icon,@description,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
		
			select 1 as ret, 'Class Feature successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_Created_SuccessMessage' as resourceKey 
		end
	end
	--Update ClassFeature Data By Id 
	else if(@mode = 2)
	begin
		if(not exists (select cf.Id from ClassFeatures cf inner join Classes c on cf.ClassId = c.Id where cf.Id = @id and c.BusinessOwnerLoginId = @userLoginId))
		begin
			select -1 as ret, 'Record not found!' as responseMessage,'BusinessPanel' as resourceFileName, 'RecordNotFound_ErrorMessage' as resourceKey
		end
		else if exists (select Id from ClassFeatures cf where cf.Title = @title and cf.ClassId = @classId and cf.Id != @id)
		begin
			select -1 as ret, 'Feature title already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_TitleAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			update ClassFeatures set Title = @title, Icon= @icon, Description=@description, UpdatedByLoginId = @submittedByLoginId, UpdatedOn= GETUTCDATE() where Id = @id 
		
			select 1 as ret, 'Class Feature successfully updated!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_Updated_SuccessMessage' as resourceKey 
		end
	end
	--Delete Event Sponsor by Id
	else if(@mode=3)
	begin
		if(not exists (select cf.Id from ClassFeatures cf inner join Classes c on cf.ClassId = c.Id where cf.Id = @id and c.BusinessOwnerLoginId = @userLoginId))
		begin
			select -1 as ret, 'Record not found!' as responseMessage,'BusinessPanel' as resourceFileName, 'RecordNotFound_ErrorMessage' as resourceKey
		end
		else 
		begin
			delete from ClassFeatures where Id = @id and ClassId = @classId;

			select 1 as ret, 'Class Feature successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'ClassFeature_Deleted_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassicDanceProfileDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateClassicDanceProfileDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@subTitle nvarchar(max),
@classicImage nvarchar(max),
@image nvarchar(max),
@scheduleImage nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
   IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM ClassicDanceProfileDetail_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
              UPDATE ClassicDanceProfileDetail_PPCMeta  SET Title = @title,SubTitle = @subTitle, ClassicImage = @classicImage,Image = @image,ScheduleImage = @scheduleImage,UpdatedOn = GETUTCDATE()
            WHERE  UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business Content Classic Dance Profile Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentClassicDanceProfileUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
----To Insert Classic Dance Profile Detail 
        BEGIN
		 INSERT INTO ClassicDanceProfileDetail_PPCMeta (UserLoginId,ProfilePageTypeId,Title, SubTitle, ClassicImage, Image,ScheduleImage, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @profilePageTypeId, @title, @subTitle,@classicImage,@image,@scheduleImage, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content Classic Dance Profile Service successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentClassicDanceProfileCreated_SuccessMessage' AS resourceKey;
        END;
    END

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateClassPause]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateClassPause]
(
	@id bigint,
	@userLoginId bigint,
	@businessOwnerLoginId bigint,
	@classBookingId bigint,
	@pauseStartDate nvarchar(max),
	@pauseEndDate nvarchar(max),
	@pauseDays int,
	@reason nvarchar(max),
	@status int,
	@submittedByLoginId bigint,
	@mode int,
	@businessReply nvarchar(max)
	)
as
begin 
	declare @classBookingEndDate nvarchar(max);

    -- Insert Class Pause Detail 
    IF (@mode = 1)
    --begin
    --   SET @businessOwnerLoginId = (SELECT c.BusinessOwnerLoginId FROM Classes  c inner join ClassBookings cb on c.Id = cb.ClassId WHERE cb.Id = @classBookingId)

	   --SET @pauseDays = DATEDIFF(DAY, @pauseStartDate, @pauseEndDate);
        
    --    INSERT INTO ClassPauseRequests (UserLoginId,BusinessOwnerLoginId,ClassBookingId,PauseStartDate, PauseEndDate, PauseDays, Reason, Status, CreatedOn, UpdatedByLoginId, UpdatedOn,BusinessReply,IsDeleted,DeletedOn)
    --    VALUES (@userLoginId,@businessOwnerLoginId,@classBookingId,@pauseStartDate, @pauseEndDate, @pauseDays, @reason, 0, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(),@businessReply,0,Cast('1/1/2000' as datetime))
        
    --    SELECT 1 AS ret, 'Pause Class successfully created' AS responseMessage, 'BusinessPanel' AS resourceFileName, 'PauseClassCreated_SuccessMessage' AS resourceKey
    --end

    BEGIN
		-- Check if PauseStartDate fall between StartDate and EndDate in ClassBookings
        IF EXISTS ( SELECT 1 FROM ClassBookings cb 
			WHERE cb.Id = @classBookingId
            AND (@pauseStartDate BETWEEN cb.StartDate AND cb.EndDate)
		)
		BEGIN
			SET @pauseDays = DATEDIFF(DAY, @pauseStartDate, @pauseEndDate) + 1;
		
			select @classBookingEndDate = cb.EndDate from ClassBookings cb where cb.Id = @classBookingId

			-- check if Class Pause Days minimun 
			if(DATEDIFF(DAY, @pauseStartDate, @classBookingEndDate) < 5) 
			begin 
				SELECT -1 AS ret, 'Pause start date must be greater than 5 days before course/class end date.' AS responseMessage, 'BusinessPanel' AS resourceFileName, 'PauseMinDaysRequired_ErrorMessage' AS resourceKey;
			end
			else 
			begin

				SET @businessOwnerLoginId = (SELECT c.BusinessOwnerLoginId FROM Classes c INNER JOIN ClassBookings cb ON c.Id = cb.ClassId WHERE cb.Id = @classBookingId);

				INSERT INTO ClassPauseRequests (UserLoginId, BusinessOwnerLoginId, ClassBookingId, PauseStartDate, PauseEndDate, PauseDays, Reason, Status, CreatedOn, UpdatedByLoginId, UpdatedOn, BusinessReply, IsDeleted, DeletedOn)
				VALUES (@userLoginId, @businessOwnerLoginId, @classBookingId, @pauseStartDate, @pauseEndDate, @pauseDays, @reason, 1, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @businessReply, 0, CAST('1/1/2000' AS DATETIME));

				SELECT 1 AS ret, 'Pause Class successfully created' AS responseMessage, 'BusinessPanel' AS resourceFileName, 'PauseClassCreated_SuccessMessage' AS resourceKey;
			end
		END
		ELSE
		BEGIN
			-- Pause-Start-Date must lie in ClassBooking Start-Date and End-Date
			SELECT -1 AS ret, 'Pause dates conflict with existing class booking' AS responseMessage, 'ErrorMessage' AS resourceFileName, 'PauseClassConflict_Error' AS resourceKey;
		END
	END
	-- To Update  Business  Reply and Status Detail
	else if(@mode=2)
	begin
		-- if same email already exists for the business 
		if exists(select cp.Id  from ClassPauseRequests cp where cp.Id = @id and cp.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
		    update  ClassPauseRequests set Status = @status, BusinessReply = @businessReply where Id = @id
			select 1 as ret, 'Business Owner Updated PauseClass  successfuly!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'BusinessOwnerPauseClassStatusUpdated_SuccessMessage' as resourceKey
		end
		else 
		begin
		    	select -1 as ret, 'Sorry, Class pause request not exits!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound' as resourceKey
		end
    end
	---- to Update EndDate in ClassBooking table 
	else if(@mode=3)
	begin

		-- Convert @pauseDays to INT
		--SET @pauseDays = CAST(@pauseDays AS INT);

		--set variables
		select @classBookingId = cpr.ClassBookingId, @pauseStartDate = cpr.PauseStartDate, @pauseEndDate = cpr.PauseEndDate from ClassPauseRequests cpr where cpr.Id = @id

		-- Check if PauseStartDate and PauseEndDate fall between StartDate and EndDate in ClassBookings then simply extend pause days.
        IF EXISTS (SELECT 1 FROM ClassBookings cb
						WHERE cb.Id = @classBookingId
						AND (@pauseStartDate BETWEEN cb.StartDate AND cb.EndDate)
						and (@pauseEndDate BETWEEN cb.StartDate AND cb.EndDate)
		)
		begin
			set @pauseDays = DATEDIFF(DAY, @pauseStartDate, @pauseEndDate) + 1;

			-- Update ClassBookings to add @pauseDays to EndDate
			UPDATE ClassBookings SET EndDate =FORMAT(DATEADD(DAY, @pauseDays, EndDate), 'yyyy-MM-dd'), EndDate_DateTimeFormat = DATEADD(DAY, @pauseDays, EndDate) 
			WHERE Id = @classBookingId;

			select 1 as ret, 'Business Owner Updated PauseClass  successfuly!' as responseMessage, 
					'BusinessPanel' as resourceFileName , 'BusinessOwnerPauseClassStatusUpdated_SuccessMessage' as resourceKey
		end
		-- else calculate the days to extend for extension period
		else 
		begin

			set @classBookingEndDate = (select cb.EndDate from ClassBookings cb where cb.Id = @classBookingId)

			set @pauseDays = DATEDIFF(DAY, @pauseStartDate, @pauseEndDate) + 1;

			-- extra days eg. course-end-date is 31-Jan-23 and pause-end-date is 15-feb-23 then days diff b/w them
			declare @extraDaysInPausePeriod int = DATEDIFF(Day, @classBookingEndDate, @pauseEndDate)

			-- add extra days in Course-End-Date
			set @classBookingEndDate = FORMAT(DATEADD(Day, @extraDaysInPausePeriod, @classBookingEndDate), 'yyyy-MM-dd')

			-- extend Course Pause Days
			set @classBookingEndDate = FORMAT(DATEADD(DAY, @pauseDays, @classBookingEndDate), 'yyyy-MM-dd')

			UPDATE ClassBookings
			SET EndDate = @classBookingEndDate, EndDate_DateTimeFormat = cast(@classBookingEndDate as datetime)
			WHERE Id = @classBookingId;

			select 1 as ret, 'Business Owner Updated PauseClass  successfuly!' as responseMessage, 
					'BusinessPanel' as resourceFileName , 'BusinessOwnerPauseClassStatusUpdated_SuccessMessage' as resourceKey
		end
	end
	--- To Delete ClassPauseRequests detail By Id 
	else if (@mode=4)
	begin
	    update ClassPauseRequests set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

			select 1 as ret, 'Class Pause Request deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ClassPauseRequestDeleted_SuccessMessage' as resourceKey
	end
	--- To Update ClassPauseRequests detail by Id 
	else if(@mode=5)
	     begin
		      update ClassPauseRequests set PauseStartDate = @pauseStartDate,PauseEndDate = @pauseEndDate,PauseDays= @pauseDays,Reason = @reason, UpdatedOn = GETUTCDATE(),UpdatedByLoginId = @submittedByLoginId
			  where Id = @id

			select 1 as ret, 'Class Pause Request Updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ClassPauseRequestUpdated_SuccessMessage' as resourceKey
		 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateContactDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateContactDetails]
(
	@id bigint,
	@email nvarchar(max),
	@contactNumber nvarchar(max),
	@phoneNumber nvarchar(max),
	@address nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin	
	-- Insert or Update Contact Detials by SuperAdmin (used in contact us page) 
	if(@mode=1)
	begin 
		if ((select Count(*) from ContactDetails) <= 0)
		begin
			insert into ContactDetails(Email,ContactNumber1,ContactNumber2,Address,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId)
			values(@email,@contactNumber,@phoneNumber,@address,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)

			select 1 as ret, 'Contact Details inserted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'ContactDetailInserted_SuccessMessage' as resourceKey
		end
		else 
		begin
			 update ContactDetails set Email = @email, ContactNumber1 = @contactNumber, ContactNumber2 = @phoneNumber, Address = @address, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 

			 select 1 as ret, ' Contact Detailed updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'ContactDetailUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateCoupon]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateCoupon]
(
	@id bigint,
	@userLoginId bigint,
	@name nvarchar(max),
	@description nvarchar(max),
	@code nvarchar(max),
	@startDate nvarchar(max),
	@endDate nvarchar(max),
	@isfixedAmount int,
	@discountValue decimal(18,2),
	@totalUsed int,
	@discountFor int,
	@selectedStudent nvarchar (max),
	@submittedByLoginId bigint,
	@mode bigint
)
as 
begin
	-- Insert Coupon 
	if(@mode=1)
	begin
		  insert into Coupons (UserLoginId,Name,Description,Code,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,IsFixedAmount,DiscountValue,TotalUsed,DiscountFor,SelectedStudent,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		  values(@userLoginId,@name,@description,@code,@startDate,Cast('1/1/2000' as datetime),@endDate,Cast('1/1/2000' as datetime),@isfixedAmount,@discountValue,@totalUsed,@discountFor,@selectedStudent,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime)) 
		  select 1 as ret, 'Coupons created successfuly!' as responseMessage,
		  'BusinessPanel' as resourceFileName, 'CouponCreated_SuccessMessage' as resourceKey
	end
	-- Update Coupon
	else if(@mode=2)
	begin
		  Update Coupons set Name = @name, Description = @description, Code = @code,StartDate = @startDate,EndDate = @endDate,IsFixedAmount = @isfixedAmount,DiscountValue =@discountValue,TotalUsed = @totalUsed,DiscountFor=@discountFor,SelectedStudent=@selectedStudent,UpdatedOn=GETUTCDATE(),UpdatedByLoginId=@submittedByLoginId where Id = @id 

		   select 1 as ret, ' Coupons Detailed updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName,  'CouponUpdated_SuccessMessage' as resourceKey
	end
	-- Soft-Delete Coupon By Id
	else if(@mode=3)
	begin
		   Update Coupons  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'Coupons deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName,  'CouponDeleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateCouponConsumption]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateCouponConsumption]
(
	@id bigint,
	@couponId bigint,
	@consumerUserLoginId bigint,
	@mode int
)
as
BEGIN
	-- insert coupon consumption
	if(@mode=1)
	begin
		INSERT INTO [dbo].[CouponConsumptions]
           ([CouponId]
           ,[ConsumerUserLoginId]
           ,[ConsumptionDate]
           ,[CouponCode]
           ,[IsFixedAmountCoupon]
           ,[CouponDiscountValue]
           ,[CreatedOn]
           ,[UpdatedOn])
		 Select
			@couponId,
			@consumerUserLoginId,
			GETUTCDATE(),
			c.Code,
			c.IsFixedAmount,
			c.DiscountValue,
			GETUTCDATE(),
			GETUTCDATE()
		from Coupons c where c.Id = @couponId

		select 1 as ret, 'Coupon consumed successfully!' as responseMessage, 'VisiotrPanel' as resourceFileName, 'CouponConsumed_SucccessMessage' as resourceKey
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateCustomForm]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateCustomForm]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@customFormName nvarchar(max),
	@status int,
	@customFormId bigint,
	@customFormElementName nvarchar(max),
	@customFormElementType nvarchar(max),
	@customFormElementValue nvarchar(max),
	@customFormElementPlaceholder nvarchar(max),
	@customFormElementStatus int,
	@customFormElementId bigint,
	@customFormElementOptions nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as 
begin 
 
	declare @Custom_FormId bigint 
	declare @CustomForm_ElementId bigint
	declare @customForm_OptionId bigint
	--Insert Custom Form 
	if(@mode=1)
	begin
		insert into CustomForms(BusinessOwnerLoginId,CustomFormName,Status,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn)
			values(@businessOwnerLoginId,@customFormName,0,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime))
			set @Custom_FormId = SCOPE_IDENTITY()
			select 1 as ret, 'CustomForm successfully created' as responseMessage,@Custom_FormId as Id,'BusinessPanel' as resourceFileName, 'CustomFormCreated_SuccessMessage' as resourceKey
	 end
 --Insert Custom Form Element
else if(@mode=2)
	  begin
		insert into CustomFormElements(CustomFormId,CustomFormElementName,CustomFormElementType,CustomFormElementValue,CustomFormElementPlaceholder,CustomFormElementStatus,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn)
			values(@customFormId,@customFormElementName,@customFormElementType,@customFormElementValue,@customFormElementPlaceholder,0,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime))
			 set @CustomForm_ElementId = SCOPE_IDENTITY()
			select 1 as ret, 'CustomForm successfully created' as responseMessage,@CustomForm_ElementId as Id,'BusinessPanel' as resourceFileName, 'CustomFormCreated_SuccessMessage' as resourceKey
	 end
--Insert Custom Form Options
else if(@mode=3)
      begin
	  set @Custom_FormId = (select  cf.CustomFormId from CustomFormElements cf where cf.Id = @customFormElementId)
	      insert into CustomFormOptions(CustomFormElementId,CustomFormElementOptions,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn,CustomFormId)
		  values
		  (@customFormElementId,@customFormElementOptions,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime),@Custom_FormId)
		   set @customForm_OptionId = SCOPE_IDENTITY()
		  select 1 as ret, 'CustomForm successfully created' as responseMessage,@customForm_OptionId as Id ,'BusinessPanel' as resourceFileName, 'CustomFormCreated_SuccessMessage' as resourceKey
	  end
-- To Delete Custom Form Detail By Id 
else if (@mode = 4)
    begin
    begin TRY
        BEGIN TRANSACTION; -- Start a transaction to ensure atomicity

        UPDATE CustomFormOptions  SET IsDeleted = 1, DeletedOn = GETUTCDATE()  WHERE CustomFormElementId IN (
            SELECT Id
            FROM CustomFormElements
            WHERE CustomFormId = @id
        );

        UPDATE CustomFormElements SET IsDeleted = 1, DeletedOn = GETUTCDATE() WHERE CustomFormId = @id;

        UPDATE CustomForms  SET IsDeleted = 1, DeletedOn = GETUTCDATE()  WHERE Id = @id;

        COMMIT;
        
        -- Success message
        SELECT 1 as ret,
               'Custom Form detail deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName,'CustomForm_Deleted_SuccessMessage' as resourceKey;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        -- Error message
        SELECT -1 as ret,
               'Business error!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Business_ErrorMessage' as resourceKey;
    END CATCH
end

--- To Update/Delete Previous Detail and then Update Custom Form Detail By Id 
	else if(@mode=5)
	
		   begin
		   DELETE FROM CustomFormOptions
    WHERE CustomFormId = @id

		   Delete CustomFormElements where CustomFormId = @id
	
			UPDATE CustomForms  SET CustomFormName = @customFormName,UpdatedOn = GETUTCDATE()  WHERE Id = @id;
			--set @Form_OptionId = SCOPE_IDENTITY()
				select 1 as ret, 'CustomForm successfully updated' as responseMessage,'BusinessPanel' as resourceFileName, 'CustomFormUpdated_SuccessMessage' as resourceKey

			 end
--- TO Update the 	Custom Form Element Detail By Id 		
	else if(@mode=6)
		  begin	 
		   insert into CustomFormElements(CustomFormId,CustomFormElementName,CustomFormElementType,CustomFormElementValue,CustomFormElementPlaceholder,CustomFormElementStatus,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn)
			values(@id,@customFormElementName,@customFormElementType,@customFormElementValue,@customFormElementPlaceholder,0,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime))
			 set @CustomForm_ElementId = SCOPE_IDENTITY()
			select 1 as ret, 'CustomForm successfully updated' as responseMessage,@CustomForm_ElementId as Id,'BusinessPanel' as resourceFileName, 'CustomFormUpdated_SuccessMessage' as resourceKey
		end
------ To Update the Custom Form Options Detail By Id 
		else if(@mode=7)
			 begin
			    set @Custom_FormId = (select  cf.CustomFormId from CustomFormElements cf where cf.Id = @customFormElementId)
	      insert into CustomFormOptions(CustomFormElementId,CustomFormElementOptions,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,IsDeleted,DeletedOn,CustomFormId)
		  values
		  (@customFormElementId,@customFormElementOptions,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime),@Custom_FormId)
		   set @customForm_OptionId = SCOPE_IDENTITY()
		  select 1 as ret, 'CustomForm successfully updated' as responseMessage,@customForm_OptionId as Id ,'BusinessPanel' as resourceFileName, 'CustomFormUpdated_SuccessMessage' as resourceKey
	end
 

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateCustomFormRecord]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateCustomFormRecord]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@formId bigint,
	@applicantUserLoginId bigint,
	@formElementId bigint,
	@formElementName nvarchar(max),
	@formElementValue nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as 
begin 
	--Insert Custom Form Record
	if(@mode=1)
	begin
	  set @formElementId = (select  cf.CustomFormId from CustomFormElements cf where cf.CustomFormElementName = @formElementName and cf.CustomFormId =  @formId)
		insert into CustomFormRecords( FormId,BusinessOwnerLoginId,ApplicantUserLoginId,FormElementName,FormElementId,FormElementValue,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)
			values( @formId,@businessOwnerLoginId,@formelementName,@formElementId,@formElementValue,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
			select 1 as ret, 'CustomForm successfully created' as responseMessage,'VisitorPanel' as resourceFileName, 'CustomFormCreated_SuccessMessage' as resourceKey
	 end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEducationDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[sp_InsertUpdateEducationDetail]
(
@id bigint,
@userLoginId bigint,
@schoolName nvarchar(max),
@designation nvarchar(max),
@startMonth nvarchar(max),
@startYear nvarchar(max),
@endMonth nvarchar(max),
@endYear nvarchar(max),
@startDate nvarchar (max),
@endDate nvarchar(max),
@description nvarchar(max),
@grade nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
begin
if(@mode=1)
begin
      Insert into UserEducations(UserLoginId,SchoolName,Designation,Grade,StartMonth,StartYear,EndYear,StartDate,EndDate,Description,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,EndMonth)values(@userLoginId,@schoolName,@designation,@grade,@startMonth,@startYear,@endYear,@startDate,@endDate,@description,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@endMonth)
	  select 1 as ret, 'Business User Educations  Created successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessUserEducationsCreated_SuccessMessage' as resourceKey
end
else if(@mode=2)
     begin
		Update UserEducations set SchoolName = @schoolName, Designation =  @designation,StartMonth = @startMonth,StartYear = @startYear,EndMonth = @endMonth,EndYear = @endYear,StartDate = @startDate, EndDate = @endDate,Description =@description,Grade = @grade ,UpdatedOn = GETUTCDATE(),UpdatedByLoginId= @submittedByLoginId where Id = @id
				select 1 as ret, 'User Educations detail  Update successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'UserEducations_Update_SuccessMessage' as resourceKey 
     end
	 else if(@mode=3)
	       begin
		       update UserEducations set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

				select 1 as ret, 'User Educations detail  deleted successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'UserEducations_Deleted_SuccessMessage' as resourceKey 
		   end
 end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEnquiresFollowsup]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEnquiresFollowsup]
(
	@id bigint,
	@enquiryId bigint,
	@followedbyLoginId bigint,
	@comments nvarchar(max),
	@submittedByLoginId int,
	@mode int
)
as
begin
    if(@mode=1)
	begin
	    Insert into EnquiryFollowsUps(EnquiryId,FollowedbyLoginId,Comments,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		values(@enquiryId,@followedbyLoginId,@comments,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('01/01/2000' as datetime))
		
		select 1 as ret, 'Business Followup added successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessFollowupAdded_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEnquries]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEnquries]
(
	@id bigint,
	@userLoginId bigint,
	@name nvarchar(max),
	@gender nvarchar(100),
	@email nvarchar(max),
	@dob nvarchar(max),
	@phoneNumber nvarchar(max),
	@alternatePhoneNumber nvarchar(max),
	@address nvarchar(max),
	@activity nvarchar(max),
	@levelId bigint,
	@businessPlanId bigint,
	@classId bigint,
	@startFromDate nvarchar(max),
	@status nvarchar(max),
	@staffId bigint,
	@followUpDate nvarchar(max),
	@notes nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as 
begin
	declare @studentId bigint;
	declare @businessOwnerId bigint;
	-- insert enquiry by student-login-id
	if(@mode=1)
	begin

		insert into Enquiries(UserLoginId,Name,Gender,Email,DOB,DOB_DateTimeFormat,PhoneNumber,AlternatePhoneNumber,Address,Activity,LevelId,BusinessPlanId,ClassId,StartFromDate,StartFromDate_DateTimeFormat,Status,StaffId,FollowUpDate,FollowUpDate_DateTimeFormat,Notes,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,EnquiryStatus)
		values(@userLoginId,@name,@gender,@email,@dob,convert(datetime, @dob),@phoneNumber,@alternatePhoneNumber,@address,@activity,@levelId,@businessPlanId,@classId,@startFromDate,convert(datetime, @startFromDate),@status,@staffId,@followUpDate,convert(datetime, @followUpDate),@notes,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),0)
		
		select 1 as ret, 'Enquiry added successfuly!' as responseMessage , 'VisitorPanel' as resourceFileName, 'EnquiryInserted_SuccessMessage' as resourceKey
	end
	-- update enquiry by student-login-id
	else if(@mode=2)
	begin
		if not exists(select * from Enquiries e where e.UserLoginId = @userLoginId and e.Id = @id)
		begin
			select -1 as ret, 'Enquiry not found!' as responseMessage, 'VisitorPanel' as resourceFileName, 'EnquiryNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Enquiries set Name = @name, Gender = @gender, Email = @email, DOB = @dob, DOB_DateTimeFormat = convert(datetime, @dob), PhoneNumber = @phoneNumber, AlternatePhoneNumber = @alternatePhoneNumber, Address= @address, Activity = @activity, LevelId = @levelId, BusinessPlanId = @businessPlanId, ClassId = @classId, StartFromDate = @startFromDate, StartFromDate_DateTimeFormat = convert(datetime, @startFromDate), Status = @status, StaffId = @staffId, FollowUpDate = @followUpDate, FollowUpDate_DateTimeFormat= convert(datetime, @followUpDate), Notes = @notes, UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE() where Id = @id and UserLoginId = @userLoginId
			
			select 1 as ret, 'Enquiry updated successfully!' as responseMessage, 'VisitorPanel' as resourceFileName, 'EnquiryUpdated_SuccessMessage' as resourceKey
		end
	end
	-- delete enquiry by business-login-id
	else if(@mode=3)
	begin
		if not exists (select Id from Enquiries where Id = @id and UserLoginId = @userLoginId)
		begin
			select -1 as ret, 'Enquiry not found!' as responseMessage, 'VisitorPanel' as resourceFileName, 'EnquiryNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Enquiries set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and UserLoginId = @userLoginId

			select 1 as ret, 'Enquiry Delete Successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'EnquiryDeleted_SuccessMessage' as resourcekey
		end
	end
	-- update Enquiry Staff Followup details
	else if(@mode=4)
	begin
	    update Enquiries  set StaffId = @staffId , FollowUpDate = @followUpDate, FollowUpDate_DateTimeFormat= convert(datetime, @followUpDate),EnquiryStatus = 1, UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE() where Id = @id 
			
		select 1 as ret, 'Enquiry Follow up Updated Successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'EnquiryFollowUpdate_SuccessMessage' as resourcekey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEvent]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEvent]
(
	@id bigint,
	@userLoginId bigint,
	@title nvarchar(max),
	@startDate nvarchar(max),
	@endDate nvarchar(max),
	@startTime24HF nvarchar(max),
	@endTime24HF nvarchar(max),
	@isPaid int,
	@walkings int,
	@eventLocationURL nvarchar(max),
	@shortDescription nvarchar(max),
	@additionalInforamtion nvarchar(max),
	@ticketInforamtion nvarchar(max),
	@about nvarchar(max),
	@eventImage nvarchar(max),
	@price decimal(18,2),
	@submittedbyLoginId bigint,
	@mode int,
	@address nvarchar(max),
	@country nvarchar(max),
	@state nvarchar(max),
	@city nvarchar(max),
	@pinCode nvarchar(max),
	@landMark nvarchar(max),
	@latitude decimal(18,15),
	@longitude decimal(18,15),
	@eventCategoryId bigint
)
as
begin
	declare @_StartDate nvarchar(max)
	declare @_EndDate nvarchar(max)
	declare @end_DateTime datetime
	declare @start_Datetime datetime 
	if(@mode = 1)
	begin
		set @_StartDate = Convert(DATE,@startDate,23)
		set @start_Datetime = (SELECT DATEADD(day, DATEDIFF(day, 0, @_StartDate), @startTime24HF))
		set @_EndDate = Convert(DATE,@endDate,23)
		set @end_DateTime = (SELECT DATEADD(day, DATEDIFF(day, 0, @_EndDate), @endTime24HF))
		
		if exists (select Id from Events e where e.Title = @title and UserLoginId = @userLoginId and e.Id != @id and e.IsDeleted =0)
		begin
			select -1 as ret, 'Event of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventNameAlreadyExist' as resourceKey 
		end
		else
		begin
			insert into Events(UserLoginId,Title,StartDate,EndDate,StartTime_24HF,EndTime_24HF,IsPaid,Walkings,EventLocationURL,ShortDescription,AdditionalInformation,TicketInformation,AboutEvent,FeaturedImage,Price,StartDateTime,EndDateTime, CreatedByLoginId,CreatedOn,Address,Country,State,City,LandMark,Pincode,Latitude,Longitude,EventCategoryId)
			values(@userLoginId,@title,@_StartDate,@_EndDate,@startTime24HF,@endTime24HF,@isPaid,@walkings,@eventLocationURL,@shortDescription,@additionalInforamtion,@ticketInforamtion,@about,@eventImage,@price,@start_Datetime,@end_DateTime,@submittedbyLoginId,GETUTCDATE(),@address,@country,@state,@city,@landMark,@pinCode,@latitude,@longitude,@eventCategoryId)
			select 1 as ret, 'Event successfully created' as responseMessage,'BusinessPanel' as resourceFileName, 'EventSuccessfullyCreated' as resourceKey
		end
	end

	else if(@mode = 2)
	begin
		set @_StartDate = Convert(DATE,@startDate,23)
		set @start_Datetime = (SELECT DATEADD(day, DATEDIFF(day, 0, @_StartDate), @startTime24HF))
		set @_EndDate = Convert(DATE,@endDate,23)
		set @end_DateTime = (SELECT DATEADD(day, DATEDIFF(day, 0, @_EndDate), @endTime24HF))
		if(@id <= 0) or not exists(select Id from Events where Id = @id and UserLoginId = @userLoginId)
		begin
			select -1 as ret, 'Invalid Event Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'InvalidEventId' as resourceKey

		end
		else if exists (select Id from Events e where e.Title = @title and UserLoginId = @userLoginId and e.Id != @id and e.IsDeleted =0)
		begin
			select -1 as ret, 'Event of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventNameAlreadyExist' as resourceKey 
		end
		else
		begin
			update Events set Title = @title,StartDate =@startDate,EndDate = @endDate, StartTime_24HF= @startTime24HF, EndTime_24HF= @endTime24HF,IsPaid = @isPaid,Walkings= @walkings,EventLocationURL = @eventLocationURL,ShortDescription=@shortDescription,AdditionalInformation =@additionalInforamtion, TicketInformation = @ticketInforamtion,AboutEvent = @about,FeaturedImage = @eventImage,Price = @price,UpdatedByLoginId = @submittedbyLoginId,UpdatedOn = GETUTCDATE(), Address = @address,Country = @country,State= @state,City = @city,PinCode = @pincode,LandMark =@landMark ,Latitude = @latitude , Longitude = @longitude,StartDateTime = @start_Datetime, EndDateTime = @end_DateTime, EventCategoryId = @eventCategoryId 
			where Id = @id and UserLoginId = @userLoginId
			select 1 as ret, 'Event updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'EventSuccessfullyUpdated' as resourceKey 
		end
	end
	else if(@mode = 3)
	begin
		if(not exists(select e.Id from Events e   where e.Id = @id and e.UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Invalid Event Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'InvalidEventId' as resourceKey
		end
		else 
		begin
			update Events set IsDeleted = 1, DeletedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId
				where Id = @id and UserLoginId = @userLoginId;

			select 1 as ret, 'Event successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventsuccessfullyDeleted' as resourceKey
		end
	end
	---- Toggle Home-Page-Visibility Status for Event By Id - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select e.Id from Events e where e.Id = @id and e.IsDeleted = 0)
		begin
			select -1 as ret, 'Event not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update Events set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEventBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEventBooking]
(
	@id bigint,
	@orderId bigint,
	@eventId bigint,
	@userLoginId bigint,
	@eventQRCodeTicket nvarchar(max),
	@mode int
)
as
begin
	declare @eventBookingId bigint = 0;
	if(@mode = 1)
	begin
		insert into EventBookings(OrderId,EventId,UserLoginId,EventTicketQRCode,CreatedOn,UpdatedOn)
		values(@orderId, @eventId, @userLoginId, @eventQRCodeTicket, GETUTCDATE(), GETUTCDATE())
		
		set @eventBookingId = SCOPE_IDENTITY();
		select 1 as ret, 'Event successfully booked!' as responseMessage, @eventBookingId as Id,'BusinessPanel' as resourceFileName, 'EventBooked_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEventCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateEventCategory]
(
	@id bigint,
	@categoryName nvarchar(max),
	@status int,
	@mode int
)
as
begin
	-- insert event Category 
	if(@mode=1)
	BEGIN
		if exists(select * from EventCategories cct where cct.CategoryName = @categoryName and cct.IsDeleted = 0)
		begin
			select -1 as ret, 'Category name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'CategoryNameAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		begin
			insert into EventCategories(CategoryName,Status,CreatedOn,UpdatedOn,IsDeleted,DeletedOn)
			values(@categoryName,@status,GETUTCDATE(),GETUTCDATE(),0,Cast('1/1/2000' as datetime))

			select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
		end
    END
	-- update event Category
	else if(@mode=2)
	begin
		IF EXISTS (SELECT Id FROM EventCategories WHERE Id = @id)
        BEGIN
			if exists(select * from EventCategories cct where cct.CategoryName = @categoryName and cct.IsDeleted = 0 and cct.Id != @id)
			begin
				select -1 as ret, 'Category name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'CategoryNameAlreadyExist_ErrorMessage' as resourceKey 
			end
			else
			begin
				Update EventCategories set CategoryName = @categoryName,Status = @status, UpdatedOn = GETUTCDATE()
				where Id = @id
				select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
			end
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	-- delete event Category - Soft-Delete
	else if(@mode=3)
	begin
		IF EXISTS (SELECT Id FROM EventCategories WHERE Id = @id)
        BEGIN
            update EventCategories set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id
			select 1 as ret, 'Item deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Deleted_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	-- change event-category status
	else if(@mode=4)
	begin
		if not exists(select Id from EventCategories where Id = @id and IsDeleted = 0)
		begin
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		end
		else
		begin
			update EventCategories set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

			select 1 as ret, 'Event Category Status has been successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'EventCategoryType_StatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEventDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEventDetails]
(
@id bigint,
@userLoginId bigint,
@eventId bigint,
@name nvarchar(max),
@link nvarchar(max),
@detailsType nvarchar(max),
@designation nvarchar(max),
@image nvarchar(max),
@submittedByLoginId nvarchar(max),
@mode int
)
as 
begin
--Add Event Details According to DetailsType
if(@mode =1)
begin
--Add Event Details add when Details Type is Organizer
if(@detailsType='Organizer')
begin
if exists (select Id from EventDetails ed where ed.Name = @name and EventId = @eventId and DetailsType = @detailsType)
		begin
			select -1 as ret, 'Same name Organizer already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventOrganizerNameAlreadyExists' as resourceKey 
		end
		else
		begin
      insert into EventDetails(EventId,Name,Link,DetailsType,Designation,Image,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)values(@eventId,@name,@link,@detailsType,@designation,@image,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
   select 1 as ret, 'Organizer successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'OrganizerCreatedMessage' as resourceKey 
end
end
--Add Event Details add when Details Type is Host
if(@detailsType='Host')
begin
if exists (select Id from EventDetails ed where ed.Name = @name and EventId = @eventId and DetailsType = @detailsType)
		begin
			select -1 as ret, 'Same name Host already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventHostNameAlreadyExists' as resourceKey  
		end
		else
		begin
      insert into EventDetails(EventId,Name,Link,DetailsType,Designation,Image,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)values(@eventId,@name,@link,@detailsType,@designation,@image,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
   select 1 as ret, 'Host successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'HostCreatedMessage' as resourceKey 
end
end
--Add Event Details add when Details Type is Special Guest
if(@detailsType='SpecialGuest')
begin
if exists (select Id from EventDetails ed where ed.Name = @name and EventId = @eventId and DetailsType = @detailsType)
		begin
			select -1 as ret, 'Same name Special Guest already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventSpecialGuestNameAlreadyExists' as resourceKey  
		end
		else
		begin
      insert into EventDetails(EventId,Name,Link,DetailsType,Designation,Image,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)values(@eventId,@name,@link,@detailsType,@designation,@image,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
   select 1 as ret, 'Special Guest successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'SpecialGuestCreatedMessage' as resourceKey 
end
end
end

else if(@mode=2)
begin

		delete from EventDetails
            where Id = @id;
		
		select 1 as ret, 'Successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventDetailsSuccessfullyDeleted' as resourceKey 
	
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateEventSponsor]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateEventSponsor]
(
	@id bigint,
	@userLoginId bigint,
	@eventId bigint,
	@sponsorTitle nvarchar(max),
	@sponsorLink nvarchar(max),
	@sponsorIcon nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
--insert EventSponsors details
if(@mode = 1)
begin
if(not exists(select Id from Events where Id = @eventId and UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Invalid Event Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'InvalidEventId' as resourceKey
		end
		else if exists (select Id from EventSponsors es where es.SponsorTitle = @sponsorTitle and EventId = @eventId)
		begin
			select -1 as ret, 'Sponsor of same name already exists!' as responseMessage,'BusinessPanel' as resourceFileName, 'SponsorNameAlreadyExist' as resourceKey 
		end
		else
		begin
		insert into EventSponsors(EventId,SponsorTitle,SponsorIcon,SponsorLink,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)values(@eventId,@sponsorTitle,@sponsorIcon,@sponsorLink,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
		
		select 1 as ret, 'Event Sponsor successfully created!' as responseMessage,'BusinessPanel' as resourceFileName, 'SponsorCreatedMessage' as resourceKey 
		end
end
--Update EventSponsor Data By Id 
else if(@mode = 2)
begin
if(not exists(select es.Id from EventSponsors es inner join Events e on es.EventId = e.Id  where es.Id = @id and e.UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Invalid Event Id!' as responseMessage
		end
		else if exists (select Id from EventSponsors es where es.SponsorTitle = @sponsorTitle and EventId = @eventId and es.Id = @id)
		begin
			select -1 as ret, 'Sponsor of same name already exists!' as responseMessage 
		end
		else
		begin
		update EventSponsors set SponsorTitle = @sponsorTitle,SponsorIcon= @sponsorIcon,SponsorLink=@sponsorLink,UpdatedByLoginId = @submittedByLoginId,UpdatedOn= GETUTCDATE() where Id = @id 
		
		select 1 as ret, 'event successfully Updated!' as responseMessage
		end
end
--Delete Event Sponsor by Id
else if(@mode=3)
begin
if(not exists(select es.Id from EventSponsors es inner join Events e on es.EventId = e.Id  where es.Id = @id and e.UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Invalid Event Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'InvalidEventId' as resourceKey
		end
		else 
		begin
		delete from EventSponsors
            where Id = @id and EventId = @eventId;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'BusinessPanel' as resourceFileName, 'EventDetailsSuccessfullyDeleted' as resourceKey
		end
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateExamForm]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateExamForm]
(
	 @id bigint,
	 @userLoginId bigint,
	 @title   nvarchar(max),
	 @establishedYear nvarchar(max),
	 @startDate nvarchar(max),
	 @endDate nvarchar(max),
	 @secretaryNumber nvarchar(max),
	 @registrarNumber nvarchar(max),
	 @websiteLink nvarchar(max),
	 @email	 nvarchar(max),
	 @importantInstruction	nvarchar(max),
	 @examFormLogo nvarchar(max),
	 @nameWithAddress nvarchar(max),
	 @businessMasterId nvarchar(max),
	 @businessId bigint,
	 @centerNo bigint,
	 @submittedByLoginId bigint,
	 @status int,
	 @mode int
 )
 as 
 begin
	--- Insert Date into Exam 
	if(@mode= 1)
	begin
		insert into ExamForms(BusinessOwnerLoginId,Title,EstablishedYear,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,SecretaryNumber,RegistrarOfficeNumber,WebsiteLink,Email,ImportantInstruction,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn,DeletedOn,IsDeleted,ExamFormLogo,BusinessMasterId,NameWithAddress,Status,BusinessId,CenterNo)
		values(@userLoginId,@title,@establishedYear,@startDate, cast(@startDate as datetime), @endDate,cast(@endDate as datetime),@secretaryNumber,@registrarNumber,@websiteLink,@email,@importantInstruction,@submittedByLoginId,GETDATE(),@submittedByLoginId,GETDATE(),GETDATE(),0,@examFormLogo,@businessMasterId,@nameWithAddress,@status,@businessId,@centerNo) 
			
		select 1 as ret, 'Exam Form  successfully created!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamForm_Created_SuccessMessage' as resourceKey
	end
	--Update Exam data by id
	else if(@mode = 2)
	begin
		if(@id <= 0) or not exists(select Id from ExamForms where Id = @id and BusinessOwnerLoginId = @userLoginId)
		begin
			select -1 as ret, 'Invalid Exam Form Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'ExamForm_InvalidId_ErrorMessage' as resourceKey
		end
		else
		begin
			update ExamForms set BusinessOwnerLoginId = @userLoginId,Title= @title, EstablishedYear = @establishedYear,StartDate = @startDate,StartDate_DateTimeFormat = cast(@startDate as datetime),EndDate = @endDate , EndDate_DateTimeFormat = cast(@endDate as datetime),SecretaryNumber = @secretaryNumber,RegistrarOfficeNumber = @registrarNumber,Email = @email, WebsiteLink = @websiteLink,UpdatedByLoginId = @submittedByLoginId, UpdatedOn= GETUTCDATE(),ImportantInstruction = @importantInstruction,ExamFormLogo = @examFormLogo,BusinessMasterId = @businessMasterId,NameWithAddress = @nameWithAddress,Status = @status,BusinessId=@businessId,CenterNo=@centerNo where Id = @id and BusinessOwnerLoginId = @userLoginId

			select 1 as ret, 'Exam Form updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamForm_Updated_SuccessMessage' as resourceKey
		end
	end
	--Delete Exam form by id 
	else if(@mode = 3)
	begin
		if(@id <= 0) or not exists(select Id from ExamForms where Id = @id and BusinessOwnerLoginId = @userLoginId)
		begin
			select -1 as ret, 'Invalid Exam Form Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'ExamForm_InvalidId_ErrorMessage' as resourceKey
		end
		else
		begin
			update ExamForms set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and BusinessOwnerLoginId = @userLoginId

			select 1 as ret, 'Exam form has been deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamForm_Deleted_SuccessMessage' as resourceKey
		end
	end
	-- change exam form status
	else if(@mode=4)
	begin
	if(@id <= 0) or not exists(select Id from ExamForms where Id = @id and BusinessOwnerLoginId = @userLoginId)
		begin
			select -1 as ret, 'Invalid Exam Form Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'ExamForm_InvalidId_ErrorMessage' as resourceKey
		end
		else
		begin
			update ExamForms set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id and BusinessOwnerLoginId = @userLoginId

			select 1 as ret, 'Exam Form updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamForm_Updated_SuccessMessage' as resourceKey
		end
		
	end
 end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateExamFormSubmission]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateExamFormSubmission]
    @Id BIGINT,
    @ExamFormId BIGINT,
    @SessionYear NVARCHAR(255),
    @CandidateProfileImage NVARCHAR(MAX),
    @Category NVARCHAR(255),
    @UserMasterId NVARCHAR(255),
    @CurrentRollNo NVARCHAR(255),
    @CandidateName NVARCHAR(255),
    @CandidateFather NVARCHAR(255),
    @CandidateMother NVARCHAR(255),
    @PermanentAddress NVARCHAR(MAX),
    @PermanentPin BIGINT,
    @PermanentMobNo NVARCHAR(255),
    @PresentAddress NVARCHAR(MAX),
    @PresentPin BIGINT,
    @PresentMobNo NVARCHAR(255),
    @Nationality NVARCHAR(255),
    @AadharCardNo BIGINT,
    @DOB DATETIME,
    @Email NVARCHAR(255),
    @EduQualification NVARCHAR(255),
    @CurrentClass NVARCHAR(255),
    @CurrentSubject NVARCHAR(255),
    @CurrentCenterName NVARCHAR(255),
    @CurrentCenterCity NVARCHAR(255),
    @PreviousClass NVARCHAR(255),
    @PreviousSubject NVARCHAR(255),
    @PreviousYear INT,
    @PreviousRollNo BIGINT,
    @PreviousResult INT,
    @PreviousCenterName NVARCHAR(255),
    @Amount INT,
    @AmountInWord NVARCHAR(255),
    @NoOfAttached INT,
    @CertificateCollectFrom NVARCHAR(255),
    @CandidateSignature NVARCHAR(MAX),
    @CandidateGuradianSignature NVARCHAR(MAX),
    @CandidateGuradianName NVARCHAR(255),
    @BankDraftNo NVARCHAR(255),
    @BankDraftDate NVARCHAR(255),
    @PostalOrderNo NVARCHAR(255),
    @SuperintendentSignature NVARCHAR(MAX),
    @SuperintendentName NVARCHAR(255),
    @SuperintendentPinNo NVARCHAR(255),
    @SuperintendentPhoneNo NVARCHAR(255),
    @SuperintendentEmail NVARCHAR(255),
   @mode int
AS
BEGIN
	if(@mode=1)
	BEGIN
        -- Insert a new record
        INSERT INTO ExamFormSubmissions 
           (ExamFormId, SessionYear, CandidateProfileImage, Category, UserMasterId, CurrentRollNo, CandidateName, CandidateFather, CandidateMother, PermanentAddress, PermanentPin, PermanentMobNo, PresentAddress, PresentPin, PresentMobNo, Nationality, AadharCardNo, DOB, Email, EduQualification, CurrentClass, CurrentSubject, CurrentCenterName, CurrentCenterCity, PreviousClass, PreviousSubject, PreviousYear, PreviousRollNo, PreviousResult, PreviousCenterName, Amount, AmountInWord, NoOfAttached, CertificateCollectFrom, CandidateSignature, CandidateGuradianSignature, CandidateGuradianName, BankDraftNo, BankDraftDate, PostalOrderNo, SuperintendentSignature, SuperintendentName, SuperintendentPinNo, SuperintendentPhoneNo, SuperintendentEmail, CreatedOn,CreatedByLoginId, UpdatedOn,UpdatedByLoginId, IsDeleted, DeletedOn)
        VALUES 
           (@ExamFormId, @SessionYear, @CandidateProfileImage, @Category, @UserMasterId, @CurrentRollNo, @CandidateName, @CandidateFather, @CandidateMother, @PermanentAddress, @PermanentPin, @PermanentMobNo, @PresentAddress, @PresentPin, @PresentMobNo, @Nationality, @AadharCardNo, @DOB, @Email, @EduQualification, @CurrentClass, @CurrentSubject, @CurrentCenterName, @CurrentCenterCity, @PreviousClass, @PreviousSubject, @PreviousYear, @PreviousRollNo, @PreviousResult, @PreviousCenterName, @Amount, @AmountInWord, @NoOfAttached, @CertificateCollectFrom, @CandidateSignature, @CandidateGuradianSignature, @CandidateGuradianName, @BankDraftNo, @BankDraftDate, @PostalOrderNo, @SuperintendentSignature, @SuperintendentName, @SuperintendentPinNo, @SuperintendentPhoneNo, @SuperintendentEmail, GETDATE(),0, GETDATE(),0, 0, '')
		   select 1 as ret, 'Exam Form Inserted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_Inserted_SuccessMessage' as resourceKey
    END
	else if(@mode=2)
	begin
		-- Check if the record already exists
		IF EXISTS (SELECT 1 FROM ExamFormSubmissions WHERE Id = @Id)
		BEGIN
			-- Update the existing record
			UPDATE ExamFormSubmissions
			SET
				ExamFormId = @ExamFormId,
				SessionYear = @SessionYear,
				CandidateProfileImage = @CandidateProfileImage,
				Category = @Category,
				UserMasterId = @UserMasterId,
				CurrentRollNo = @CurrentRollNo,
				CandidateName = @CandidateName,
				CandidateFather = @CandidateFather,
				CandidateMother = @CandidateMother,
				PermanentAddress = @PermanentAddress,
				PermanentPin = @PermanentPin,
				PermanentMobNo = @PermanentMobNo,
				PresentAddress = @PresentAddress,
				PresentPin = @PresentPin,
				PresentMobNo = @PresentMobNo,
				Nationality = @Nationality,
				AadharCardNo = @AadharCardNo,
				DOB = @DOB,
				Email = @Email,
				EduQualification = @EduQualification,
				CurrentClass = @CurrentClass,
				CurrentSubject = @CurrentSubject,
				CurrentCenterName = @CurrentCenterName,
				CurrentCenterCity = @CurrentCenterCity,
				PreviousClass = @PreviousClass,
				PreviousSubject = @PreviousSubject,
				PreviousYear = @PreviousYear,
				PreviousRollNo = @PreviousRollNo,
				PreviousResult = @PreviousResult,
				PreviousCenterName = @PreviousCenterName,
				Amount = @Amount,
				AmountInWord = @AmountInWord,
				NoOfAttached = @NoOfAttached,
				CertificateCollectFrom = @CertificateCollectFrom,
				CandidateSignature = @CandidateSignature,
				CandidateGuradianSignature = @CandidateGuradianSignature,
				CandidateGuradianName = @CandidateGuradianName,
				BankDraftNo = @BankDraftNo,
				BankDraftDate = @BankDraftDate,
				PostalOrderNo = @PostalOrderNo,
				SuperintendentSignature = @SuperintendentSignature,
				SuperintendentName = @SuperintendentName,
				SuperintendentPinNo = @SuperintendentPinNo,
				SuperintendentPhoneNo = @SuperintendentPhoneNo,
				SuperintendentEmail = @SuperintendentEmail,
				UpdatedOn = GETDATE()
			WHERE Id = @Id
			select 1 as ret, 'Exam Form Updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_Updated_SuccessMessage' as resourceKey
		END
		select 0 as ret, 'Exam Form not found in database!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_NotFound_ErrorMessage' as resourceKey
   end
   
   else if(@mode=3)
	begin
    -- Check if the record already exists
    IF EXISTS (SELECT 1 FROM ExamFormSubmissions WHERE Id = @Id)
    BEGIN
	 -- Deleted the existing record
        UPDATE ExamFormSubmissions
        SET IsDeleted = 1,DeletedOn=GETDATE() where Id = @Id
		select 1 as ret, 'Exam Form Deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_Deleted_SuccessMessage' as resourceKey
	end

	select 0 as ret, 'Exam Form not found in database!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_NotFound_ErrorMessage' as resourceKey
	end
	else if(@mode =4)
	begin
	    UPDATE ExamFormSubmissions  SET CurrentRollNo = @CurrentRollNo
		WHERE Id = @Id
			select 1 as ret, 'Exam Form Updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ExamFormSubmission_Updated_SuccessMessage' as resourceKey
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateExpense]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateExpense]
(
	@id bigint,
	@userLoginId bigint,
	@expenseAmount nvarchar(max),
	@expenseDescription nvarchar(max),
	@expenseDate nvarchar(max),
	@remarks nvarchar(max),
	@status int,
	@submittedByLoginId bigint,
	@mode int
)
as 
begin 
	-- Insert Expense
	if(@mode=1)
	begin
	--select s.Id  from Staffs s inner join UserLogins ul on s.UserLoginId = ul.Id where s.Id = @userLoginId
		 insert into Expenses																			(UserLoginId,Amount,Description,ExpenseDate,ExpenseDate_DateTimeFormat,Remarks,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) values(@userLoginId,@expenseAmount,@expenseDescription,@expenseDate,Cast(@expenseDate as datetime),'',0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

		select 1 as ret, 'Expense Registered successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName , 'Expense_Registered_SuccessMessage' as resourceKey
	end 
	-- Update Expense by Id
	else if(@mode=2)
	begin
		update  Expenses set UserLoginId = @userLoginId,Amount= @expenseAmount,Description = @expenseDescription, ExpenseDate=@expenseDate, ExpenseDate_DateTimeFormat = Cast(@expenseDate as datetime),  UpdatedOn = GETUTCDATE(),UpdatedByLoginId=@submittedByLoginId where Id = @id 

		select 1 as ret, 'Expense Updated successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName,  'Expense_Updated_SuccessMessage' as resourceKey
	end
	-- Delete Expense by Id
	else if(@mode=3)
	begin
		Update Expenses set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

		select 1 as ret, 'Expense Record deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Expense_Deleted_SuccessMessage' as resourceKey
	end
	-- Update Expense Status and remarks by Id [from Business owner]
	else if(@mode=4)
	begin
		update Expenses set Status = @status, Remarks= @remarks 
			where Id = @id

		select 1 as ret, 'Expense status or remarks has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Expense_StatusOrRemaksUpdate_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateExperienceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[sp_InsertUpdateExperienceDetail]
(
@id bigint,
@userLoginId bigint,
@title nvarchar(max),
@companyName nvarchar(max),
@startMonth nvarchar(max),
@startYear nvarchar(max),
@endMonth nvarchar(max),
@endYear nvarchar(max),
@startDate nvarchar (max),
@endDate nvarchar(max),
@description nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
begin
if(@mode=1)
begin
      Insert into UserExperiences (UserLoginId,Title,CompanyName,StartMonth,StartYear,EndYear,StartDate,EndDate,Description,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,EndMonth)values(@userLoginId,@title,@companyName,@startMonth,@startYear,@endYear,@startDate,@endDate,@description,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@endMonth)
	  select 1 as ret, 'Business Experience  Created successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessExperienceCreated_SuccessMessage' as resourceKey
end
else if(@mode=2)
     begin
		Update UserExperiences set Title = @title, CompanyName =  @companyName,StartMonth = @startMonth,StartYear = @startYear,EndMonth = @endMonth,EndYear = @endYear,StartDate = @startDate, EndDate = @endDate,Description =@description ,UpdatedOn = GETUTCDATE(),UpdatedByLoginId= @submittedByLoginId where Id = @id
				select 1 as ret, 'Experience detail  Update successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'Experience_Update_SuccessMessage' as resourceKey 
     end
	 else if(@mode=3)
	       begin
		       update UserExperiences set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id

				select 1 as ret, 'Experience detail  deleted successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'Experience_Deleted_SuccessMessage' as resourceKey 
		   end
 end

GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateFamilyMember]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateFamilyMember]
(
	@id bigint,
	@userLoginId bigint,
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@relation nvarchar(max),
	@profileImage nvarchar(max),
	@gender int,
	@mode int
)
as
begin
	-- Insert Family Member
	if(@mode=1)
	begin
		insert into FamilyMembers(UserLoginId,FirstName,LastName,Relation,Gender,ProfileImage,CreatedOn,UpdatedOn)
		values(@userLoginId,@firstName,@lastName,@relation,@gender,@profileImage,GETUTCDATE(),GETUTCDATE())

		set @id = SCOPE_IDENTITY()

		select 1 as ret, 'Family member created successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'FamilyMemberCreated_SuccessMessage' as resourceKey, @id as Id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateGroup]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateGroup]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@name nvarchar(max),
	@description nvarchar(max),
	@groupType nvarchar(max),
	@groupImage nvarchar(max),
	@submittedbyLoginId bigint,
	@mode int
)
as
begin
	declare @businessOwnerId bigint
	declare @groupId bigint

	-- Insert Group
	if(@mode=1)
	begin
		-- set @businessOwnerId
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId

		if exists (select Id from Groups g where g.Name = @name and BusinessOwnerId = @businessOwnerId)
		begin
			select -1 as ret, 'Group of same name already exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupAlreadyExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
				
					insert into Groups(BusinessOwnerId,Name,Description,GroupType,GroupImage,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) 
					values(@businessOwnerId,@name,@description,@groupType,@groupImage,GETUTCDATE(),@submittedbyLoginId,GETUTCDATE(),@submittedbyLoginId,0,cast('01/01/2000' as datetime))

					set @groupId = (select @@IDENTITY);

					select 1 as ret, 'Group  successfully created!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupInserted_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select 1 as ret, 'Group not created! Exception occurred!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'GroupNotCreated_ExceptionOccuredMessage' as resourceKey
			END CATCH
		end
		
		
	end
	-- update group
	else if(@mode=2)
	begin
		--set @businessOwenrId
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId

		if(@id <= 0) or not exists(select Id from Groups where Id = @id and BusinessOwnerId = @businessOwnerId)
		begin
			select -1 as ret, 'Invalid Group Id!' as responseMessage,'BusinessPanel' as resourceFileName, 'InvalidGroupId_ErrorMessage' as resourceKey
		end
		else if exists (select Id from Groups g where g.Name = @name and BusinessOwnerId = @businessOwnerId and g.Id != @id)
		begin
			select -1 as ret, 'Group of same name already exists!' as responseMessage ,'BusinessPanel' as resourceFileName, 'GroupAlreadyExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
				
					-- update group details
					update Groups set Name = @name, Description = @description, GroupType = @groupType, GroupImage = @groupImage, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedbyLoginId where Id = @id and BusinessOwnerId = @businessOwnerId

					select 1 as ret, 'Group updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupUpdated_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select 1 as ret, 'Group not updated! Exception occurred!' as responseMessage,  @id as Id,
'BusinessPanel' as resourceFileName, 'GroupNotCreated_ExceptionOccuredMessage' as resourceKey
			END CATCH
		end
	end
	-- delete group
	else if(@mode=3)
	begin
		--set @businessOwnerId
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId

		if not exists(select Id from Groups where Id = @id and BusinessOwnerId = @businessOwnerId)
		begin
			select -1 as ret, 'Group not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupNotExits_ErrorMessage' as resourceKey
		end
		else
		begin
			update Groups set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and BusinessOwnerId = @businessOwnerId

			select 1 as ret, 'Group has been deleted successfully!' as responseMessage, 'BusinessPanel'as resourceFileName, 'GroupDelete_SuccessMessage' as resourceKey
		end 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateGroupMember]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateGroupMember]
(
	@id bigint,
	@groupId bigint,
	@memberLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- add member to group if not added by Business-Owner-Login-Id
	if(@mode=1)
	begin
		if not exists(select * from Groups g where g.Id = @groupId and g.BusinessOwnerId = (select Id from BusinessOwners where UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Group does not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupNotExist_ErrorMessage' as resourceKey
		end
		if exists(select * from GroupMembers gm where gm.GroupId = @groupId and gm.UserLoginId = @memberLoginId)
		begin
			select -1 as ret, 'User already added in this group' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupAlreadyAdded_SuccessMessage' as resourceKey
		end
		else
		begin
			insert into GroupMembers(GroupId, UserLoginId) values (@groupId, @memberLoginId)
			select 1 as ret, 'User added in the group successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupAdded_SuccessMessage' as resourceKey
		end
	end
	-- remove member from group by Business-Owner-Login-Id
	else if(@mode = 2)
	begin
		if not exists(select * from Groups g where g.Id = @groupId and g.BusinessOwnerId = (select Id from BusinessOwners where UserLoginId = @userLoginId))
		begin
			select -1 as ret, 'Group does not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'GroupNotExist_ErrorMessage' as resourceKey
		end
		else if not exists(select * from GroupMembers gm where gm.GroupId = @groupId and gm.UserLoginId = @memberLoginId)
		begin
			select -1 as ret, 'User does not exists in the group' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserGroupNotExist_ErrorMessage' as resourceKey
		end
		else
		begin
			delete from GroupMembers where GroupId = @groupId and UserLoginId = @memberLoginId
			select 1 as ret, 'User has been removed from the group!' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserGroupRemoved_ErrorMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateHomePageBannerItem]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateHomePageBannerItem]
(
	@id bigint,
	@type nvarchar(max),
	@image nvarchar(max),
	@video nvarchar(max),
	@status int,
	@submittedByLoginId int,
	@mode int,
	@text nvarchar(max),
	@link nvarchar(max)
)
as
begin
	-- insert home-page-Multiple-Image item
	if(@mode=1)
	BEGIN
        insert into HomePageBannerItems(Type,Image,Video,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,Text,Link)
		values(@type,@image,@video,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,@text,@link)

		select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
    END
	-- update home-page-Multiple-Image item
	else if(@mode=2)
	begin
		IF EXISTS (SELECT Id FROM HomePageBannerItems WHERE Id = @id)
        BEGIN
            Update HomePageBannerItems set Type = @type, Image = @image, Video = @video, Status = @status, Text = @text, Link = @link, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 
			where Id = @id
			select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	-- delete home-page-Multiple-Image item - Hard-Delete
	else if(@mode=3)
	begin
		IF EXISTS (SELECT Id FROM HomePageBannerItems WHERE Id = @id)
        BEGIN
            delete from HomePageBannerItems where Id = @id
			select 1 as ret, 'Item deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Deleted_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateHomePageClassCategorySection]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_InsertUpdateHomePageClassCategorySection]
(
	@id bigint,
	@classCategoryTypeId bigint,
	@status int,
	@submittedByLoginId int,
	@mode int
)
as
begin
	-- insert or update home-page-class-category-section [only one record]
	if(@mode=1)
	BEGIN
        IF EXISTS (SELECT top 1 Id FROM HomePageClassCategorySections)
        BEGIN
            Update HomePageClassCategorySections set ClassCategoryTypeId = @classCategoryTypeId, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 

			select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
        END
        ELSE
        BEGIN
           insert into HomePageClassCategorySections(ClassCategoryTypeId,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId)
			values(@classCategoryTypeId,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)

			select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
        END
    END
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateHomePageFeaturedCardSection]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateHomePageFeaturedCardSection]
(
	@id bigint,
	@type nvarchar(max),
	@title nvarchar(max),
	@description nvarchar(max),
	@buttonText nvarchar(max),
	@buttonLink nvarchar(max),
	@thumbnail nvarchar(max),
	@video nvarchar(max),
	@status int,
	@submittedByLoginId int,
	@mode int
)
as
begin
	-- insert or update home-page-featured-card by Type. [only one record per type]
	if(@mode=1)
	BEGIN
        IF EXISTS (SELECT Id FROM HomePageFeaturedCardSections WHERE [Type] = @type)
        BEGIN
            Update HomePageFeaturedCardSections set Title = @title, Description = @description, ButtonText = @buttonText, ButtonLink = @buttonLink, Thumbnail = @thumbnail, Video = @video, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 
			where [Type] = @type
			select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
        END
        ELSE
        BEGIN
           insert into HomePageFeaturedCardSections(Title,Description,Type,ButtonText,ButtonLink,Thumbnail,Video,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
			values(@title,@description,@type,@buttonText,@buttonLink,@thumbnail,@video,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

			select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
        END
    END
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateHomePageFeaturedVideo]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateHomePageFeaturedVideo]
(
	@id bigint,
	@title nvarchar(max),
	@description nvarchar(max),
	@thumbnail nvarchar(max),
	@video nvarchar(max),
	@status int,
	@submittedByLoginId int,
	@mode int
)
as
begin
	-- insert home-page-featured-video
	if(@mode=1)
	BEGIN
        insert into HomePageFeaturedVideos(Title,Description,Thumbnail,Video,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		values(@title,@description,@thumbnail,@video,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

		select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
    END
	-- update featured-video
	else if(@mode=2)
	begin
		IF EXISTS (SELECT Id FROM HomePageFeaturedVideos WHERE Id = @id)
        BEGIN
			if (@video != '') or exists(select Id from HomePageFeaturedVideos where Id = @id and (Video is not null and Video != ''))
			begin
				set @status = 1
			end
			else 
			begin
				set @status = 0
			end

            Update HomePageFeaturedVideos set Title = @title, Description = @description, Thumbnail = @thumbnail, Video = @video, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 
			where Id = @id

			select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
        END
		else 
		begin
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound' as resourceKey;
		end
	end
	-- delete featured-video
	else if(@mode=3)
	begin
		IF EXISTS (SELECT Id FROM HomePageFeaturedVideos WHERE Id = @id)
        BEGIN
            --delete from HomePageFeaturedVideos where Id = @id
			update HomePageFeaturedVideos set Video = '', Title = '', Description = '', Status = 0 where Id = @id

			select 1 as ret, 'Deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Deleted_SuccessMessage' as resourceKey;
        END
		else 
		begin
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound' as resourceKey;
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateHomePageMultipleItem]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateHomePageMultipleItem]
(
	@id bigint,
	@type nvarchar(max),
	@title nvarchar(max),
	@description nvarchar(max),
	@link nvarchar(max),
	@thumbnail nvarchar(max),
	@video nvarchar(max),
	@status int,
	@submittedByLoginId int,
	@mode int
)
as
begin
	-- insert home-page-Multiple-Image item
	if(@mode=1)
	BEGIN
        insert into HomePageMultipleItems(Title,Description,Type,Link,Thumbnail,Video,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		values(@title,@description,@type,@link,@thumbnail,@video,@status,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

		select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
    END
	-- update home-page-Multiple-Image item
	else if(@mode=2)
	begin
		IF EXISTS (SELECT Id FROM HomePageMultipleItems WHERE Id = @id)
        BEGIN
            Update HomePageMultipleItems set Title = @title, Description = @description, Link = @link, Thumbnail = @thumbnail, Video = @video, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId 
			where Id = @id
			select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	-- delete home-page-Multiple-Image item - Hard-Delete
	else if(@mode=3)
	begin
		IF EXISTS (SELECT Id FROM HomePageMultipleItems WHERE Id = @id)
        BEGIN
            delete from HomePageMultipleItems where Id = @id
			select 1 as ret, 'Item deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Deleted_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateInstructorMasterProfileAboutDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateInstructorMasterProfileAboutDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@subTitle nvarchar(max),
@description nvarchar(max),
@image nvarchar(max),
@buttonLink nvarchar(max),
@buttonText nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
if(@mode=1)
  
  BEGIN
        IF EXISTS (SELECT UserLoginId FROM BusinessContentMasterProfileInstructorAboutSection_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            Update BusinessContentMasterProfileInstructorAboutSection_PPCMeta set Title = @title,SubTitle = @subTitle,Description = @description, Image = @image , ButtonText = @buttonText,ButtonLink = @buttonLink, UpdatedOn = GETUTCDATE() where UserLoginId = @userLoginId		
  select 1 as ret, 'Business Content Instructor About Update successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentInstructorAboutUpdate_SuccessMessage' as resourceKey;
        END
        ELSE
        BEGIN
           insert into BusinessContentMasterProfileInstructorAboutSection_PPCMeta (UserLoginId,ProfilePageTypeId,Title,SubTitle,Description,Image,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,ButtonLink,ButtonText)
	values(@userLoginId,@profilePageTypeId,@title,@subTitle,@description,@image,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,@buttonLink,@buttonText)

	select 1 as ret, 'Business Content Instructor About successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinesscontentInstructorAboutCreated_SuccessMessage' as resourceKey
        END;
    END
end
GO
/****** Object:  StoredProcedure [dbo].[SP_InsertUpdateInstructorOtherInformation]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[SP_InsertUpdateInstructorOtherInformation]
(
    @id bigint,
    @userLoginId bigint,
    @ProfilePageTypeId bigint,
    @title nvarchar(max),
    @description nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM InstructorContentDescription_PPCMeta WHERE UserLoginId = @userLoginId)
        BEGIN
            UPDATE InstructorContentDescription_PPCMeta
            SET Title = @title,
                Description = @description,
                UpdatedOn = GETUTCDATE()
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'BusinessContentAbout Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentAboutUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO InstructorContentDescription_PPCMeta (UserLoginId, ProfilePageTypeId, Title, Description, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @ProfilePageTypeId, @title, @description, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business Content About successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentAboutCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateItemFeatures]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateItemFeatures]
(
	@id bigint,
	@itemId bigint,
	@itemType nvarchar(max),
	@featureId bigint,
	@isLimited int,
	@limit int, 
	@mode int
)
as
begin
	-- Insert Item Features
	if(@mode=1)
	begin
		-- insert the new records
		insert into ItemFeatures(ItemId,ItemType,FeatureId,IsLimited,Limit,CreatedOn,UpdatedOn)
		values(@itemId,@itemType,@featureId,@isLimited,@limit,GETUTCDATE(),GETUTCDATE())

		select 1 as ret, 'Inserted item features successfully!' as responseMessage
	end
	-- Delete all Item Fetatures by Item-Id and Item-Type
	else if(@mode=2)
	begin
		-- delete existing records of same type
		delete from ItemFeatures where ItemId = @itemId and ItemType = @itemType

		select 1 as ret, 'Deleted item features successfully!' as responseMessage
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateLastRecordIdDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateLastRecordIdDetails]
(
	@id bigint,
	@key nvarchar(max),
	@prefix nvarchar(max),
	@value int,
	@mode int
)
as
begin

	-- Get new Training-Certificate-Number
	if(@mode=1)
	begin
		
		SELECT @value = lr.Value + 1, @prefix = lr.Prefix, @id = lr.Id FROM LastRecordIdDetails lr WHERE lr.[Key] = 'training_certificate'
		UPDATE LastRecordIdDetails SET Value = @value WHERE Id = @id

		select @prefix + @value as CertificateNumber
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateLicense]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateLicense]
(
	@id bigint,
	@certificateId bigint,
	@title nvarchar(max),
	@certificateImage nvarchar(max),
	@licenseLogoImage nvarchar(max),
	@signatureImage nvarchar(max),
	@description  nvarchar(max),
	@isPaid int,
	@status int,
	@commissionType nvarchar(max),
	@commissionValue decimal(18,2),
	@timePeriod nvarchar(max),
	@achievingOrder int,
	@licensePermissions nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@signature2Image nvarchar(max),
	@signature3Image nvarchar(max),
	@price decimal(18,2),
	@gstPercent decimal(18,2),
	@gstDescription nvarchar(max),
	@minSellingPrice decimal(18,2),
	@licenseCertificateHTMLContent nvarchar(max),
	@isLicenseToTeach int,
	@licenseToTeach_Type nvarchar(max),
	@licenseToTeach_DisplayName nvarchar(max)
)
as
begin
	---To Add License Record
	if(@mode=1)
	begin
		if exists(select Id from Licenses l where l.CertificateId = @certificateId and l.Title = @title)
		begin
			select -1 as ret, 'License of same title already exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'LicenseTitleAlreadyExist_ErrorMessage' as resourceKey
		end
		else if exists(select l.Id from Licenses l where l.AchievingOrder = @achievingOrder and l.CertificateId = @certificateId)
		begin
			select -1 as ret, 'License Achieving Order already exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'LicenseAchievingOrderAlreadyExists_ErrorMessage' as resourceKey, @id as Id
		end
		else
		begin
			insert into Licenses(CertificateId,Title,CertificateImage,SignatureImage,LicenseLogo,Description,IsPaid,Status,CommissionType,CommissionValue,TimePeriod,AchievingOrder,LicensePermissions,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,Signature2Image,Signature3Image,Price,MinSellingPrice,GSTPercent,GSTDescription,LicenseCertificateHTMLContent,IsLicenseToTeach,LicenseToTeach_Type,LicenseToTeach_DisplayName) values(@certificateId,@title,@certificateImage,@signatureImage,@licenseLogoImage,@description,@isPaid,@status,@commissionType,@commissionValue,@timePeriod,@achievingOrder,@licensePermissions,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@signature2Image,@signature3Image,@price,@minSellingPrice,@gstPercent,@gstDescription,@licenseCertificateHTMLContent,@isLicenseToTeach,@licenseToTeach_Type,@licenseToTeach_DisplayName)

			set @id = SCOPE_IDENTITY()

			select 1 as ret, 'License Created successfuly!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'LicenseCreated_SuccessMessage' as resourceKey, @id as Id
		end
	end	
	--Update License Record By Id
	else if(@mode=2)
	begin
		if exists(select Id from Licenses l where l.CertificateId = @certificateId and l.Title = @title and Id != @id)
		begin
			select -1 as ret, 'License of same title already exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'LicenseTitleAlreadyExist_ErrorMessage' as resourceKey
		end
		else if exists(select l.Id from Licenses l where l.AchievingOrder = @achievingOrder and l.CertificateId = @certificateId and l.Id != @id)
		begin
			select -1 as ret, 'License Achieving Order already exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'LicenseAchievingOrderAlreadyExists_ErrorMessage' as resourceKey, @id as Id
		end
		else
		begin
			update Licenses set CertificateId = @certificateId, Title = @title, CertificateImage = @certificateImage, SignatureImage = @signatureImage, LicenseLogo = @licenseLogoImage, Description = @description, IsPaid = @isPaid, Status = @status, CommissionType = @commissionType, CommissionValue = @commissionValue, TimePeriod = @timePeriod, AchievingOrder = @achievingOrder, LicensePermissions = @licensePermissions, Signature2Image = @signature2Image, Signature3Image = @signature3Image, Price = @price, GSTPercent = @gstPercent, GSTDescription = @gstDescription, MinSellingPrice = @minSellingPrice, LicenseCertificateHTMLContent = @licenseCertificateHTMLContent, IsLicenseToTeach = @isLicenseToTeach,LicenseToTeach_Type = @licenseToTeach_Type,LicenseToTeach_DisplayName =@licenseToTeach_DisplayName, UpdatedOn = GETUTCDATE(),UpdatedByLoginId = @submittedByLoginId where Id = @id 

			select 1 as ret, 'License Updated successfuly!' as responseMessage, 'SuperAdminPanel' as resourceFileName , 'LicenseUpdated_SuccessMessage' as resourceKey, @id as Id
		end
    end
	-- Soft-Delete License Record By Id
	else if(@mode=3)
	begin
		Update Licenses set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

		select 1 as ret, 'License deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'LicenseDeleted_SuccessMessage' as resourceKey, @id as Id
	end
	-- change Status by License-Id
	else if(@mode=4)
	begin
		Update Licenses set Status = (Case when status = 1 then 0 else 1 end) where Id = @id

		select 1 as ret, 'License status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'LicenseStatusUpdated_SuccessMessage' as resourceKey, @id as Id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateLicenseBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateLicenseBooking]
(
	@id bigint,
	@orderId bigint,
	@businessOwnerLoginId bigint,
	@licenseId bigint,
	@quantity int,
	@status int,
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	declare @licenseBookingId bigint = 0;
	-- Insert Licnese Booking Data
	if(@mode = 1)
	begin
			insert into LicenseBookings(OrderId,LicenseId,BusinessOwnerLoginId,Quantity,LicenseIsPaid,LicensePrice,LicenseCommissionType,LicenseCommissionValue,LicenseGSTPercent,LicenseGSTDescription,LicenseMinSellingPrice,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
			select @orderId, @licenseId, @businessOwnerLoginId, @quantity, l.IsPaid, l.Price, l.CommissionType, l.CommissionValue,l.GSTPercent,l.GSTDescription,l.MinSellingPrice,@status, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, cast('01/01/2000' as datetime) from Licenses l  where l.Id = @licenseId
		
			set @licenseBookingId = SCOPE_IDENTITY();
			select 1 as ret, 'License successfully booked!' as responseMessage, @licenseBookingId as Id,'BusinessPanel' as resourceFileName, 'LicenseBooked_SuccessMessage' as resourceKey
	end
	-- Update License booking Status by Super-Admin only if its in pending state
	else if(@mode=2)
	begin
		update LicenseBookings set Status = @status where Id = @id and Status <= 1
		select 1 as ret, 'License booking request approved successfully!' as responseMessage, @licenseBookingId as Id,'SuperAdminPanel' as resourceFileName, 'LicenseBookingRequestApproved_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMainPlan]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateMainPlan]
(
	@id bigint,
	@superAdminLoginId bigint,
	@planDurationTypeKey nvarchar(max),
	@name nvarchar(max),
	@description nvarchar(max),
	@price decimal(18,2),
	@status int,
	@compareAtPrice decimal(18,2),
	@discount decimal(18,2),
	@planPermission nvarchar(max),
	@planImage nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
AS
BEGIN

	-- Insert Main Plan
	if(@mode=1)
	begin
	    --set @UserLoginId=0;
					
		if exists(select mp.Id from MainPlans mp where mp.Name = @name and mp.IsDeleted = 0)
		begin
			select -1 as ret, 'Sorry, same plan name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'AlreadyPlanNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				
				insert into MainPlans(UserLoginId,Name,Price,PlanDurationTypeKey,Description,CompareAtPrice,Discount,PlanPermission,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,Status,PlanImage)
				values(@superAdminLoginId,@name,@price,@planDurationTypeKey,@description,@compareAtPrice,@discount,@planPermission,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),@status,@planImage)

				select 1 as ret, 'Plan created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'PlanCreated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Plan not created. Something went wrong!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'PlanNotCreated_ErrorMessage' as resourceKey
				end
			END CATCH
		end
	end
	---- Update Main Plan
	else if(@mode=2)
	begin
		-- update
		if exists(select mp.Id from MainPlans mp where mp.Name = @name and mp.IsDeleted = 0 and mp.Id != @id)
		begin
			select -1 as ret, 'Sorry, same plan name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'AlreadyPlanNameExists_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
					update MainPlans set PlanDurationTypeKey = @planDurationTypeKey, Name = @name, Price = @price, Description = @description,  Status = @status, CompareAtPrice = @compareAtPrice, PlanImage = @planImage, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id and UserLoginId = @superAdminLoginId

					select 1 as ret, 'Plan updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'PlanUpdated_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Plan not updated. Something went wrong!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'PlanNotUpdated_ErrorMessage' as resourceKey
				end
			END CATCH
		end
	end
	-- Delete Main Plan by Id
	else if(@mode=3)
	begin
		
		update MainPlans set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and UserLoginId = @superAdminLoginId

		select 1 as ret, 'Plan deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'PlanDeleted_SuccessMessage' as resourceKey
	end
	---- Toggle Home-Page-Visibility Status for Business/Instructor By Id - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select mp.Id from MainPlans mp where mp.Id = @id and mp.IsDeleted = 0)
		begin
			select -1 as ret, 'Main Plan not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update MainPlans set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMasterProExtraInformationService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateMasterProExtraInformationService]
(
	@id bigint,
	@userLoginId bigint,
	@title nvarchar(max),
	@pdf nvarchar(max),
	@description nvarchar(max),
	@mode int
)
as 
begin
	
	-- insert masterpro service detail by business-login-id
	if(@mode=1)
	begin
		insert into MasterProExtraInformations(UserLoginId,Title, ShortDescription)
		values(@userLoginId,@title,@description)
		
		select 1 as ret, 'MasterPro Details  added successfuly!' as responseMessage , 'BusinessPanel' as resourceFileName, 'MasterProServiceInserted_success' as resourceKey
	end
	-- update masterpro service by businessOwner-login-id
	else if(@mode=2)
	begin
		update MasterProExtraInformations set Title =@title, ShortDescription = @description where Id = @id 
			select 1 as ret, 'MasterPro Details  updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'MasterProServiceUpdated_Success' as resourceKey
	end
	--To Delete the masterpro service detail
	else if(@mode=3)
	begin
		delete from  MasterProExtraInformations where Id = @id
		select 1 as ret, 'MasterPro Details Deleted successfully!' as responseMessage ,'BusinessPanel' as resourceFileName, 'MasterProServiceDelete_Success' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMasterProPdf]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateMasterProPdf] 
(
	@id bigint,
	@userLoginId bigint,
	@imageTitle nvarchar(max),
	@image nvarchar(max),
	@thumbnailpdf nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--Insert Image
	if(@mode = 1)
	begin
		insert into MasterProContentPdfs(ImageTitle,Image,ThumbnailPdf,BusinessOwnerLoginId,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn)
		Values(@imageTitle,@image,@thumbnailpdf,@userLoginId,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE())
		
		select 1 as ret, 'Image saved successfully' as responseMessage,'BusinessPanel' as resourceFileName, 'BusinessImages_Created_SuccessMessage' as resourceKey
	end
	--Delete Business-Images List
	else if(@mode = 2)
	begin
		delete from MasterProContentPdfs where Id = @id and BusinessOwnerLoginId = @userLoginId;

		select 1 as ret, 'Pdf deleted successfully!' as responseMessage,'BusinessPanel' as resourceFileName, 'MasterProPdf_Deleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMasterProResume_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_InsertUpdateMasterProResume_PPCMeta]
   @id BIGINT,
   @userLoginId BIGINT,
    @age NVARCHAR(MAX),
    @nationality NVARCHAR(MAX),
	@uploadCV NVARCHAR(MAX),
    @freelance NVARCHAR(MAX),
    @skype NVARCHAR(MAX),
    @languages NVARCHAR(MAX),
	@mode int
AS
begin
	IF (@mode = 1)
	BEGIN
		IF EXISTS (SELECT Id FROM MasterProResume_PPCMeta WHERE UserLoginId =@userLoginId)
		BEGIN
			UPDATE MasterProResume_PPCMeta
			SET UserLoginId = @userLoginId,
				Age = @age,
				Nationality = @nationality,
				UploadCV = @uploadCV,
				Freelance = @freelance,
				Skype = @skype,
				Languages = @languages
			WHERE UserLoginId =@userLoginId;

			SELECT 1 AS ret, 'Data Updated successfully!' AS responseMessage, 'BusinessPanel' AS resourceFileName, 'Update_SuccessMessage' AS resourceKey;
		END
		ELSE
		BEGIN
			INSERT INTO MasterProResume_PPCMeta (UserLoginId, Age, Nationality,UploadCV, Freelance, Skype, Languages)
			VALUES (@userLoginId, @age, @nationality,@uploadCV, @freelance, @skype, @languages);

			SELECT 1 AS ret, 'Data added successfully!' AS responseMessage, 'BusinessPanel' AS resourceFileName, 'Added_SuccessMessage' AS resourceKey;
		END
	END
	else if(@mode=3)
	BEGIN
		DELETE FROM MasterProResume_PPCMeta WHERE Id = @Id
		select 1 as ret, 'Data Deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Delete_SuccessMessage' as resourceKey
	END
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMemberShipPlanDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE procedure [dbo].[sp_InsertUpdateMemberShipPlanDetail]
(
@id bigint,
@userLoginId bigint,
@profilePageTypeId bigint,
@title nvarchar(max),
@image nvarchar(max),
@submittedByLoginId int,
@mode int
)
as
begin
---To Add MemberShip Plan Detail 
    if(@mode=1)
    begin
     INSERT INTO BusinessContentMembershipPlan_PPCMeta (UserLoginId,ProfilePageTypeId,Title, Image, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn)
            VALUES (@userLoginId,@profilePageTypeId, @title, @image, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME));

            SELECT 1 AS ret,
                   'Business Content MemberShip Package Detail  successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentMemberShipPackageCreated_SuccessMessage' AS resourceKey;
     end
	 ---To Update MemberShip Plan Detail 
	 else if(@mode=2)
	 begin
	      UPDATE BusinessContentMembershipPlan_PPCMeta  SET Title = @title,Image = @image,UpdatedOn = GETUTCDATE()
            WHERE  Id = @id;

            SELECT 1 AS ret,
                   'Business Content MemberShip Package  Detail  Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessContentMemberShipPackageUpdate_SuccessMessage' AS resourceKey;
	 end
	 ---To Delete MemberShip Plan Detail 
	else if(@mode=3)
	begin
		   Update BusinessContentMembershipPlan_PPCMeta  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		   select 1 as ret, 'Business Content MemberShip Package deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BusinessContentMemberShipPackagedeleted_SuccessMessage' as resourceKey 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMenu]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateMenu]
(
	@id bigint,
	@parentMenuId bigint,
	@name nvarchar(max),
	@image nvarchar(max),
	@pageLink nvarchar(max),
	@isActive int,
	@tag nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@isShowOnHomePage int,
	@sortOrder int
)
as
begin
	declare @sortNumber int = @sortOrder;

	-- Insert Menu Item
	if(@mode = 1)
	begin
		if exists(select * from Menus m where m.Name = @name)
		begin
			select -1 as ret, 'Menu of same name already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'Menu_SameNameAlreadyExit_ErrorMessage' as resourceKey
		end
		else if exists(select * from Menus m where m.Tag = @tag)
		begin
			select -1 as ret, 'Same tag already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'Menu_SameTagAlreadyExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			if(@sortOrder = '' or @sortOrder = 0)
			begin
				select @sortNumber = Max(SortOrder) from Menus where IsDeleted = 0 
				set @sortNumber = @sortNumber + 1;
			end

			insert into Menus(ParentMenuId,Name,Image,PageLink,IsActive,Tag,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,IsShowOnHomePage,SortOrder) values (@parentMenuId,@name,@image,@pageLink,@isActive,@tag,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('2000-01-01' as datetime),@isShowOnHomePage,@sortNumber)

			select 1 as ret, 'Menu added successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuAdded_SuccessMessage' as resourceKey
		end
	end
	-- Update Menu Item
	else if(@mode = 2)
	begin
		if exists(select * from Menus m where m.Name = @name and m.Id != @id)
		begin
			select -1 as ret, 'Menu of same name already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'Menu_SameNameAlreadyExit_ErrorMessage' as resourceKey
		end
		else if exists(select * from Menus m where m.Tag = @tag and m.Tag != @tag)
		begin
			select -1 as ret, 'Same tag already exists!' as responseMessage, 'SuperAdminPanel'as resourceFileName, 'Menu_SameTagAlreadyExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			update Menus set ParentMenuId = @parentMenuId, Name = @name, Image = @image, PageLink = @pageLink, IsActive = @isActive, Tag = @tag, IsShowOnHomePage = @isShowOnHomePage, SortOrder = @sortOrder, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id
			select 1 as ret, 'Menu updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuUpdated_SuccessMessage' as resourceKey
		end
	end
	-- Delete Menu
	else if(@mode = 3)
	begin
		if not exists(select * from Menus m where m.Id = @id)
		begin
			select -1 as ret, 'Menu not found!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Menus set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id
			select 1 as ret, 'Menu deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuDeleted_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateMessage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateMessage]
(
	@id bigint,
	@senderUserLoginId bigint,
	@receiverUserLoginId bigint,
	@messagebody nvarchar(max),
	@senderStatus int,
	@receiverStatus bigint,
	@submittedByLoginId int,
	@mode int
)
as 
begin 
	-- Add Message
	if(@mode=1)
	begin
         insert into Messages (SenderUserLoginId, ReceiverUserLoginId,Messagebody,SenderStatus,ReceiverStatus,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn) values (@senderUserLoginId,@receiverUserLoginId,@messagebody,@senderStatus,@receiverStatus,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

		 select 1 as ret, 'Message Sent Successfully ! ' as responseMessage, 'BusinessPanel' as resourceFileName, 'MessageSent_SuccessMessage' as resourceKey
     end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateNotification]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateNotification]
(
	@id bigint,
	@fromUserLoginId bigint,
	@notificationType nvarchar(max),
	@notificationUsersList nvarchar(max),
	@notificationTitle nvarchar(max),
	@notificationText nvarchar(max),
	@submittedbyLoginId bigint,
	@mode int,
	@itemId bigint,
	@itemTable nvarchar(max),
	@isNotificationLinkable int
)
as
begin
	declare @notificationRecordId bigint

	-- Insert Notification
	if(@mode=1)
	begin

		BEGIN TRY
			BEGIN TRANSACTION
				
				insert into NotificationRecords(FromUserLoginId,NotificationType,NotificationTitle,NotificationText,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,ItemId,ItemTable,IsNotificationLinkable) 
				values(@fromUserLoginId,@notificationType,@notificationTitle,@notificationText,GETUTCDATE(),@submittedbyLoginId,GETUTCDATE(),@submittedbyLoginId,0,cast('01/01/2000' as datetime),@itemId,@itemTable,@isNotificationLinkable)

				set @notificationRecordId = (select @@IDENTITY);

				insert into Notifications(NotificationRecordId,UserLoginId,IsRead,CreatedOn,UpdatedOn)
				select @notificationRecordId as NotificationRecordId, splitdata AS UserLoginId, 0 as IsRead, GETUTCDATE() as CreatedOn, GETUTCDATE() as UpdatedOn
					FROM dbo.fnSplitString(@notificationUsersList, ',')

				select 1 as ret, 'Notification successfully created!' as responseMessage, 'BusinessPanel' as resourcePanel, 'NotificationCreated_SuccessMessage' as resourceKey
			COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK
			select 1 as ret, 'Notification not created! Exception occurred!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'NotificationNotCreated_ErrorMessage' as resourceKey
		END CATCH
		
	end
	-- update notification
	else if(@mode=2)
	begin
		if(@id <= 0) or not exists(select Id from NotificationRecords where Id = @id and FromUserLoginId = @fromUserLoginId)
		begin
			select -1 as ret, 'Invalid Notification Id!' as responseMessage, 'BusinessPanel' as resourceFileName, 'InvalidNotificationId_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
				
					-- update notification record details
					update NotificationRecords set NotificationTitle = @notificationTitle, NotificationText = @notificationText, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedbyLoginId where Id = @id and FromUserLoginId = @fromUserLoginId
				 
					-- delete all notifications sent before
					delete from Notifications where NotificationRecordId = @id

					-- recreate user notifications
					insert into Notifications(NotificationRecordId,UserLoginId,IsRead,CreatedOn,UpdatedOn)
					select @id as NotificationRecordId, splitdata AS UserLoginId, 0 as IsRead, GETUTCDATE() as CreatedOn, GETUTCDATE() as UpdatedOn
						FROM dbo.fnSplitString(@notificationUsersList, ',')

					select 1 as ret, 'Notification updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'NotificationUpdated_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select 1 as ret, 'Notification not updated! Exception occurred!' as responseMessage,  @id as Id, 'BusinessPanel' as reesourceFileName, 'NotificationNotUpdated_ErrorMessage' as resourceKey
			END CATCH
		end
	end
	-- delete notification
	else if(@mode=3)
	begin
		update NotificationRecords set IsDeleted = 1, DeletedOn = GETUTCDATE() where FromUserLoginId = @fromUserLoginId and Id = @id

		select 1 as ret, 'Notification deleted successfully!' as responseMessage, 'BusinessPanel' as reesourceFileName, 'NotificationDeleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateNotificationTransfer]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateNotificationTransfer]
(
	@id bigint,
	@transferrequestedId bigint,
	@transferSenderId nvarchar (max),
	@notificationMessage nvarchar (max),
	@mode int
)
as
begin
	if(@mode=1)
	begin
	    insert into NotificationTransfers(TransferrequestId,TransferSenderId,NotificationMessage,Status,CreatedOn,UpdatedOn)values(@transferrequestedId,@transferSenderId,@notificationMessage,0,GETUTCDATE(),GETUTCDATE())
		select 1 as ret, 'Notification sent successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'Notificationsent_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateOrder]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateOrder]
(
	@id bigint,
	@userLoginId bigint,
	@itemId bigint,
	@itemType nvarchar(max),
	@onlinePayment int,
	@paymentMethod nvarchar(max),
	@couponId bigint,
	@couponDiscountValue decimal(18,2),
	@totalDiscount decimal(18,2),
	@isTaxable int,
	@gst decimal(18,2),
	@totalAmount decimal(18,2),
	@status int,
	@mode int,
	@ownerUserLoginId bigint
)
as
begin
	declare @orderId bigint = 0

	if(@mode=1)
	begin
		insert into Orders(UserLoginId,ItemId,ItemType,OnlinePayment,PaymentMethod,CouponId,CouponDiscountValue,TotalDiscount,IsTaxable,GST,TotalAmount,Status,CreatedOn,UpdatedOn,OwnerUserLoginId)
		values (@userLoginId,@itemId,@itemType,@onlinePayment,@paymentMethod,@couponId,@couponDiscountValue,@totalDiscount,@isTaxable,@gst,@totalAmount,@status,GETUTCDATE(),GETUTCDATE(),@ownerUserLoginId)

		set @orderId = SCOPE_IDENTITY()
		select 1 as ret, 'Order created successfully!' as responseMessage, @orderId as Id, 'BusinessPanel' as resourceFileName, 'OrderCreated_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdatePaymentDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdatePaymentDetails]
(
@id bigint,
@userLoginId bigint,
@paymentModeType nvarchar(max),
@paymentModeDetail nvarchar(max),
@mode int
)
as 
begin
	--insert payment Details
	if(@mode=1)
	begin
		insert into PaymentDetails(UserLoginId,PaymentModeType,PaymentModeDetail)
		values(@userloginId,@paymentModeType,@paymentModeDetail)

		select 1 as ret, 'Payment Details created successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'PaymentDetailsCreated_SuccessMessage' as resourceKey
	end
	--insert payment details for UPI 
	 else if(@mode=2)
	begin
		insert into PaymentDetails(UserLoginId,PaymentModeType,PaymentModeDetail)
		values(@userloginId,@paymentModeType,@paymentModeDetail)

		select 1 as ret, 'UPI Id created successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'UPIIdCreated_SuccessMessage' as resourceKey
	end
	--insert payment details for Paytm
	else if(@mode=3)
	begin
		insert into PaymentDetails(UserLoginId,PaymentModeType,PaymentModeDetail)
		values(@userloginId,@paymentModeType,@paymentModeDetail)

		select 1 as ret, 'Paytm created successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'UPIIdCreated_SuccessMessage' as resourceKey
	 end
	---Update UPI---
	else if(@mode=4)
	begin 
		 update PaymentDetails set PaymentModeDetail = @paymentModeDetail where PaymentModeType = 'UPI' and UserLoginId=@userLoginId
		 select 1 as ret, ' UPI Id update successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'UPIIdUpdated_SuccessMessage' as resourceKey
	end
	----Update Edit Card Detail----
	else if(@mode=5)
	begin 
		 update PaymentDetails set PaymentModeDetail = @paymentModeDetail where PaymentModeType = 'CCAvenue' and Id=@id and UserLoginId = @userLoginId
		 select 1 as ret, ' Card details update successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'CardDetailsUpdated_SuccessMessage' as resourceKey
	end
	--update UPI payment details by id 
	else if(@mode=6)
	begin 
		 update PaymentDetails set PaymentModeDetail = @paymentModeDetail where PaymentModeType = 'UPI' and Id=@id and UserLoginId = @userLoginId
		 select 1 as ret, ' UPI Id Update successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'UPIIdUpdated_SuccessMessage' as resourceKey
	end
	--Update Paytm Payment details by id 
	else if(@mode=7)
	begin 
		 update PaymentDetails set PaymentModeDetail = @paymentModeDetail where PaymentModeType = 'Paytm' and Id=@id and UserLoginId = @userLoginId
		 select 1 as ret, 'Paytm Id Update successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'PaytmIdUpdate_SuccessMessage' as resourceKey
	end
	--Delete Payment Details by Id 
	else if(@mode=8)
	begin
		   delete  from PaymentDetails  where Id = @id and UserLoginID= @UserLoginId
		   select 1 as ret, 'Payment details deleted successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'PaymentDetailsdeleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdatePaymentResponse]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdatePaymentResponse]
(
	@id bigint,
	@orderId bigint,
	@provider nvarchar(50),
	@responseStatus nvarchar(50),
	@transactionID nvarchar(max),
	@amount decimal(18,2),
	@isApproved int,
	@description nvarchar(max),
	@method nvarchar(50),
	@submittedByLoginId  bigint,
	@mode int
)
as
begin
	declare @paymentResponseId bigint = 0
	if(@mode = 1)
	begin
		insert into PaymentResponses(OrderId,Provider,DateStamp,ResponseStatus,TransactionID,Amount,Approved,Description,Method,CreatedByLoginId,CreatedOn,UpdatedOn)
		values(@orderId, @provider, GETUTCDATE(), @responseStatus, @transactionID, @amount, @isApproved, @description, @method, @submittedByLoginId, GETUTCDATE(), GETUTCDATE())
		set @paymentResponseId = SCOPE_IDENTITY()
		select 1 as ret, 'Payment Response created successfully!' as responseMessage, @paymentResponseId as Id,'BusinessPanel' as resourceFileName, 'PaymentResponse_SuccessMessage' as resourceKey
	end
	-- Update isApproved status by Payemnt-Respone id
	else if(@mode=2)
	begin
		update PaymentResponses set Approved = @isApproved where Id = @id

		select 1 as ret, 'Payment Response Approved status updated successfully!' as responseMessage, @paymentResponseId as Id,'SuperAdmin' as resourceFileName, 'PaymentResponseApprovedStatusUpdate_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdatePlanBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdatePlanBooking]
(
	@id bigint,
	@orderId bigint,
	@planId bigint,
	@studentUserLoginId bigint,
	@planStartDate nvarchar(max),
	@planEndDate nvarchar(max),
	@mode int
)
as
begin
	declare @planBookingId bigint = 0;
	if(@mode = 1)
	begin
		insert into PlanBookings(OrderId,PlanId,StudentUserLoginId,PlanName,PlanDescription,PlanPrice,PlanCompareAtPrice,PlanDurationTypeId,PlanDurationTypeName,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,CreatedOn,UpdatedOn)
		select @orderId, @planId, @studentUserLoginId, bp.Name, bp.Description, bp.Price, bp.CompareAtPrice, bp.BusinessPlanDurationTypeId, bpdt.Value, @planStartDate, cast(@planStartDate as datetime), @planEndDate, cast(@planEndDate as datetime), GETUTCDATE(), GETUTCDATE() from BusinessPlans bp inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id where bp.Id = @planId
		
		set @planBookingId = SCOPE_IDENTITY();
		select 1 as ret, 'Plan successfully booked!' as responseMessage, @planBookingId as Id,'BusinessPanel' as resourceFileName, 'PlanBooked_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateQueries]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_InsertUpdateQueries]
(
	@id bigint,
	@studentLoginId bigint,
	@businessOwnerLoginId bigint,
	@title nvarchar(max),
	@description nvarchar(max),
	@replyBody nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as 
begin
	declare @studentId bigint;
	declare @businessOwnerId bigint;
	-- insert enquiry by student-login-id
	if(@mode=1)
	begin
		select @studentId = s.Id from Students s where s.UserLoginId = @studentLoginId
		set @businessOwnerId = @businessOwnerLoginId
		insert into Queries(StudentId,BusinessOwnerId,Title,Description,CreatedOn,IsReplied,ReplyBody,RepliedOn,IsDeleted,DeletedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId)
		values(@studentId,@businessOwnerId,@title,@description,GETUTCDATE(),0,'',Cast('1/1/2000' as datetime),0,Cast('1/1/2000' as datetime),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)
		
		select 1 as ret, 'Query added successfuly!' as responseMessage , 'VisitorPanel' as resourceFileName, 'QueryInserted_SuccessMessage' as resourceKey
	end
	-- update enquiry by student-login-id
	else if(@mode=2)
	begin
		select @studentId = s.Id from Students s where s.UserLoginId = @studentLoginId
		set @businessOwnerId = @businessOwnerLoginId
		if not exists(select * from Queries e where e.StudentId = @studentId and e.Id = @id)
		begin
			select -1 as ret, 'Query not found!' as responseMessage, 'VisitorPanel' as resourceFileName, 'QueryNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Queries set BusinessOwnerId = @businessOwnerId, Title =@title, Description = @description, UpdatedByLoginId = @submittedByLoginId, UpdatedOn = GETUTCDATE() where Id = @id and StudentId = @studentId
			select 1 as ret, 'Query updated successfully!' as responseMessage, 'VisitorPanel' as resourceFileName, 'QueryUpdated_SuccessMessage' as resourceKey
		end
	end
	-- Add Reply to Query by Business Owner
	else if(@mode=3)
	begin
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId

		if not exists(select * from Queries e where e.BusinessOwnerId = @businessOwnerId and e.Id = @id)
		begin
			select -1 as ret, 'Query not found!' as responseMessage, 'BusinessPanel' as resourceFileName, 'QueryNotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			update Queries set IsReplied = 1, RepliedOn = GETUTCDATE(), ReplyBody = @replyBody where Id = @id and BusinessOwnerId = @businessOwnerId
			select 1 as ret, 'Replied successfully!' as responseMessage ,'BusinessPanel' as resourceFileName, 'QueryReplied_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateRatingReview]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateRatingReview]
(
@id bigint,
@itemId bigint,
@rating int,
@reviewBody  nvarchar(max),
@reviewerUserLoginId bigint,
@mode int
)
as 
begin
 if (@mode=1)
 begin
       insert into Reviews (ItemId,ItemType,Rating,ReviewBody,ReviewerUserLoginId,CreatedOn,UpdatedOn,IsDeleted,DeletedOn,Status) values(@itemId,'Instructor',@rating,@reviewBody,@reviewerUserLoginId,GETUTCDATE(),GETUTCDATE(),0,Cast('1/1/2000' as datetime),0)

	  select 1 as ret, 'Rating Created successfuly!' as responseMessage, 'VisitorPanel' as resourceFileName , 'RatingCreated_SuccessMessage' as resourceKey
 end 
 ----Rating  Record Update By Id
	else if(@mode=2)
	begin
	     
			Update Reviews set ReviewBody = @reviewBody, DeletedOn = GETUTCDATE() where Id= @id

			
	  select 1 as ret, 'Rating Updated successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName , 'RatingUpdated_SuccessMessage' as resourceKey
	end

----Rating  Record Delete By Id
	else if(@mode=3)
	begin
	     
			Update Reviews set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

			select 1 as ret, 'Rating  deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'RatingDeleted_SuccessMessage' as resourceKey
	end
	 else if (@mode=4)
 begin
       insert into Reviews (ItemId,ItemType,Rating,ReviewBody,ReviewerUserLoginId,CreatedOn,UpdatedOn,IsDeleted,DeletedOn,Status) values(@itemId,'Dance',@rating,@reviewBody,@reviewerUserLoginId,GETUTCDATE(),GETUTCDATE(),0,Cast('1/1/2000' as datetime),0)

	  
            SELECT 1 AS ret,
                   'Business Content Review successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinesscontentReviewCreated_SuccessMessage' AS resourceKey;
 end 
 end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateReview]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateReview]
(
	@id bigint,
	@itemId bigint,
	@itemType nvarchar (max),
	@rating int,
	@reviewBody  nvarchar(max),
	@reviewerUserLoginId bigint,
	@mode int
)
as 
begin
	if (@mode=1)
	begin
		insert into Reviews (ItemId,ItemType,Rating,ReviewBody,ReviewerUserLoginId,CreatedOn,UpdatedOn,IsDeleted,DeletedOn,Status) values(@itemId,'Business',@rating,@reviewBody,@reviewerUserLoginId,GETUTCDATE(),GETUTCDATE(),0,Cast('1/1/2000' as datetime),0)

		select 1 as ret, 'Review created successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName , 'ReviewCreated_SuccessMessage' as resourceKey
	 end 
	-- Rating  Record Update By Id
	else if(@mode=2)
	begin
		Update Reviews set ReviewBody = @reviewBody, DeletedOn = GETUTCDATE() where Id= @id
				
		select 1 as ret, 'Rating Updated successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName , 'ReviewUpdated_SuccessMessage' as resourceKey
	end
	-- Rating  Record Delete By Id
	else if(@mode=3)
	begin
		Update Reviews set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

		select 1 as ret, 'Rating  deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'ReviewDeleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStaff]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateStaff]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@staffCategoryId bigint,
	@email nvarchar(max),
	@password nvarchar(max),
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@profileImage nvarchar(max),
	@status int,
	@isProfessional int,
	@designation nvarchar(max),
	@submittedByLoginId bigint,
	@masterId nvarchar(max),
	@mode int,
	@basicSalary decimal(18,2),
	@HRA decimal(18,2),
	@TA decimal(18,2),
	@DA decimal(18,2),
	@remarks nvarchar(max),
	@uniqueUserIdForUser nvarchar(max),
	@uniqueUserIdForStaff nvarchar(max)
)
AS
BEGIN
	declare @UserLoginId bigint

	-- Insert Staff
	IF (@mode = 1)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION 
		
			IF (@masterId = '')
			BEGIN
				-- if same email already exists for another user
				if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId = 3)
				begin
					select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'VisitorPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
					return
				end

				DECLARE @prefix NVARCHAR(MAX)
				DECLARE @value BIGINT
			
				SELECT @value = lr.Value + 1, @prefix = lr.Prefix FROM LastRecordIdDetails lr WHERE lr.Id = 2
			
				-- Set MasterId 
				SET @masterId = @prefix + CAST(@value AS VARCHAR(MAX))
		  
				-- Insert data of UserLogin/Student
				INSERT INTO UserLogins(UserName, Email, Password, EmailConfirmed, RoleId, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn, DeletedByLoginId, Status, MasterId,UniqueUserId,Gender)
				VALUES ('', @email, @password, 0, 3, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME), 0, 1, @masterId,@uniqueUserIdForUser,0)
			
				SET @UserLoginId = (SELECT @@IDENTITY);
			
				UPDATE LastRecordIdDetails SET Value = @value WHERE Id = 2
			
				INSERT INTO Students(FirstName, LastName, UserLoginId, IsBlocked, ProfileImage)
				VALUES (@firstname, @lastname, @UserLoginId, 0, '')

			END
					
			if EXISTS(SELECT ul.Id FROM UserLogins ul WHERE Email = @email and ul.IsDeleted = 0 and RoleId In(4,5))
			begin
				begin
					select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
					--else
				end
			end
			else IF EXISTS(SELECT ul.Id FROM UserLogins ul WHERE ul.MasterId = @masterId AND ul.IsDeleted = 0)
			BEGIN
			
				DECLARE @staffPrefix NVARCHAR(MAX)
				DECLARE @staffMasterId NVARCHAR(MAX)
				DECLARE @StaffValue BIGINT
			
				SELECT @StaffValue = lr.Value + 1, @staffPrefix = lr.Prefix FROM LastRecordIdDetails lr WHERE lr.Id = 3
			
				-- Set MasterId 
				SET @staffMasterId = @staffPrefix + CAST(@StaffValue AS VARCHAR(MAX))
		  
				-- Insert data of UserLogin/BusinessOwner
				INSERT INTO UserLogins(UserName, Email, Password, PhoneNumber, PhoneNumber_CountryCode, EmailConfirmed, RoleId, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId, IsDeleted, DeletedOn, DeletedByLoginId, Status, MasterId,UniqueUserId,Gender)
				VALUES ('', @email, @password, '', '', 0, 5, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId, 0, CAST('1/1/2000' AS DATETIME), 0, 1, @staffMasterId,@uniqueUserIdForStaff,0)
			
				SET @UserLoginId = (SELECT @@IDENTITY);
			
				UPDATE LastRecordIdDetails SET Value = @StaffValue WHERE Id = 3
			
				INSERT INTO Staffs(UserLoginId, StaffCategoryId, ProfileImage, FirstName, LastName, BusinessOwnerLoginId, MasterId, BasicSalary, HouseRentAllowance, TravellingAllowance, DearnessAllowance, Remarks, IsProfessional, Designation) 
				VALUES (@UserLoginId, @staffCategoryId, @profileImage, @firstName, @lastName, @businessOwnerLoginId, @masterId, @basicSalary, @HRA, @TA, @DA, @remarks, @isProfessional, @designation)
			
				SELECT 1 AS ret, 'Staff created successfully!' AS responseMessage, @UserLoginId AS Id, 'BusinessPanel' AS resourceFileName, 'StaffCreated_SuccessMessage' AS resourceKey, @staffMasterId as MasterId
			END
			ELSE 
			BEGIN
				SELECT -1 AS ret, 'Sorry, MasterId does not exist!' AS responseMessage, 'ErrorMessage' AS resourceFileName, 'MasterIdNotExit_ErrorMessage' AS resourceKey	
			END
			COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK
				SELECT -1 AS ret, 'Staff not created. Something went wrong!' AS responseMessage, @UserLoginId AS Id, 'BusinessPanel' AS resourceFileName, 'StaffUpdated_SuccessMessage' AS resourceKey 
			END
		END CATCH
	END
	-- Updat Staff
	else if(@mode=2)
	begin
		select @UserLoginId = s.UserLoginId from Staffs s where s.Id = @id
		-- update
		if not exists(select s.Id from Staffs s where s.Id = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Sorry, staff not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffNotExists_ErrorMessage' as resourceKey 
		end
		-- removed check because it can already have another account with different role
		else if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.Id != @UserLoginId and RoleId IN(4,5))
		begin
			select -1 as ret, 'Sorry, same email is already exists/used by other user!!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey 
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
					-- TODO: if email update then reset email confirmed
					update UserLogins set Email = @email, Password = @password, Status = @status, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @UserLoginId

					update Staffs set FirstName = @firstName, LastName = @lastName, StaffCategoryId = @staffCategoryId, ProfileImage = @profileImage, IsProfessional = @isProfessional,Designation= @designation where Id = @id

					select 1 as ret, 'Staff updated successfully!' as responseMessage, @UserLoginId as Id , 'BusinessPanel' as resourceFileName, 'StaffUpdated_SuccessMessage' as resourceKey 
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Staff not updated. Something went wrong!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffNotUpdated_ErrorMessage' as resourceKey 
				end
			END CATCH
		end
	end
	-- Delete Staff by Id
	else if(@mode=3)
	begin
		if not exists(select s.Id from Staffs s where s.Id = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Sorry, staff not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffNotExists_ErrorMessage' as resourceKey 
		end
		else 
		begin
			select @UserLoginId = s.UserLoginId from Staffs s where s.Id = @id
			update UserLogins set IsDeleted = 1, DeletedOn = GETUTCDATE(), DeletedByLoginId = @submittedByLoginId where Id = @UserLoginId

			select 1 as ret, 'Staff deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName , 'StaffDeleted_SuccessMessage' as resourceKey
		end
	end
	-- Updat Staff Salary
	else if(@mode=4)
	begin
		select @UserLoginId = s.UserLoginId from Staffs s where s.Id = @id
		-- update
		if not exists(select s.Id from Staffs s where s.Id = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			select -1 as ret, 'Sorry, staff not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffNotExists_ErrorMessage' as resourceKey 
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION
					
					update Staffs set BasicSalary = @basicSalary, HouseRentAllowance = @HRA, TravellingAllowance = @TA, DearnessAllowance = @DA, Remarks = @remarks where Id = @id

					select 1 as ret, 'Staff salary updated successfully!' as responseMessage, @UserLoginId as Id, 'BusinessPanel' as resourceFileName, 'StaffSalaryUpdated_SuccessMessage' as resourceKey 
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
				begin
					ROLLBACK
					select -1 as ret, 'Staff salary not updated. Something went wrong!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffSalaryNotUpdated_ErrorMessage' as resourceKey 
				end
			END CATCH
		end
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStaffAttendance]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateStaffAttendance]
(
@id bigint,
@businessOwnerLoginId bigint,
@staffId bigint,
@attendanceStatus int,
@attendanceDate nvarchar(max),
@attendanceMonth int,
@attendanceYear int,
@leaveReason nvarchar(max),
@isApproved int,
@staffAttendanceInTime_24HF nvarchar(max),
@staffAttendanceOutTime_24HF nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
 begin
	if(@mode =1)
		begin 
		
		insert into StaffAttendances(BusinessOwnerLoginId ,StaffId,AttendanceStatus,AttendanceDate,AttendanceDate_DateTimeFormat,AttendanceMonth,AttendanceYear,LeaveReason,CreatedOn,CreatedByLoginId,UpdatedOn,UpadatedByLoginId,DeletedOn,IsDeleted,IsApproved,InTime_24HF,OutTime_24HF)Values(@businessOwnerLoginId,@staffId,@attendanceStatus,@attendanceDate,GETUTCDATE(),@attendanceMonth,@attendanceYear,@leaveReason,GETUTCDATE(),@submittedByLoginId,cast('01/01/2000' as datetime),@submittedByLoginId,cast('01/01/2000' as datetime),0,@isApproved,@staffAttendanceInTime_24HF,@staffAttendanceOutTime_24HF)
		select 1 as ret, 'Attendance successfully Added' as responseMessage,  'BusinessPanel' as resourceFileName, 'AddAttendanceMessage' as resourceKey
		end
 end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStaffCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_InsertUpdateStaffCategory]
(
	@id bigint,
	@name nvarchar(max),
	@status int,
	@mode int
)
as
begin
	-- insert Staff Category 
	if(@mode=1)
	begin 
		if exists(select * from StaffCategories cct where cct.Name = @name and cct.IsDeleted = 0)
		begin
			select -1 as ret, 'Category name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'CategoryNameAlreadyExist_ErrorMessage' as resourceKey 
		end
		else
		BEGIN
			INSERT INTO StaffCategories (Name, IsActive, CreatedOn, UpdatedOn, IsDeleted, DeletedOn,CreatedByLoginId,UpdatedByLoginId)
			VALUES (@name, @status, GETUTCDATE(), GETUTCDATE(), 0, CAST('1/1/2000' AS DATETIME),0,0);

			select 1 as ret, 'Created successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Created_SuccessMessage' as resourceKey
		END
	end
	-- update staff Category
	else if(@mode=2)
	begin
		IF EXISTS (SELECT Id FROM StaffCategories WHERE Id = @id)
        BEGIN
			if exists(select * from StaffCategories cct where cct.Name = @name and cct.IsDeleted = 0 and cct.Id != @id)
			begin
				select -1 as ret, 'Category name already exists!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'CategoryNameAlreadyExist_ErrorMessage' as resourceKey 
			end
			else
			BEGIN
				Update StaffCategories set Name = @name,IsActive = @status, UpdatedOn = GETUTCDATE()
				where Id = @id

				select 1 as ret, 'Updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Updated_SuccessMessage' as resourceKey;
			end
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	-- delete staff Category - Hard-Delete
	else if(@mode=3)
	begin
		IF EXISTS (SELECT Id FROM StaffCategories WHERE Id = @id)
        BEGIN

		   Update StaffCategories  set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
	
			select 1 as ret, 'Item deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'Deleted_SuccessMessage' as resourceKey;
        END
		ELSE
		BEGIN
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		END
	end
	else if(@mode=4)
	begin
		if not exists(select Id from StaffCategories where Id = @id and IsDeleted = 0)
		begin
			select -1 as ret, 'Not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey;
		end
		else
		begin
			update StaffCategories set IsActive = (case IsActive when 1 then 0 else 1 end)
			where Id = @id

			select 1 as ret, 'Staff Category Status has been successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'StaffCategoryType_StatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStaffProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateStaffProfile]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@email nvarchar(max),
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@profileImage nvarchar(max),
	@address nvarchar(max),
	@country nvarchar(max),
	@state nvarchar(max),
	@city nvarchar(max),
	@pinCode nvarchar(max),
	@landMark nvarchar(max),
	@latitude decimal(18,15),
	@longitude decimal(18,15),
	@phoneNumber nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--Update Staff Profile Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    --set @UserLoginId=0;
					
		--if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.Id!= @id)
		--begin
		--	select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		--end
		--else 
		begin
			begin try
			    BEGIN TRANSACTION 
				
				update UserLogins set  Email=@email, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId,Address = @address,State= @state,City= @city,Country = @country,Pincode = @pincode,FullAddressLocation = @landMark,Latitude= @latitude,Longitude = @longitude,PhoneNumber = @phoneNumber where Id = @id 
			
				update Staffs set FirstName = @firstName , LastName = @lastName where UserLoginId = @id and BusinessOwnerLoginId = @businessOwnerLoginId

				select 1 as ret, 'Staff Profile Updated successfuly!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'StaffProfileUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Staff not updated!' as responseMessage,  @id as Id, 'BusinessPanel' as resourceFileName, 'StaffNotUpdated_ErrorMessage' as resourceKey
			END CATCH
		end
	end
	--update Staff-Profile-Image
	else if(@mode=2)
	begin
		update Staffs set ProfileImage = @profileImage where UserLoginId = @id and BusinessOwnerLoginId = @businessOwnerLoginId 

		select 1 as ret, 'Staff Profile Image Updated successfuly!' as responseMessage,  @id as Id,
			'BusinessPanel' as resourceFileName, 'StaffProfileImageUpdated_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStudent]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateStudent]
(
	@id bigint,
	@email nvarchar(max),
	@password nvarchar(max),
	@phoneNumber nvarchar(max),
	@phoneNumber_CountryCode nvarchar(max),	
	@roleId bigint,
	@firstname nvarchar(max),
	@lastname nvarchar(max),
	@profileimage nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@uniqueUserId nvarchar(max),
	@gender int,
	@blockReason nvarchar(max),
	@businessStudentProfileImage nvarchar(max),
	@studentUserLoginId bigint
)
as
begin
	
	--Insert New Student/Register Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    declare @masterId nvarchar(max)
		declare @prefix nvarchar(max)
		declare @value bigint
		select @value = lr.Value+1, @prefix=lr.Prefix from LastRecordIdDetails lr where lr.Id = 2
		--set MasterId 
		set @masterId = @prefix +CAST(@value AS VARCHAR(max))
	    
		-- if same email already exists for another user
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId = 3)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'VisitorPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		-- If phone number field is taken while registration.
		--else if exists(select ul.Id from UserLogins ul where ul.PhoneNumber = @phoneNumber and ul.IsDeleted = 0 and ul.RoleId = 3)
		--begin
		--	select -1 as ret, 'Sorry, same phone-number is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyPhoneNumberExit_ErrorMessage' as resourceKey
		--end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/Student
				insert into UserLogins(UserName,Email,Password,PhoneNumber,PhoneNumber_CountryCode,EmailConfirmed,RoleId,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,DeletedByLoginId,Status,MasterId,UniqueUserId,Gender)
				values('',@email,@password,@phoneNumber,@phoneNumber_CountryCode,0,@roleId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),0,1,@masterId,@uniqueUserId,@gender)

				set @UserLoginId = (select @@IDENTITY);

				update LastRecordIdDetails set Value = @value where Id = 2

				insert into Students(FirstName,LastName,UserLoginId,IsBlocked,ProfileImage,BlockReason,BusinessStudentProfileImage)
				values(@firstname,@lastname,@UserLoginId,0,@profileimage,@blockReason,@businessStudentProfileImage)

				select 1 as ret, 'Student Registered successfully!' as responseMessage,  @UserLoginId as Id, 'VisitorPanel' as resourceFileName, 'StudentRegistered_SuccessMessage' as resourceKey, @masterId as MasterId
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Student Account not created! Something went wrong.' as responseMessage,  @UserLoginId as Id, 'VisitorPanel' as resourceFileName, 'StudentAccountNotCreated_ErrorMessage' as resourceKey
			END CATCH
		end
		     
   end
 
   -- Update Student basic profile by student-login-id [Student My account]
	else if(@mode=2)
	begin
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId = 3 and ul.Id != @id)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'VisitorPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else if exists(select ul.Id from UserLogins ul where ul.PhoneNumber = @phoneNumber and ul.IsDeleted = 0 and ul.RoleId = 3)
		begin
			select -1 as ret, 'Sorry, same phone-number is already exist/used by other user!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AlreadyPhoneNumberExit_ErrorMessage' as resourceKey
		end
		else
		begin
			BEGIN TRY
				BEGIN TRANSACTION 
				
				declare @emailConfirmed int = 0
				declare @dbEmail nvarchar(max) = ''

				-- reset email confirmed if not equals to the passed email
				select @emailConfirmed = EmailConfirmed, @dbEmail = Email from UserLogins where Id = @id
				if(@email != (select Email from UserLogins where Id = @id))
				begin
					set @emailConfirmed = 0
				end

				--Update data of UserLogin/Student
				update UserLogins set Email = @email, PhoneNumber = @phoneNumber, PhoneNumber_CountryCode = @phoneNumber_CountryCode, EmailConfirmed = @emailConfirmed, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

				update Students set FirstName = @firstname, LastName = @lastname, ProfileImage = @profileimage
				where UserLoginId = @id

				select 1 as ret, 'Profile updated successfuly!' as responseMessage,  @id as Id,'VisitorPanel' as resourceFileName, 'ProfileUpdated_SuccessMessage' as resourceKey
    			COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select -1 as ret, 'Profile not updated! Something went wrong.' as responseMessage,  @id as Id,
				'VisitorPanel' as resourceFileName, 'ProfileNotUpdated_ErrorMessage' as resourceKey
			END CATCH
		end
	end
	-- Block Student User
	else if(@mode = 3)
	begin
		set @StudentUserLoginId = (select  s.UserLoginId from Students s where s.Id = @id)
		if exists(select Id from Students where Id = @id and IsBlocked = 1)
		begin 
			select -1 as ret, 'This user is already blocked!' as responseMessage,  @id as Id,
			'SuperAdminPanel' as resourceFileName, 'UserAlreadyBlocked_ErrorMessage' as resourceKey
		end

		else
		begin

			begin try
				BEGIN TRANSACTION 
				--Update data of UserLogin
				UPDATE Students SET IsBlocked  = 1, BlockReason = @blockReason Where Id = @id 

				--update UserLogins set IsDeleted =(case IsDeleted when 0 then 1 else 0 end)  where  Id = @StudentUserLoginId 

				update UserLogins set Status = 0  where  Id = @StudentUserLoginId 
			
				select 1 as ret, 'User blocked successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'UserBlocked_SuccessMessage' as resourceKey
    			COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				
			END CATCH
		end
	end 
	-- Un-Block Student User
	else if(@mode = 4)
	begin
		set @StudentUserLoginId = (select  s.UserLoginId from Students s where s.Id = @id)
		begin try
			BEGIN TRANSACTION 
			--Update data of UserLogin
			UPDATE Students SET IsBlocked  = 0, BlockReason = '' Where Id = @id 

			--update UserLogins set IsDeleted =(case IsDeleted when 0 then 1 else 0 end)  where  Id = @StudentUserLoginId 

			update UserLogins set Status = 1  where  Id = @StudentUserLoginId 
			
			select 1 as ret, 'User unblocked successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'UserUnBlocked_SuccessMessage' as resourceKey
    		COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK
				
		END CATCH
	end  
	-- Update Business-Student Profile Image only
	else if(@mode=5)
	begin
		update Students set BusinessStudentProfileImage = @businessStudentProfileImage where UserLoginId = @studentUserLoginId
		select 1 as ret, 'User Image updated successfully' as responseMessage
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateStudentWithSocial]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateStudentWithSocial]
(
@id bigint,
@googleUserId nvarchar(max),
@facebookUserId nvarchar(max),
@googleAccessToken nvarchar(max),
@facebookAccessToken nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
begin
-- Update Student by Google login  [Student My account]
	if(@mode=1)
	begin
		BEGIN TRY
			BEGIN TRANSACTION 
			--Update data of UserLogin/Student
			update UserLogins set GoogleUserId = @googleUserId, GoogleAccessToken = @googleAccessToken,FacebookUserId = @facebookAccessToken,FacebookAccessToken = @facebookAccessToken, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Student Registered successfully!' as responseMessage,  @id as Id,'VisitorPanel' as resourceFileName, 'StudentRegistered_SuccessMessage' as resourceKey
    		COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK
			select 1 as ret, 'Student Account not created! Something went wrong.' as responseMessage,  @id as Id, 'VisitorPanel' as resourceFileName, 'StudentAccountNotCreated_ErrorMessage' as resourceKey
		END CATCH
	end

	-- Update Student by FaceBook login  [Student My account]
	if(@mode=2)
	begin
		BEGIN TRY
			BEGIN TRANSACTION 
			--Update data of UserLogin/Student
			update UserLogins set GoogleUserId = @googleUserId, GoogleAccessToken = @googleAccessToken,FacebookUserId = @facebookUserId,FacebookAccessToken = @facebookAccessToken, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id

			select 1 as ret, 'Student Registered successfully!' as responseMessage,  @id as Id,'VisitorPanel' as resourceFileName, 'StudentRegistered_SuccessMessage' as resourceKey
    		COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK
			select 1 as ret, 'Student Account not created! Something went wrong.' as responseMessage,  @id as Id, 'VisitorPanel' as resourceFileName, 'StudentAccountNotCreated_ErrorMessage' as resourceKey
		END CATCH
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateSubAdmin]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateSubAdmin]
(
	@id bigint,
	@userLoginId bigint,
	@firstName nvarchar(max),
	@lastName nvarchar(max),
	@email nvarchar(max),
	@password nvarchar(max),
	@country nvarchar(max),
	@state nvarchar(max),
	@city nvarchar(max),
	@address nvarchar(max),
	@profileImage nvarchar(max),
	@pinCode nvarchar(max),
	@landMark nvarchar(max),
	@locationLatitude decimal(18,15),
	@locationLongitude decimal(18,15),
	@submittedByLoginId bigint,
	@mode int
)
as 
begin 
	--Insert SubAdmin 
	if(@mode=1)
	begin
		-- if same email already exists for BusinessOwner
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId in(1,2))
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				insert into UserLogins(UserName,Email,Password,PhoneNumber,PhoneNumber_CountryCode,EmailConfirmed,RoleId,Address,City,State,Country,LandMark,PinCode,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,DeletedByLoginId,Status,MasterId)
				values('',@email,@password,'','',0,2,@address,@city,@state,@country,@landMark,@pinCode,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),0,1,'')

				set @userLoginId = (select @@IDENTITY);
				
				insert into SubAdmins(UserLoginId,FirstName,LastName,ProfileImage,Status,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)values(@userLoginId,@firstName,@lastName,@profileImage,0,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))
			
				select 1 as ret, 'SubAdmin successfully created' as responseMessage,'SuperAdminPanel' as resourceFileName, 'SubAdminSuccessfullyCreated' as resourceKey,@userLoginId as Id 

    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Business error!' as responseMessage,  @UserLoginId as Id,
				'BusinessPanel' as resourceFileName , 'Business_ErrorMessage' as resourceKey
			END CATCH
		end
	end
	--Update Sub-Admin Data by ID
	else if(@mode=2)
	begin
		select @userLoginId = sa.UserLoginId from SubAdmins sa where sa.Id = @id

		-- if same email already exists for BusinessOwner
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.RoleId in (1,2) and ul.Id != @userLoginId)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
				BEGIN TRANSACTION 
				--Insert data of UserLogin/BusinessOwner
				Update UserLogins set Email = @email,Password = @password,Country= @country,City=@city,Address= @address,State= @state,LandMark = @landmark, Pincode = @pincode,Latitude = @locationLatitude,Longitude = @locationLongitude,UpdatedOn = GETUTCDATE() where Id = @userLoginId
				
				update SubAdmins set FirstName= @firstName, LastName = @lastName, ProfileImage = @profileImage ,UpdatedByLoginId= @submittedByLoginId,UpdatedOn= GETUTCDATE() where Id = @id 
			
				select 1 as ret, 'SubAdmin updated successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'SubAdminSuccessfullyUpdated' as resourceKey ,@userLoginId as Id

    			COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Business error!' as responseMessage,  @userLoginId as Id,
				'BusinessPanel' as resourceFileName , 'Business_ErrorMessage' as resourceKey
			END CATCH
		end
	end     
	--Delete SubAdmin by Id
	else if(@mode=3)
	begin
		update UserLogins set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = (select UserLoginId from SubAdmins where Id = @id)

		update SubAdmins set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id 
		select 1 as ret, 'SubAdmin has been deleted successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'SubAdminDeleteMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateSubAdminProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateSubAdminProfile]
(
@id bigint,
@firstName nvarchar(max),
@lastName nvarchar(max),
@email nvarchar(max),
@phoneNumber nvarchar(max),
@profileImage nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
begin
	--Update SubAdmin Profile Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    --set @UserLoginId=0;
					
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.Id!= @id)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				
				update UserLogins set  Email=@email, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId,PhoneNumber = @phoneNumber where Id = @id 
			
				update SubAdmins set FirstName = @firstName , LastName = @lastName where UserLoginId = @id

				select 1 as ret, 'SubAdmin Profile Updated successfuly!' as responseMessage,  @id as Id,
				'SuperAdminPanel' as resourceFileName, 'SubAdminProfileUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Profile error!' as responseMessage,  @id as Id, 'SuperAdminPanel' as resourceFileName, 'SubAdminProfile_ErrorMessage' as resourceKey
			END CATCH
		end
   end
   --update SubAdmin-Profile-Image
	else if(@mode=2)
	begin
		update SubAdmins set ProfileImage = @profileImage where UserLoginId = @id

		select 1 as ret, 'SubAdmin Profile Image Updated successfuly!' as responseMessage,  @id as Id,
		'SuperAdminPanel' as resourceFileName, 'SubAdminProfileImageUpdated_SuccessMessage' as resourceKey
	end
end

GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateSuperAdminClassCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_InsertUpdateSuperAdminClassCategory]
(
	@id bigint,
	@parentClassCategoryTypeId bigint,
	@name nvarchar(max),
	@image nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
--insert ClassCategoryTypes details
 if(@mode = 1)
 begin
     insert into ClassCategoryTypes(BusinessCategoryId,ParentClassCategoryTypeId,Name,Image,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn, IsDeleted, DeletedOn)values(0,@parentClassCategoryTypeId,@name,@image,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0, CAST('1/1/2000' AS DATETIME))
		
		select 1 as ret, 'Business classs Category successfully created!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'BusinessClassCategoryCreatedMessage' as resourceKey 
  end
--Update ClassCategoryTypes Data By Id 
else if(@mode = 2)
   begin
     update ClassCategoryTypes set ParentClassCategoryTypeId = @parentClassCategoryTypeId,Name= @name,Image=@image,UpdatedByLoginId = @submittedByLoginId,UpdatedOn= GETUTCDATE() where Id = @id 
		
		select 1 as ret, ' ClassCategory successfully Updated!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryUpdatedMessage' as resourceKey 
   end

--Delete  ClassCategoryTypes by Id
 else if(@mode=3)
      begin
      delete from ClassCategoryTypes
             where Id = @id;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'ClassCategoryDetailsSuccessfullyDeleted' as resourceKey
		
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateSuperAdminProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateSuperAdminProfile]
(
@id bigint,
@firstName nvarchar(max),
@lastName nvarchar(max),
@email nvarchar(max),
@phoneNumber nvarchar(max),
@profileImage nvarchar(max),
@submittedByLoginId bigint,
@mode int
)
as
begin
	--Update SuperAdmin Profile Data
	if(@mode=1)
	begin
	    declare @UserLoginId bigint
	    --set @UserLoginId=0;
					
		if exists(select ul.Id from UserLogins ul where ul.Email = @email and ul.IsDeleted = 0 and ul.Id!= @id)
		begin
			select -1 as ret, 'Sorry, same email is already exist/used by other user!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'AlreadyEmailExit_ErrorMessage' as resourceKey
		end
		else 
		begin
			begin try
			    BEGIN TRANSACTION 
				
				update UserLogins set  Email=@email, UpdatedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId,PhoneNumber = @phoneNumber where Id = @id 
			
				update SuperAdmins set FirstName = @firstName , LastName = @lastName where UserLoginId = @id

				select 1 as ret, 'SuperAdmin Profile Updated successfuly!' as responseMessage,  @id as Id,
				'SuperAdminPanel' as resourceFileName, 'SuperAdminProfileUpdated_SuccessMessage' as resourceKey
    	        COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
					select 1 as ret, 'Profile error!' as responseMessage,  @id as Id, 'SuperAdminPanel' as resourceFileName, 'SuperAdminProfile_ErrorMessage' as resourceKey
			END CATCH
		end
   end
   --update SuperAdmin-Profile-Image
	else if(@mode=2)
	begin
		update SuperAdmins set ProfileImage = @profileImage where UserLoginId = @id

		select 1 as ret, 'SuperAdmin Profile Image Updated successfuly!' as responseMessage,  @id as Id,
		'SuperAdminPanel' as resourceFileName, 'SuperAdminProfileImageUpdated_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateSuperAdminSponsor]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_InsertUpdateSuperAdminSponsor]
(
	@id bigint,
	@sponsorTitle nvarchar(max),
	@sponsorLink nvarchar(max),
	@sponsorIcon nvarchar(max),
	@submittedByLoginId bigint,
	@mode int
)
as
begin
	--insert Sponsors details
	if(@mode = 1)
	begin
		insert into SuperAdminSponsors(SponsorTitle,SponsorIcon,SponsorLink,CreatedByLoginId,CreatedOn,UpdatedByLoginId,UpdatedOn, IsDeleted, DeletedOn)values(@sponsorTitle,@sponsorIcon,@sponsorLink,@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0, CAST('1/1/2000' AS DATETIME))
		
		select 1 as ret, 'Business Sponsor successfully created!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'BusinessSponsorCreatedMessage' as resourceKey 
	end
	--Update Sponsor Data By Id 
	else if(@mode = 2)
	begin
		update SuperAdminSponsors set SponsorTitle = @sponsorTitle,SponsorIcon= @sponsorIcon,SponsorLink=@sponsorLink,UpdatedByLoginId = @submittedByLoginId,UpdatedOn= GETUTCDATE() where Id = @id 
		
		select 1 as ret, ' Sponsor successfully Updated!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'SponsorUpdatedMessage' as resourceKey 
	end
	-- Delete  Sponsor by Id
	else if(@mode=3)
	begin
		delete from SuperAdminSponsors
             where Id = @id;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'SponsorDetailsSuccessfullyDeleted' as resourceKey
		
    end
	---- Toggle Home-Page-Visibility Status for SuperAdminSponsor By Id - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select sas.Id from SuperAdminSponsors sas where sas.Id = @id and sas.IsDeleted = 0)
		begin
			select -1 as ret, 'Sponsor not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update SuperAdminSponsors set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateTraining]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateTraining]
(
	@id bigint,
	@instructorUserLoginId bigint,
	@userLoginId bigint,
	@trainingname nvarchar(max),
	@shortdescription nvarchar(max),
	@instructoremail nvarchar(max),
	@instructorMobileNumber nvarchar(max),
	@instructoralternateNumber nvarchar(max),
	@address nvarchar(max),
	@isPaid int,
	@price  decimal(18,2),
	@additionalpriceinformation nvarchar(max),
	@country nvarchar(max),
	@state nvarchar(max),
	@city nvarchar(max),
	@startDate nvarchar(max),
	@endDate nvarchar(max),
	@startTime_24HF nvarchar(max),
	@endTime_24HF nvarchar(max),
	@pinCode nvarchar(max),
	@locationUrl nvarchar(max),
	@description nvarchar(max),
	@musicType nvarchar(max),
	@energyLevel nvarchar(max),
	@danceStyle nvarchar(max),
	@location nvarchar(max),
	@centerName nvarchar(max),
	@submittedByLoginId bigint,
	@mode int,
	@trainingImage nvarchar(max),
	@latitude decimal(18,15),
	@longitude decimal(18,15),
	@duration nvarchar(max),
	@trainingClassDays nvarchar(max),
	@totalLectures int,
	@totalClasses int,
	@totalseats int,
	@additionalInformation nvarchar(max),
	@trainingRules nvarchar(max),
	@totalCredits int,
	@expectationdescription nvarchar(max),
	@becomesInstructordescription nvarchar(max),
	@licenseBookingId bigint
)
as 
begin 
	declare @licenseId bigint = 0;
	declare @bookiedLicenseMinSellingPrice decimal(18,2) = 0

	if(@mode=1)
	begin
		
		select @licenseId = lb.LicenseId, @bookiedLicenseMinSellingPrice = lb.LicenseMinSellingPrice from LicenseBookings lb where lb.Id = @licenseBookingId and lb.BusinessOwnerLoginId = @userLoginId

		 insert into Trainings																			(InstructorUserLoginId,UserLoginId,TrainingName,ShortDescription,InstructorEmail,InstructorMobileNumber,InstructorAlternateNumber,Price,AdditionalPriceInformation,CenterName,Location,Address,IsPaid,City,State,Country,PinCode,LocationUrl,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,StartTime_24HF,EndTime_24HF,Description,MusicType,EnergyLevel,DanceStyle,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn,Status,TrainingImage,Latitude,Longitude,Duration,TrainingClassDays,TotalLectures,TotalClasses,Totalseats,AdditionalInformation,TrainingRules,TotalCredits,ExpectationDescription,BecomeInstructorDescription,LicenseId,LicenseBookingId)
																														values(@instructorUserLoginId,@userLoginId,@trainingname,@shortdescription,@instructoremail,@instructorMobileNumber,@instructoralternateNumber,@price,@additionalpriceinformation,@centerName,@location,@address,@isPaid,@city,@state,@country,@pinCode,@locationUrl,@startDate,Cast(@startDate as datetime),@endDate,Cast(@endDate as datetime),@startTime_24HF,@endTime_24HF,@description,@musicType,@energyLevel,@danceStyle,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime),1,@trainingImage,@latitude,@longitude,@duration,@trainingClassDays,@totalLectures,@totalClasses,@totalseats,@additionalInformation,@trainingRules,@totalCredits,@expectationdescription,@becomesInstructordescription,@licenseId,@licenseBookingId)

		select 1 as ret, 'Training Registered successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName , 'TrainingRegistered_SuccessMessage' as resourceKey
	end 
	else if(@mode=2)
	begin
		if((select Count(*) from TrainingBookings tb where tb.TrainingId = @id) > 0) 
		begin
			select 1 as ret, 'Action Denied! Training has bookings!' as responseMessage, 'BusinessPanel' as resourceFileName,  'ActionDeniedTrainingHasBookings_ErrorMessage' as resourceKey
		end
		else 
		begin

			set @licenseId = (select lb.LicenseId from LicenseBookings lb where lb.Id = @licenseBookingId and lb.BusinessOwnerLoginId = @userLoginId)

			update  Trainings set TrainingName = @trainingname,InstructorUserLoginId= @instructorUserLoginId,ShortDescription = @shortdescription, InstructorEmail=@instructoremail, InstructorMobileNumber = @instructorMobileNumber, InstructorAlternateNumber = @instructoralternateNumber,Price= @price,AdditionalPriceInformation = @additionalpriceinformation,CenterName =@centerName,Location = @location,Address = @address, IsPaid= @isPaid,City=@city,State = @state,Country = @country,PinCode=@pinCode,LocationUrl = @locationUrl,StartDate = @startDate, StartDate_DateTimeFormat = Cast(@startDate as datetime), EndDate = @endDate, EndDate_DateTimeFormat = Cast(@endDate as datetime), StartTime_24HF = @startTime_24HF,EndTime_24HF = @endTime_24HF,Description = @description,MusicType = @musicType,EnergyLevel = @energyLevel, DanceStyle= @danceStyle, TrainingImage = @trainingImage, UpdatedOn = GETUTCDATE(),UpdatedByLoginId=@submittedByLoginId, Latitude=@latitude, Longitude=@longitude,Duration = @duration,TrainingClassDays=@trainingClassDays,TotalLectures = @totallectures,TotalClasses = @totalClasses,Totalseats = @totalseats,AdditionalInformation = @additionalInformation,TrainingRules = @trainingRules,  TotalCredits = @totalCredits ,ExpectationDescription = @expectationdescription , BecomeInstructorDescription = @becomesInstructordescription, LicenseId = @licenseId, LicenseBookingId = @licenseBookingId where Id = @id 

			select 1 as ret, ' Training Updated successfuly!' as responseMessage, 'BusinessPanel' as resourceFileName,  'TrainingUpdated_SuccessMessage' as resourceKey
		end
	end
	else if(@mode=3)
	begin
		Update Trainings set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id= @id

		select 1 as ret, 'Training Record deleted successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'TrainingDeleted_SuccessMessage' as resourceKey
	end
	---- Toggle Home-Page-Visibility Status for Training By Id - [Super-Admin-Panel]
	else if(@mode=4)
	begin
		if not exists(select t.Id from Trainings t where t.Id = @id and t.IsDeleted = 0)
		begin
			select -1 as ret, 'Training not Found!' as responseMessage, 'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
		else
		begin
			Update Trainings set ShowOnHomePage = Case when ShowOnHomePage = 1 then 0 else 1 end where Id= @id

			select 1 as ret, 'Home page visibility status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'HomePageVisibilityStatusUpdated_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateTrainingBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateTrainingBooking]
(
	@id bigint,
	@orderId bigint,
	@trainingId bigint,
	@studentUserLoginId bigint,
	@trainingStartDate nvarchar(max),
	@trainingEndDate nvarchar(max),
	@mode int
)
as
begin
	declare @trainingBookingId bigint = 0;

	-- Insert Training Booking
	if(@mode = 1)
	begin
		insert into TrainingBookings(UserLoginId,TrainingId,OrderId,TrainingName,Price,PlanCompareAtPrice,IsCompleted,Duration,TrainingClassDays,TotalLectures,TotalClasses,TotalSeats,TotalCredits,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,CreatedOn,UpdatedOn,LicenseId,LicenseBookingId)
		select @studentUserLoginId, @trainingId, @orderId, t.TrainingName, t.Price, t.Price, 0, t.Duration,t.TrainingClassDays, t.TotalLectures, t.TotalClasses, t.TotalSeats, t.TotalCredits, @trainingStartDate, cast(@trainingStartDate as datetime), @trainingEndDate, cast(@trainingEndDate as datetime), GETUTCDATE(), GETUTCDATE(), t.LicenseId, t.LicenseBookingId 
		from Trainings t where t.Id = @trainingId
		
		set @trainingBookingId = SCOPE_IDENTITY();
		select 1 as ret, 'Training successfully booked!' as responseMessage, @trainingBookingId as Id,'BusinessPanel' as resourceFileName, 'TrainingBooked_SuccessMessage' as resourceKey
	end
	-- Mark Training Complete by Training-Booking-Id
	else if(@mode=2)
	begin
		if exists(select * from TrainingBookings where Id = @id and IsCompleted = 1)
		begin
			select -1 as ret, 'Training already complted!' as responseMessage, @trainingBookingId as Id,'BusinessPanel' as resourceFileName, 'TrainingAlreadyCompleted_ErrorMessage' as resourceKey
		end
		else
		begin
			update TrainingBookings set IsCompleted = 1 where Id = @id

			select 1 as ret, 'Training marked as completed successfully!' as responseMessage, @trainingBookingId as Id,'BusinessPanel' as resourceFileName, 'TrainingMarkedCompleted_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateTransferPackage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateTransferPackage]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@transferFromUserloginId bigint,
	@transferToUserLoginId bigint,
	@transferDate nvarchar(max),
	@transferReason nvarchar(max),
	@transferType int,
	@transferCity nvarchar(max),
	@transferState nvarchar(max),
	@notificationMessage nvarchar(max),
	@PackageId bigint,
	@transferStatus int,
	@rejectionReason nvarchar(max),
	@mode int,
	@planBookingId bigint
)
as
begin
	-- Insert Transfer-Package Request
	if(@mode=1)
	begin
		--set businessLoginId from Plan
		 select @businessOwnerLoginId = bp.BusinessOwnerLoginId, @PackageId = pb.PlanId from PlanBookings pb inner join BusinessPlans bp on pb.PlanId = bp.Id where pb.Id = @planBookingId

		-- check if there is already a request from the user for same plan/package and in pending state.
		if exists (SELECT tp.Id FROM TransferPackages tp where tp.TransferFromUserLoginId = @transferFromUserloginId AND tp.TransferStatus = 0 AND tp.PackageId = @PackageId and tp.PlanBookingId = @planBookingId)
		begin
			select -1 as ret, 'You already have pending transfer package request!' as responseMessage,  @id as Id,
				'VisitorPanel' as resourceFileName, 'TransferPackageAllreadyRequestErrorMesssgae' as resourceKey
		end
		-- check if transfer date is between package date
		else if exists(select Id from PlanBookings pb where @transferDate not between pb.StartDate and pb.EndDate and pb.Id = @planBookingId)
		begin
			select -1 as ret, 'Transfer date must be in Package Validity dates!' as responseMessage,  @id as Id,
				'VisitorPanel' as resourceFileName, 'TransferDateMustBeInPackageValidity_ErrorMesssgae' as resourceKey
		end
		else
		begin
			insert into TransferPackages (BusinessOwnerLoginId,TransferFromUserloginId,TransferToUserloginId,TransferDate,TransferReason,RejectionReason,TransferStatus,TransferType,TransferCity,TransferState,Notification,NotificationMessage,CreatedOn,UpdatedOn,PackageId,Limit,PlanBookingId)Values(@businessOwnerLoginId,@transferFromUserloginId,@transferToUserLoginId,@transferDate,@transferReason,@rejectionReason,0,@transferType,@transferCity,@transferState,0,@notificationMessage,GETUTCDATE(),GETUTCDATE(),@PackageId,0,@planBookingId)

			select 1 as ret, 'Transfer Package Added successfuly!' as responseMessage,  @id as Id,
				'VisitorPanel' as resourceFileName, 'TransferPackageAdded_SuccessMessage' as resourceKey
		end
	end
	-- Update Transfer-Package Status
	else if (@mode=2)
	begin
		if exists(select * from TransferPackages tp where tp.Id = @id and tp.BusinessOwnerLoginId = @businessOwnerLoginId and tp.TransferStatus = 0)
		begin
			Update TransferPackages set RejectionReason = @rejectionReason, TransferStatus = @transferStatus, UpdatedOn = GETUTCDATE() where Id = @id
			select 1 as ret, 'Package Updated successfuly!' as responseMessage,  @id as Id,
					'BusinessPanel' as resourceFileName, 'PackageStatusUpdate_SuccessMessage' as resourceKey
		end
		else 
		begin 
			select -1 as ret, 'Not Found!' as responseMessage,  @id as Id,
					'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
	end
	-- Transfer the package for same business by TransferPackageId
	else if(@mode=3)
	begin
		if exists(select * from TransferPackages tp where tp.Id = @id and tp.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			declare @transferTo_StudentLoginId bigint
			declare @transferFrom_EndDate nvarchar(max) 
		
			-- set variable data
			select @planBookingId = tp.PlanBookingId, @transferTo_StudentLoginId = tp.TransferToUserLoginId, @transferDate = tp.TransferDate from TransferPackages tp where tp.Id = @id
		
			set @transferFrom_EndDate = Format(DateAdd(day, -1, @transferDate), 'yyyy-MM-dd')

			-- create package entry for Transfer-to Student.
			insert into PlanBookings(OrderId,PlanId,StudentUserLoginId,PlanName,PlanDescription,PlanPrice,PlanCompareAtPrice,PlanDurationTypeId,PlanDurationTypeName,StartDate,StartDate_DateTimeFormat,EndDate,EndDate_DateTimeFormat,CreatedOn,UpdatedOn,IsTransfered,TransferPackageId)
			select pb.OrderId, pb.OrderId, @transferTo_StudentLoginId, pb.PlanName, pb.PlanDescription, pb.PlanPrice, pb.PlanCompareAtPrice, pb.PlanDurationTypeId, pb.PlanDurationTypeName, @transferDate, cast(@transferDate as datetime), pb.EndDate, pb.EndDate_DateTimeFormat, GETUTCDATE(), GETUTCDATE(),1,@id from PlanBookings pb where pb.Id = @planBookingId

			-- update end-date to existing plan-holder
			update PlanBookings set EndDate = @transferFrom_EndDate, EndDate_DateTimeFormat = cast(@transferFrom_EndDate as datetime), IsTransfered = 1, TransferPackageId = @id, UpdatedOn = GETUTCDATE() where Id = @planBookingId

			select 1 as ret, 'Transferred Package successfuly!' as responseMessage,  @id as Id,
						'BusinessPanel' as resourceFileName, 'PackageTransferred_SuccessMessage' as resourceKey
		end
		else 
		begin 
			select -1 as ret, 'Not Found!' as responseMessage,  @id as Id,
					'ErrorMessage' as resourceFileName, 'NotFound_ErrorMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserCertificates]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_InsertUpdateUserCertificates] 
(
	@id bigint,
	@userLoginId bigint,
	@certificateId bigint,
	@licenseId bigint,
	@itemId bigint,
	@itemTable nvarchar(max),
	@certificateNumber nvarchar(max),
	@certificateFile nvarchar(max),
	@mode int
)
as
begin
	-- Insert User-Certificate
	if(@mode=1)
	begin
		if exists(select * from UserCertificates uc where uc.ItemId = @itemId and uc.ItemTable = @itemTable)
		begin
			select -1 as ret, 'User certificate already generated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserCertificateAlreadyExist_ErrorMessage' as resourceKey
		end
		else 
		begin
			insert into UserCertificates(CertificateId,UserLoginId,LicenseId,ItemId,ItemTable,IssuedCertificateNumber,CertificateFile,CreatedOn,UpdatedOn) values(@certificateId,@userLoginId,@licenseId,@itemId,@itemTable,@certificateNumber,@certificateFile,GETUTCDATE(),GETUTCDATE())

			select -1 as ret, 'User certificate generated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserCertificate_Created_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserContentImages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_InsertUpdateUserContentImages]
(
@id bigint,
@userLoginId bigint,
@imageTitle nvarchar(max),
@image nvarchar(max),
@submittedByLoginId bigint,
@mode int)
as
begin
	--Insert Images by User
	if(@mode = 1)
	begin
		insert into UserContentImages(UserLoginId,ImageTitle,Image,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,IsDeleted,DeletedOn)
		Values(@userLoginId,@imageTitle,@image,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,0,Cast('1/1/2000' as datetime))

		select 1 as ret, 'Image save successfully' as responseMessage,'VisitorPanel' as resourceFileName, 'UserImage_Saved_SuccessMessage' as resourceKey
	end
	---To update the UserContent Images
		else if(@mode=2)
	begin
	    Update UserContentImages set ImageTitle = @imageTitle, Image = @image, UpdatedOn = GETUTCDATE()  where id= @id
		select 1 as ret, 'Image update successfully' as responseMessage,'VisitorPanel' as resourceFileName, 'UserImage_Update_SuccessMessage' as resourceKey
	end
	-- Delete User-Image
	else if(@mode = 3)
	begin
		update UserContentImages set IsDeleted = 1, DeletedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id 

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'VisitorPanel' as resourceFileName, 'UserImage_Deleted_SuccessMessage' as resourceKey
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserContentResumeDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[sp_InsertUpdateUserContentResumeDetail]
(
    @id bigint,
    @userLoginId bigint,
    @summary nvarchar(max),
    @languages nvarchar(max),
    @skills nvarchar(max),
	@freelance nvarchar(max),
    @submittedByLoginId int,
    @mode int
)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM UserResumeContents WHERE UserLoginId =  @userLoginId)
        BEGIN
            UPDATE UserResumeContents
            SET Summary = @summary,
                Languages = @languages,
                Skills = @skills,
                Freelance = @freelance,
                UpdatedOn = GETUTCDATE(),UpdatedByLoginId = @submittedByLoginId
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business User Resume Content Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessUserResumeContentUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
		declare @businessOwnerLoginId bigint = 0;
		set @businessOwnerLoginId = (select ul.Id from UserLogins ul inner join Staffs s on ul.MasterId = s.MasterId where s.UserLoginId= @userLoginId)
            INSERT INTO UserResumeContents (UserLoginId, Summary, Languages, Skills, Freelance, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@businessOwnerLoginId, @summary, @languages, @skills, @freelance, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business User Resume Content successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessUserResumeContentCreated_SuccessMessage' AS resourceKey;
        END;
    END
	--- To Add the Business Profile page detail for Others Profile
	IF (@mode = 2)
    BEGIN
        IF EXISTS (SELECT UserLoginId FROM UserResumeContents WHERE UserLoginId =  @userLoginId)
        BEGIN
            UPDATE UserResumeContents
            SET Summary = @summary,
                Languages = @languages,
                Skills = @skills,
                Freelance = @freelance,
                UpdatedOn = GETUTCDATE(),UpdatedByLoginId = @submittedByLoginId
            WHERE UserLoginId = @userLoginId;

            SELECT 1 AS ret,
                   'Business User Resume Content Update successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessUserResumeContentUpdate_SuccessMessage' AS resourceKey;
        END
        ELSE
        BEGIN
            INSERT INTO UserResumeContents (UserLoginId, Summary, Languages, Skills, Freelance, CreatedOn, CreatedByLoginId, UpdatedOn, UpdatedByLoginId)
            VALUES (@userLoginId, @summary, @languages, @skills, @freelance, GETUTCDATE(), @submittedByLoginId, GETUTCDATE(), @submittedByLoginId);

            SELECT 1 AS ret,
                   'Business User Resume Content successfully!' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'BusinessUserResumeContentCreated_SuccessMessage' AS resourceKey;
        END;
    END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserContentVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateUserContentVideos]
(
	@id bigint,
	@userLoginId bigint,
	@videoTitle nvarchar(max),
	@videoDescription nvarchar(max),
	@videoLink nvarchar(max),
	@thumbNail nvarchar(max),
	@submittedByLoginId bigint,
	@mode int)
as
begin
	--Insert Videos
	if(@mode = 1)
	begin
		insert into UserContentVideos(UserLoginId,VideoTitle,VideoLink,VideoThumbNail,CreatedOn,CreatedByLoginId,UpdatedOn,IsDeleted,DeletedOn,UpdatedByLoginId,VideoDescription)
		Values(@userLoginId,@videoTitle,@videoLink,@thumbNail,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),0,Cast('1/1/2000' as datetime),@submittedByLoginId,@videoDescription)

		select 1 as ret, 'Video save successfully' as responseMessage,'VisitorPanel' as resourceFileName, 'UserVideos_Saved_SuccessMessage' as resourceKey
	end
	---To update the UserContent Videos
		else if(@mode=2)
	begin
	    Update UserContentVideos set VideoTitle = @videoTitle, VideoLink = @videoLink,VideoThumbNail = @thumbNail,VideoDescription = @videoDescription , UpdatedOn = GETUTCDATE()  where id= @id
		select 1 as ret, 'Video update successfully' as responseMessage,'VisitorPanel' as resourceFileName, 'UserVideos_Update_SuccessMessage' as resourceKey
	end
	-- Delete User-Video
	else if(@mode = 3)
	begin
		update UserContentVideos set IsDeleted = 1, DeletedOn = GETUTCDATE(), UpdatedByLoginId = @submittedByLoginId where Id = @id 

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'VisitorPanel' as resourceFileName, 'UserVideos_Deleted_SuccessMessage' as resourceKey
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserFamilyRelation]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateUserFamilyRelation]
(
	@id bigint,
	@user1LoginId bigint,
	@user2LoginId bigint,
	@user1Relation_FieldTypeCatalogKey nvarchar(max),
	@user2Relation_FieldTypeCatalogKey nvarchar(max),
	@submittedByLoginId int,
	@mode int
)
as 
begin 
	-- Insert User-Family Relation
	if(@mode=1)
	begin
		if not exists(select Id from UserFamilyRelations ufr where ufr.User1LoginId in (@user1LoginId,@user2LoginId) and ufr.User2LoginId in (@user1LoginId,@user2LoginId))
		begin
			BEGIN TRANSACTION
			BEGIN TRY
				insert into UserFamilyRelations (User1LoginId,User2LoginId, User1Relation_FieldTypeCatalogKey,User2Relation_FieldTypeCatalogKey,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId) values (@user1LoginId,@user2LoginId,@user1Relation_FieldTypeCatalogKey,@user2Relation_FieldTypeCatalogKey,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)

				insert into UserFamilyRelations (User1LoginId,User2LoginId, User1Relation_FieldTypeCatalogKey,User2Relation_FieldTypeCatalogKey,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId) values (@user2LoginId,@user1LoginId,@user2Relation_FieldTypeCatalogKey,@user1Relation_FieldTypeCatalogKey,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId)
				select 1 as ret, 'User Family Relation created Successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'FamilyMember_Created_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF(@@TRANCOUNT > 0)
				begin
					ROLLBACK
					SELECT -1 AS ret, 'User Family relation not created. Something went wrong!' AS responseMessage, 0 AS Id, 'BusinessPanel' AS resourceFileName, 'StaffUpdated_SuccessMessage' AS resourceKey 
				end
			END CATCH
		end
     end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserPermissions]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateUserPermissions]
(
	@userLoginId bigint,
	@permissionIds nvarchar(max),
	@mode int
)
as
begin
	--declare @UserLoginId bigint = 0
	-- Insert Update User-Permissions by Staff-id
	if(@mode=1)
	begin
		--select @UserLoginId = s.UserLoginId from Staffs s where s.Id = @id

		if(@userLoginId <= 0)
		begin
			select -1 as ret, 'User not found!' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserNotFound_ErrorMessage' as resourceKey
		end
		else 
		begin
			BEGIN TRY
				BEGIN TRANSACTION

				-- delete previous permissions
				delete from UserLoginPermissions where UserLoginId = @UserLoginId

				if(@permissionIds != '')
				begin
					-- insert new permissions
					insert into UserLoginPermissions select @UserLoginId as UserLoginId, splitdata AS PermissionId
					FROM dbo.fnSplitString(@permissionIds, ',')
				end
				
				select 1 as ret, 'Account Permissions updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AccountPermissionUpdate_SuccessMessage' as resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select -1 as ret, 'Account Permissions not updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AccountPermissionNotUpdate_ErrorMessage' as resourceKey
			END CATCH

		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_InsertUpdateUserVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_InsertUpdateUserVideos]
(
	@id bigint,
	@userLoginId bigint,
	@videoTitle nvarchar(max),
	@videoDescription nvarchar(max),
	@videoLink nvarchar(max),
	@thumbNail nvarchar(max),
	@submittedByLoginId bigint,
	@mode int)
as
begin
	--Insert Videos
	if(@mode = 1)
	begin
		insert into UserContentVideos(VideoTitle,VideoLink,VideoThumbNail,CreatedOn,CreatedByLoginId,UpdatedOn,UpdatedByLoginId,VideoDescription)
		Values(@videoTitle,@videoLink,@thumbNail,GETUTCDATE(),@submittedByLoginId,GETUTCDATE(),@submittedByLoginId,@videoDescription)

		select 1 as ret, 'Video save successfully' as responseMessage,'VisitorPanel' as resourceFileName, 'UserVideos_Saved_SuccessMessage' as resourceKey
	end
	-- Delete User-Video
	else if(@mode = 2)
	begin
		delete from UserContentVideos where Id = @id and UserLoginId = @userLoginId;

		select 1 as ret, 'Successfully Deleted!' as responseMessage,'VisitorPanel' as resourceFileName, 'UserVideos_Deleted_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_login]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_login]
(
	@id bigint,
	@email nvarchar(max),
	@password nvarchar(max),
	@socialLoginId nvarchar(max),
	@masterId nvarchar(max),
	@mode int
)
as
begin
	-- SuperAdmin Login
	if(@mode = 1)
	begin
		--if super-admin logged-in 
		if exists(select ul.Id from UserLogins ul where ul.Email=@email COLLATE SQL_Latin1_General_CP1_CS_AS and ul.Password=@password COLLATE SQL_Latin1_General_CP1_CS_AS and ul.RoleId in (1,2) and ul.IsDeleted = 0 and ul.Status = 1)
		begin
			select ul.Id, ul.Email ,ul.RoleId, ul.Status, r.Name as RoleName
			from UserLogins ul inner join Roles r on ul.RoleId = r.Id where ul.Email=@email COLLATE SQL_Latin1_General_CP1_CS_AS and ul.Password=@password COLLATE SQL_Latin1_General_CP1_CS_AS and ul.RoleId in (1,2) and ul.IsDeleted = 0 and ul.Status = 1
		end
	end
	-- Business Admin and Staff Login
	if(@mode = 2)
	begin
		if exists(select ul.Id from UserLogins ul where (ul.MasterId = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.Email = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.PhoneNumber = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS) and ul.Password=@password COLLATE SQL_Latin1_General_CP1_CS_AS and ul.RoleId in(4,5)  and ul.IsDeleted = 0 and ul.Status = 1)
		begin
			select ul.Id, ul.Email ,ul.RoleId, ul.Status, r.Name as RoleName,
			(Case when ul.RoleId = 5 then (select s.BusinessOwnerLoginId from Staffs s where s.UserLoginId = ul.Id) else ul.Id end) as BusinessOwnerLoginId
			from UserLogins ul inner join Roles r on ul.RoleId = r.Id 
			where 
			(ul.MasterId = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.Email = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.PhoneNumber = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS) 
			and ul.Password = @password COLLATE SQL_Latin1_General_CP1_CS_AS 
			and ul.RoleId in(4,5) 
			and ul.IsDeleted = 0 
			and ul.Status = 1
		end
	end
	-- User/Student Login
	if(@mode = 3)
	begin
		if exists(select ul.Id from UserLogins ul where (ul.MasterId = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.Email = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.PhoneNumber = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS) and ul.Password=@password COLLATE SQL_Latin1_General_CP1_CS_AS and ul.RoleId = 3  and ul.IsDeleted = 0)
		begin
			select ul.Id, ul.Email ,ul.RoleId, ul.Status, r.Name as RoleName,ul.MasterId
			from UserLogins ul inner join Roles r on ul.RoleId = r.Id 
			where 
			(ul.MasterId = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.Email = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS OR ul.PhoneNumber = @masterId COLLATE SQL_Latin1_General_CP1_CS_AS) 
			and ul.Password=@password COLLATE SQL_Latin1_General_CP1_CS_AS 
			and ul.RoleId = 3 
			and ul.IsDeleted = 0 
			--and ul.Status = 1(checked in controller code)
		end
	end
	--User/Student Login With Social Login With Google
	if(@mode = 4)
	begin
		select ul.Id, ul.Email ,ul.RoleId, ul.Status, r.Name as RoleName
		from UserLogins ul inner join Roles r on ul.RoleId = r.Id where ul.Email=@email COLLATE SQL_Latin1_General_CP1_CS_AS  and ul.RoleId = 3 and ul.IsDeleted = 0 and ul.Status = 1
	end
	--User/Student Login With Social Login With Facebook
	if(@mode = 5)
	begin
		select ul.Id, ul.Email ,ul.RoleId, ul.Status, r.Name as RoleName
		from UserLogins ul inner join Roles r on ul.RoleId = r.Id where ul.Email=@email COLLATE SQL_Latin1_General_CP1_CS_AS  and ul.RoleId = 3 and ul.IsDeleted = 0 and ul.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageAdvertisement]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageAdvertisement]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@UserLoginId bigint,
	@mode int
)
as 
begin 
	-- Get All Advertisements
	if(@mode=1)
	begin
		--select a.Id, a.Image, dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath,a.AdvertisementCategory, a.ImageOrientationType, a.Status as IsActive	
		--from Advertisements a where a.IsDeleted = 0
		select a.Id, a.Image , dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath,a.AdvertisementLink, bc.Name as AdvertisementCategoryName, a.ImageOrientationType, a.Status as IsActive	
		from Advertisements a
		inner join BusinessCategories bc on bc.Id = a.AdvertisementCategory where a.IsDeleted=0
	end
	-- Get Advertisement By Id
	else if(@mode=2)
	begin
		select a.Id, a.Image , dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath,a.AdvertisementLink,a.AdvertisementCategory, a.ImageOrientationType, a.Status as IsActive	
       from Advertisements a
       where a.Id = @id
	end
	-- Change Advertisement Status
	else if(@mode=3)
	begin
		update Advertisements set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

		select 1 as ret, 'Advertisements status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'AdvertisementsStatusUpdated_SuccessMessage' as resourceKey
	end
	-- Get Advertisement record by Top 1 By using the Visitor panel
	else if(@mode=4)
	begin
	    SELECT TOP 1 a.Id, a.Image, a.AdvertisementLink, dbo.GetAdvertisementImageWithPath(a.Image) AS AdvertisementImageWithPath, a.AdvertisementCategory, a.ImageOrientationType FROM Advertisements a
       where a.CreatedForLoginId in (select Id from UserLogins ul where ul.RoleId = 1) and a.IsDeleted = 0
      ORDER BY  NEWID()
    end
	---To Get Banner Advertisement
	else if(@mode=5)
	begin
	    select a.Id,a.Image,dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath, a.AdvertisementLink 
		from Advertisements a where a.AdvertisementCategory = 'Dance' and a.IsDeleted = 0
	end
	-- Get All active advertisements for display
	else if (@mode = 6)
	begin 
	    select a.Id,a.Image,a.AdvertisementLink,  dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath from Advertisements a where a.IsDeleted = 0 and a.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageAdvertisement_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageAdvertisement_Pagination]
(
	@id bigint,
	@userLoginId bigint,
	@createdForLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Advertisement Records Created by Super-Admin Users
	if(@mode=1)
	begin
		select a.Id, a.Image, a.AdvertisementCategory, a.ImageOrientationType, dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath, a.CreatedOn, (CONVERT(varchar, a.CreatedOn,106)) as CreatedOn_FormatDate, a.Status,bc.Name as AdvertisementCategoryName
		INTO #AllAdvertisementsBySuperAdmin
		from Advertisements a
		inner join BusinessCategories bc on bc.Id = a.AdvertisementCategory 
		where a.IsDeleted = 0 --and a.CreatedForLoginId = @userLoginId
		and
		(a.AdvertisementCategory LIKE '%'+@searchFilter+'%' OR
		a.ImageOrientationType LIKE '%'+@searchFilter+'%' OR
		a.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,a.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllAdvertisementsBySuperAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'ASC' THEN AdvertisementCategory END,
				CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'DESC' THEN AdvertisementCategory END DESC,
				CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'ASC' THEN ImageOrientationType END,
				CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'DESC' THEN ImageOrientationType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllAdvertisementsBySuperAdmin
		order by
		CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'ASC' THEN AdvertisementCategory END,
		CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'DESC' THEN AdvertisementCategory END DESC,
		CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'ASC' THEN ImageOrientationType END,
		CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'DESC' THEN ImageOrientationType END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllAdvertisementsBySuperAdmin
	end
	-- Get All Advertisement Records by Business-Owners (@userLoginId => BusinessOwnerLoginId)
	else if(@mode=2)
	begin
		select a.Id, a.Image, a.AdvertisementCategory, a.ImageOrientationType, dbo.GetAdvertisementImageWithPath(a.Image) as ImageWithPath, a.CreatedOn, (CONVERT(varchar, a.CreatedOn,106)) as CreatedOn_FormatDate, a.Status
		INTO #AllAdvertisementsByBusiness
		from Advertisements a
		where a.IsDeleted = 0 and a.CreatedForLoginId = @createdForLoginId
		and
		(a.AdvertisementCategory LIKE '%'+@searchFilter+'%' OR
		a.ImageOrientationType LIKE '%'+@searchFilter+'%' OR
		a.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,a.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllAdvertisementsByBusiness);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'ASC' THEN AdvertisementCategory END,
				CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'DESC' THEN AdvertisementCategory END DESC,
				CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'ASC' THEN ImageOrientationType END,
				CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'DESC' THEN ImageOrientationType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllAdvertisementsByBusiness
		order by
		CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'ASC' THEN AdvertisementCategory END,
		CASE WHEN @sorting = 'AdvertisementCategory' AND @sortOrder = 'DESC' THEN AdvertisementCategory END DESC,
		CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'ASC' THEN ImageOrientationType END,
		CASE WHEN @sorting = 'ImageOrientationType' AND @sortOrder = 'DESC' THEN ImageOrientationType END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllAdvertisementsByBusiness
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageApartment]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageApartment]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get Apartment Table-Data by Id
	if(@mode=1)
	begin
		select * from Apartments where Id = @id
	end
	-- Get Apartment Detail by Id
	else if(@mode=2)
	begin
		select a.Id, a.BusinessOwnerLoginId, a.Name, a.Blocks, a.Areas, a.Status from Apartments a where a.Id = @id
	end
	-- Get all active apartment list
	else if(@mode=3)
	begin
		select a.Id, a.BusinessOwnerLoginId, a.Name, a.Blocks, a.Areas, a.Status from Apartments a where a.BusinessOwnerLoginId = @businessOwnerLoginId and a.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageApartmentArea]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[sp_ManageApartmentArea]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@apartmentId bigint,
	@mode int
)
as
begin
	-- Get All Areas by Apartment
	if(@mode=1)
	begin
		select * from ApartmentAreas ar where ar.ApartmentId = @apartmentId and ar.IsDeleted = 0
	end
	-- Get Area detail by Id
	else if(@mode=2)
	begin
		select * from ApartmentBlocks ar where ar.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageApartmentBlock]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageApartmentBlock]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@apartmentId bigint,
	@mode int
)
as
begin
	-- Get All Blocks by Apartment
	if(@mode=1)
	begin
		select * from ApartmentBlocks ab where ab.ApartmentId = @apartmentId and ab.IsDeleted = 0
	end
	-- Get Block detail by Id
	else if(@mode=2)
	begin
		select * from ApartmentBlocks ab where ab.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageApartmentBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageApartmentBooking]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@apartmentId bigint,
	@mode int
)
as
begin
	-- Get Apartment-Booking Detail by Apartment-Booking-Id
	if(@mode=1)
	begin
		Select ab.*, abk.Name as BlockName, aa.Name as AreaName, a.Name as ApartmentName, 
		(CONVERT(varchar, ab.CreatedOn,106)) as CreatedOn_FormatDate, 
		c.Name as ClassName, c.IsPaid as ClassIsPaid, c.ClassPriceType, c.Price as ClassPrice, c.ClassDays, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.ClassDays_ShortForm, b.ClassDurationSeconds, b.InstructorLoginId, 
		insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified, insBC.Name as InstructorBusinessCategoryName,
		b.Name as BatchName, b.ScheduledEndOnTime_24HF as BatchScheduledEndOnTime_24HF, b.ScheduledStartOnTime_24HF as BatchScheduledStartOnTime_24HF,
		s.FirstName + ' ' + s.LastName as PersonFullName, s.ProfileImage as PersonProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as PersonProfileImageWithPath
		from 
		ApartmentBookings ab
		inner join UserLogins ul on ab.UserLoginId= ul.Id
		inner join Apartments a on ab.ApartmentId = a.Id
		inner join ApartmentAreas aa on ab.ApartmentAreaId = aa.Id
		inner join ApartmentBlocks abk on ab.ApartmentBlockId = abk.Id
		inner join Batches b on ab.BatchId = b.Id
		inner join ClassBatches cb on b.Id = cb.BatchId
		inner join Classes c on cb.ClassId = c.Id
		inner join Students s on ul.Id = s.UserLoginId
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join BusinessCategories insBC on insBO.BusinessSubCategoryId = insBC.Id
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where ab.Id = @id and ab.BusinessOwnerLoginId = @businessOwnerLoginId
	end
	--Get Apartment Bookings User by Apartment Id
	else if(@mode = 2)
	begin
		--Select Distinct(ab.UserLoginId), ab.*, abk.Name as BlockName, aa.Name as AreaName, a.Name as ApartmentName, 
		--(CONVERT(varchar, ab.CreatedOn,106)) as CreatedOn_FormatDate, 
		--s.FirstName + ' ' + s.LastName as PersonFullName, s.ProfileImage as PersonProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as PersonProfileImageWithPath
		--from 
		--ApartmentBookings ab
		--inner join UserLogins ul on ab.UserLoginId= ul.Id
		--inner join Apartments a on ab.ApartmentId = a.Id
		--inner join ApartmentAreas aa on ab.ApartmentAreaId = aa.Id
		--inner join ApartmentBlocks abk on ab.ApartmentBlockId = abk.Id
		--inner join Students s on ul.Id = s.UserLoginId
		--where ab.ApartmentId = @apartmentId and ab.BusinessOwnerLoginId = @businessOwnerLoginId

		Select t.*
		FROM (
		 Select ab.*, abk.Name as BlockName, aa.Name as AreaName, a.Name as ApartmentName, 
				(CONVERT(varchar, ab.CreatedOn,106)) as CreatedOn_FormatDate, 
				s.FirstName + ' ' + s.LastName as PersonFullName, s.ProfileImage as PersonProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as PersonProfileImageWithPath,
			 ROW_NUMBER() OVER (PARTITION BY ab.UserLoginId 
			 ORDER BY ab.Id ASC) AS row_number
			from 
				ApartmentBookings ab
				inner join UserLogins ul on ab.UserLoginId= ul.Id
				inner join Apartments a on ab.ApartmentId = a.Id
				inner join ApartmentAreas aa on ab.ApartmentAreaId = aa.Id
				inner join ApartmentBlocks abk on ab.ApartmentBlockId = abk.Id
				inner join Students s on ul.Id = s.UserLoginId
				where ab.ApartmentId = @apartmentId and ab.BusinessOwnerLoginId = @businessOwnerLoginId
		) t
		WHERE t.row_number = 1
	end
	-- Get Apartment-Booking Detail by User-Login-Id
	if(@mode=3)
	begin
		Select ab.*, abk.Name as BlockName, aa.Name as AreaName, a.Name as ApartmentName, 
		(CONVERT(varchar, ab.CreatedOn,106)) as CreatedOn_FormatDate, 
		c.Name as ClassName, c.IsPaid as ClassIsPaid, c.ClassPriceType, c.Price as ClassPrice, c.ClassDays, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.ClassDays_ShortForm, b.ClassDurationSeconds, b.InstructorLoginId, 
		insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified, insBC.Name as InstructorBusinessCategoryName,
		b.Name as BatchName, b.ScheduledEndOnTime_24HF as BatchScheduledEndOnTime_24HF, b.ScheduledStartOnTime_24HF as BatchScheduledStartOnTime_24HF,
		s.FirstName + ' ' + s.LastName as PersonFullName, s.ProfileImage as PersonProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as PersonProfileImageWithPath
		from 
		ApartmentBookings ab
		inner join UserLogins ul on ab.UserLoginId= ul.Id
		inner join Apartments a on ab.ApartmentId = a.Id
		inner join ApartmentAreas aa on ab.ApartmentAreaId = aa.Id
		inner join ApartmentBlocks abk on ab.ApartmentBlockId = abk.Id
		inner join Batches b on ab.BatchId = b.Id
		inner join ClassBatches cb on b.Id = cb.BatchId
		inner join Classes c on cb.ClassId = c.Id
		inner join Students s on ul.Id = s.UserLoginId
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join BusinessCategories insBC on insBO.BusinessSubCategoryId = insBC.Id
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where ab.UserLoginId = @userLoginId and ab.BusinessOwnerLoginId = @businessOwnerLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBatch]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBatch]
(
	@id bigint,
	@masterid nvarchar(max),
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get All Batches by Business-Owner
	if(@mode=1)
	begin
		select * from [Batches] b where b.BusinessOwnerLoginId = @businessOwnerLoginId
	end
	-- Get All Non-Deleted Batches by Business-Owner
	else if(@mode=2)
	begin
		select * from [Batches] b where b.BusinessOwnerLoginId = @businessOwnerLoginId and b.IsDeleted = 0
	end
	-- Get Batch By Id
	else if(@mode=3)
	begin
		select b.Id, b.Name, b.BusinessOwnerLoginId, b.GroupId, b.InstructorLoginId, b.ClassDurationSeconds, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, b.StudentMaxStrength, b.Status
		from [Batches] b where b.Id = @id
	end
	-- Change Batch Status By Id [Same business check]
	else if(@mode=4)
	begin
		if exists(select top 1 b.BusinessOwnerLoginId from [Batches] b where b.Id = @id and b.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			update [Batches] set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

			select 1 as ret, 'Batch status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BatchStatusUpdated_SuccessMessage' as resourceKey
		end
		else
		begin
			select -1 as ret, 'Batch not exists!' as responseMessage, 'BusinessPanel' as resourceFileName, 'BatchNotExists_ErrorMessage' as resourceKey
		end
	end
	-- Get Active Batch-List not linked to any class for dropdown by Business-Owner-Login-Id
	else if(@mode=5)
	begin
		select * from [Batches] b where b.IsDeleted = 0 and b.Status = 1 and b.BusinessOwnerLoginId = @businessOwnerLoginId and b.Id not in (select cb.BatchId from ClassBatches cb)
	end
	-- Get All Group Id,Name by Business-Owner-Login-Id not assigned to other batches except the batch-id passed
	else if(@mode=6)
	begin
		select g.Id, g.Name 
		from Groups g 
		where g.BusinessOwnerId = (select bo.Id from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId) 
		and g.IsDeleted = 0
		and g.Id not in (select GroupId from [Batches] b where b.BusinessOwnerLoginId = @businessOwnerLoginId and b.Id != @id)
	end
	else if (@mode = 7)
	begin
	    set @masterid  = (select MasterId from Staffs where UserLoginId = @id)
		select b.Id , b.Name ,g.Name as groupname,b.ScheduledStartOnTime_24HF,b.ScheduledEndOnTime_24HF,b.StudentMaxStrength,b.Status 
		from Batches b 
		inner join Groups g on b.GroupId = g.Id
		where BusinessOwnerLoginId= @businessOwnerLoginId 
		and b.IsDeleted =0 
		and InstructorLoginId = (select Id  from UserLogins where MasterId = @masterid)

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBatch_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBatch_Pagination]
(
	@id bigint,
	@userLoginId bigint,
	@businessOwnerLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	--declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Batches Created by Business Owner
	if(@mode=1)
	begin

		select b.Id, b.Name,b.ScheduledStartOnTime_24HF,b.ScheduledEndOnTime_24HF,b.StudentMaxStrength,b.ClassDurationSeconds,b.InstructorLoginId,b.BusinessOwnerLoginId,b.GroupId,b.CreatedOn, insBO.FirstName + ' ' + insBO.LastName as InstructorFullName, 
		insBO.BusinessLogo as InstructorBusinessLogo, dbo.GetBusinessLogoImageWithPath(insBO.BusinessLogo) as InstructorBusinessLogoWithPath, insBO.ProfileImage as InstructorProfileImage, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath, g.Name as GroupName, g.GroupImage, dbo.GetGroupImageWithPath(g.GroupImage) as GroupImageWithPath, b.Status
		INTO #GetAllBatchesByUserLoginId
		from [Batches] b
		inner join Groups g on b.GroupId = g.Id
		left join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		where b.BusinessOwnerLoginId = @businessOwnerLoginId
		and b.IsDeleted = 0 
		and
		(b.Name LIKE '%'+@searchFilter+'%' OR
		b.StudentMaxStrength LIKE '%'+@searchFilter+'%' OR
		b.ScheduledStartOnTime_24HF LIKE '%'+@searchFilter+'%' OR
		b.ScheduledEndOnTime_24HF LIKE '%'+@searchFilter+'%' OR
		g.Name LIKE '%'+@searchFilter+'%' OR
		insBO.FirstName + ' ' + insBO.LastName LIKE '%'+@searchFilter+'%'
		)

		set @totalRecords = (select Count(*) from #GetAllBatchesByUserLoginId);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'StudentMaxStrength' AND @sortOrder = 'ASC' THEN StudentMaxStrength END,
				CASE WHEN @sorting = 'StudentMaxStrength' AND @sortOrder = 'DESC' THEN StudentMaxStrength END DESC,
				CASE WHEN @sorting = 'ScheduledStartOnTime_24HF' AND @sortOrder = 'ASC' THEN ScheduledStartOnTime_24HF END,
				CASE WHEN @sorting = 'ScheduledStartOnTime_24HF' AND @sortOrder = 'DESC' THEN ScheduledStartOnTime_24HF END DESC,
				CASE WHEN @sorting = 'ScheduledEndOnTime_24HF' AND @sortOrder = 'ASC' THEN ScheduledEndOnTime_24HF END,
				CASE WHEN @sorting = 'ScheduledEndOnTime_24HF' AND @sortOrder = 'DESC' THEN ScheduledEndOnTime_24HF END DESC,
				CASE WHEN @sorting = 'ClassDurationSeconds' AND @sortOrder = 'ASC' THEN ClassDurationSeconds END,
				CASE WHEN @sorting = 'ClassDurationSeconds' AND @sortOrder = 'DESC' THEN ClassDurationSeconds END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CASE WHEN @sorting = 'InstructorFullName' AND @sortOrder = 'ASC' THEN InstructorFullName END,
				CASE WHEN @sorting = 'InstructorFullName' AND @sortOrder = 'DESC' THEN InstructorFullName END DESC,
				CASE WHEN @sorting = 'GroupName' AND @sortOrder = 'ASC' THEN GroupName END,
				CASE WHEN @sorting = 'GroupName' AND @sortOrder = 'DESC' THEN GroupName END DESC,
				ScheduledStartOnTime_24HF desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBatchesByUserLoginId
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
		CASE WHEN @sorting = 'StudentMaxStrength' AND @sortOrder = 'ASC' THEN StudentMaxStrength END,
		CASE WHEN @sorting = 'StudentMaxStrength' AND @sortOrder = 'DESC' THEN StudentMaxStrength END DESC,
		CASE WHEN @sorting = 'ScheduledStartOnTime_24HF' AND @sortOrder = 'ASC' THEN ScheduledStartOnTime_24HF END,
		CASE WHEN @sorting = 'ScheduledStartOnTime_24HF' AND @sortOrder = 'DESC' THEN ScheduledStartOnTime_24HF END DESC,
		CASE WHEN @sorting = 'ScheduledEndOnTime_24HF' AND @sortOrder = 'ASC' THEN ScheduledEndOnTime_24HF END,
		CASE WHEN @sorting = 'ScheduledEndOnTime_24HF' AND @sortOrder = 'DESC' THEN ScheduledEndOnTime_24HF END DESC,
		CASE WHEN @sorting = 'ClassDurationSeconds' AND @sortOrder = 'ASC' THEN ClassDurationSeconds END,
		CASE WHEN @sorting = 'ClassDurationSeconds' AND @sortOrder = 'DESC' THEN ClassDurationSeconds END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CASE WHEN @sorting = 'InstructorFullName' AND @sortOrder = 'ASC' THEN InstructorFullName END,
		CASE WHEN @sorting = 'InstructorFullName' AND @sortOrder = 'DESC' THEN InstructorFullName END DESC,
		CASE WHEN @sorting = 'GroupName' AND @sortOrder = 'ASC' THEN GroupName END,
		CASE WHEN @sorting = 'GroupName' AND @sortOrder = 'DESC' THEN GroupName END DESC,
		ScheduledStartOnTime_24HF desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBatchesByUserLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBranchTransactionPayment_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[sp_ManageBranchTransactionPayment_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	--declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF
	--Get Payments Details for Business 
	if(@mode=1)
	begin
		DECLARE @UserId TABLE (UserLoginId BIGINT)

			INSERT INTO @UserId
			SELECT DISTINCT o.UserLoginId
			FROM Orders o

			SELECT pr.TransactionID, pr.Method, pr.Amount,pr.CreatedOn, o.ItemType, o.TotalDiscount,  t.FirstName + t.LastName AS Name,CreatedByLoginId
			INTO #GetAllPaymentsBusiness
			FROM PaymentResponses pr
			INNER JOIN Orders o ON pr.OrderId = o.Id
			INNER JOIN (
					SELECT bo.Id, bo.FirstName, bo.LastName, bo.UserLoginId
					--, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath
					FROM BusinessOwners bo
					WHERE bo.UserLoginId IN (SELECT UserLoginId FROM @UserId)

					UNION ALL

					SELECT s.Id as StudentId, s.FirstName, s.LastName, s.UserLoginId
					--, dbo.GetStudentImageWithPath(s.ProfileImage) AS ProfileImageWithPath
					FROM Students s
					WHERE s.UserLoginId IN (SELECT UserLoginId FROM @UserId)
				) t ON t.UserLoginId = o.UserLoginId
			WHERE o.OwnerUserLoginId = @userLoginId and
			(t.FirstName + t.LastName  LIKE '%' + @searchFilter + '%' OR
			pr.CreatedOn LIKE '%' + @searchFilter + '%' OR
			pr.TransactionID LIKE '%' + @searchFilter + '%' OR
			o.ItemType LIKE '%' + @searchFilter + '%' OR
			@searchFilter = '')
		
		SET @totalRecords = (SELECT COUNT(*) FROM #GetAllPaymentsBusiness);

		SELECT
			ROW_NUMBER() OVER (
			ORDER BY
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
			
						CreatedOn DESC
				) AS SerialNumber, *, @totalRecords AS TotalRecords
			FROM #GetAllPaymentsBusiness
			ORDER BY
			CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
            CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
			
			CreatedOn DESC
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		DROP TABLE #GetAllPaymentsBusiness

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusiness]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_ManageBusiness]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@UserLoginId bigint,
	@mode int
)
as 
begin 
	declare @businessMasterId nvarchar(max) = ''
	declare @studentMasterId nvarchar(max) = ''

	-- Get Basic Business Owner Profile Detail by BO-Login-Id
     if(@mode=1)
	 begin
		 select bo.FirstName, bo.LastName, bo.ProfileImage,ul.Email,
		 dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath, ul.IsCertified, bo.BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
		 from BusinessOwners bo 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		where bo.UserLoginId = @businessOwnerLoginId
	 end
	--Get Business Owner Detail List
     if(@mode=2)
	 begin
		select  bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name businessCategoryname
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id and ul.IsDeleted = 0
		inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
		where  ul.IsDeleted = 0
	 end	
	 -- Get Business Detail By BusinessOwnerId
	 else if(@mode=3)
	 begin
		select  bo.Id, bo.FirstName, bo.LastName,bo.BusinessCategoryId, bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name businessCategoryname, 
		bo.Address, ul.FacebookProfileLink,ul.InstagramProfileLink,ul.TwitterProfileLink
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id and ul.IsDeleted = 0
		inner join BusinessCategories bc on BusinessCategoryId = bc.Id 
		where bo.Id =@id  and ul.IsDeleted = 0
		--where bo.UserLoginId = @id  and ul.IsDeleted = 0
	 end
	 -- Get Business Owner Table Data By Business-Owner-Login-Id
	 else if(@mode=4)
	 begin
		select * from BusinessOwners bo where bo.UserLoginId = @businessOwnerLoginId
	 end
	 ----To get the business detail
	if (@mode=5)
	begin
		Select bo.Id,bo.UserLoginId, ul.Id as BusinessOwnerLoginId, ul.Email, ul.PhoneNumber ,bo.FirstName+ ' ' + bo.LastName as Name,bo.BusinessCategoryId, bo.BusinessSubCategoryId, bo.IsAccountAccepted,(CASE 
				WHEN bo.IsAccountAccepted = 1 THEN 'Accepted'
				ELSE 'Rejected'end ) as AccountStatus,bo.About,bo.IsPrimeMember,(CASE 
				WHEN bo.IsPrimeMember= 1 THEN 'Yes'
				ELSE 'No'end  ) as IsPrimeMemberStatus, bo.BusinessName,ul.Address,ul.PhoneNumber,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as ProfileImage, bc.Name as BusinessCategoryName,ul.UniqueUserId, IsNULL(ul.MasterId,'') as MasterId
		from UserLogins ul
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		where bo.UserLoginId = @businessOwnerLoginId
	end
	-----To get the registeration detail for business
	if(@mode=6)
	begin 
		select ul.Id,ul.Email,ul.PhoneNumber,ul.Password,bo.FirstName,bo.LastName,bo.BusinessCategoryId, bo.BusinessSubCategoryId, bc.ParentBusinessCategoryId as ParentBusinessCategoryId
		from BusinessOwners bo 
		 inner join UserLogins ul on bo.UserLoginId = ul.Id
		 inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		Where bo.userLoginId  = @businessOwnerLoginId
	end
	-- Get Business Detail for Profile-Page-View-VisitorUser By BusinessOwnerLoginId
	else if(@mode=7)
	begin
		select  bo.Id, bo.FirstName, bo.LastName, bo.BusinessName, bo.BusinessCategoryId, bo.BusinessSubCategoryId, bo.ProfileImage, bo.BusinessLogo, ul.Country, ul.State, ul.City, ul.Address, ul.Pincode, ul.FullAddressLocation, ul.Latitude, ul.Longitude, ul.IsCertified,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, 
		bsc.Name as BusinessSubCategoryName,
		(select Count(*) from FollowUsers fu where fu.FollowerUserLoginId = @businessOwnerLoginId) as TotalFollowings,
		(select Count(*) from FollowUsers fu where fu.FollowingUserLoginId = @businessOwnerLoginId) as TotalFollowers,
		(select Count(*) from StudentFavourites sf where sf.FavouriteUserLoginId = @businessOwnerLoginId) as TotalFavourites,
		(select Count(*) from Classes c where c.BusinessOwnerLoginId = @businessOwnerLoginId and c.ClassMode = 'Online') as OnlineClassesCount,
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		left join BusinessCategories bc on BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on BusinessSubCategoryId = bsc.Id 
		where bo.UserLoginId = @businessOwnerLoginId  
		and ul.IsDeleted = 0
	end
	----To Get Business Instructor without Authentication
	else if(@mode=8)
	begin
	    select s.Id,ul.Id as InstructorUserLoginId,bo.About,IsNull(ul.Address,'') as Address, s.FirstName +' '+ s.LastName as InstructorName,bsc.Name ,s.ProfileImage,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as InstructorImageWithPath, YEAR(GETDATE()) - YEAR(bo.DOB) -   CASE 
            WHEN MONTH(bo.DOB) > MONTH(GETDATE()) OR   (MONTH(bo.DOB) = MONTH(GETDATE()) AND DAY(bo.DOB) > DAY(GETDATE())) 
            THEN 1 
            ELSE 0 
        END as Age	from Staffs s 
		inner join UserLogins ul on s.MasterId = ul.MasterId 
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where bsc.CategoryKey = 'instructor' and s.BusinessOwnerLoginId = @businessOwnerLoginId
	end
	--To Get Business Contact Detail
	else if(@mode=9)
	begin
	   SELECT  ISNULL(ul.Address, '') AS Address,ISNULL(ul.PhoneNumber, '') AS PhoneNumber, ISNULL(ul.Email, '') AS Email,
    ISNULL(ul.FacebookProfileLink, '') AS FacebookProfileLink,ISNULL(ul.LinkedInProfileLink, '') AS LinkedInProfileLink,
    ISNULL(ul.InstagramProfileLink, '') AS InstagramProfileLink,ISNULL(ul.TwitterProfileLink, '') AS TwitterProfileLink 
   FROM  UserLogins ul 
    WHERE ul.Id = @businessOwnerLoginId
	end
   ----To Get Business Professional
   else if(@mode=10)
   begin
       select IsNull(sf.FirstName +''+ sf.LastName,'') as BusinessName,IsNull(sf.ProfileImage,'') as ProfileImage,ISNULL(dbo.GetStaffProfileImageWithPath(sf.ProfileImage), '') AS BusinessProfileImageWithPath,IsNull(ul.FacebookProfileLink,'') as FacebookProfileLink,IsNull(ul.InstagramProfileLink,'') as InstagramProfileLink,IsNull(ul.LinkedInProfileLink,'') as LinkedInProfileLink,IsNull(ul.TwitterProfileLink,'') as TwitterProfileLink,IsNull(sf.Designation,'') as Designation from Staffs sf 
		inner join UserLogins ul on sf.MasterId = ul.MasterId 
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where  sf.IsProfessional = '1' and bsc.CategoryKey = 'instructor'  
		and sf.BusinessOwnerLoginId =  @businessOwnerLoginId

   end

   ---To Get Business ProfileTypeKey
   else if(@mode=11)
   begin
       SELECT bo.Id, bo.UserLoginId, pbt.[Key], pbt.[Name], bc.ProfilePageTypeId 
		FROM BusinessOwners bo
		INNER JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		INNER JOIN ProfilePageTypes pbt ON bc.ProfilePageTypeId = pbt.Id
		Where bo.UserLoginId = @businessOwnerLoginId;
   end
-------To Get BusinessOwners  Currently Working
else if(@mode=12)
begin
    select sf.Id,sf.BusinessOwnerLoginId,bo.FirstName +''+ bo.LastName as BusinessOwnerName, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoImage, bo.BusinessName
		from Staffs sf
		inner join UserLogins ul on sf.MasterId = ul.MasterId 
		inner join BusinessOwners bo on sf.BusinessOwnerLoginId = bo.UserLoginId		
		 where  ul.Id = @businessOwnerLoginId;
end
----To Get Business Instructor without Authentication for instructor profile
	else if(@mode=13)
	begin
	    select s.Id,ul.Id as InstructorUserLoginId,bo.About,ul.Address, s.FirstName +' '+ s.LastName as InstructorName,bsc.Name ,s.ProfileImage,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as InstructorImageWithPath, YEAR(GETDATE()) - YEAR(bo.DOB) -   CASE 
            WHEN MONTH(bo.DOB) > MONTH(GETDATE()) OR   (MONTH(bo.DOB) = MONTH(GETDATE()) AND DAY(bo.DOB) > DAY(GETDATE())) 
            THEN 1 
            ELSE 0 
        END as Age	from Staffs s 
		inner join UserLogins ul on s.MasterId = ul.MasterId 
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where bsc.CategoryKey = 'instructor' and ul.Id != @businessOwnerLoginId
	end
	-- Get Business Detail By BusinessOwnerLoginId (In Visitor -Panel)
	 else if(@mode=14)
	 begin
		SELECT  bo.Id,bo.UserLoginId, bo.FirstName, bo.LastName, bo.BusinessCategoryId, bo.BusinessSubCategoryId, bo.ProfileImage, bo.BusinessLogo, ul.Email, ul.Status, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bc.Name businessCategoryname,  bo.Address, ISNULL(ul.FacebookProfileLink, '') as FacebookProfileLink, ISNULL(ul.InstagramProfileLink, '') as InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') as TwitterProfileLink, COUNT(*) AS TotalReviewsEntered,  ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, COALESCE(SUM(r.Rating), 0) AS TotalRating,ul.UniqueUserId
			FROM BusinessOwners bo
			INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id AND ul.IsDeleted = 0
			INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId = bc.Id 
			LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId
			WHERE bo.UserLoginId = @businessOwnerLoginId AND ul.IsDeleted = 0
			GROUP BY bo.Id,bo.UserLoginId, bo.FirstName, bo.LastName, bo.BusinessCategoryId, bo.BusinessSubCategoryId, bo.ProfileImage, bo.BusinessLogo, ul.Email, ul.Status, bo.Address, ul.FacebookProfileLink, ul.InstagramProfileLink, ul.TwitterProfileLink, ul.UniqueUserId, bc.Name, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo);
	 end
	 -- To Get Instructor Profile Detail
	 else if(@mode=15)
	 begin
	    SELECT bo.Id,bo.UserLoginId, ISNULL(ul.Address, '') AS Address, bo.FirstName + ' ' + bo.LastName AS BusinessName,bo.FirstName ,bo.LastName,bo.DOB,bo.ProfileImage,ul.Email,ul.PhoneNumber,ul.PhoneNumber_CountryCode,
		bo.ProfileImage,dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,
		COUNT(*) AS TotalReviewsEntered,ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
		COALESCE(SUM(r.Rating), 0) AS TotalRating,  IsNull(ul.UniqueUserId,'') as UniqueUserId,ISNULL(ul.FacebookProfileLink, '') as FacebookProfileLink, ISNULL(ul.InstagramProfileLink, '') as InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') as TwitterProfileLink 
		FROM
			BusinessOwners bo
		INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
		Left JOIN Reviews r ON bo.UserLoginId = r.ItemId
		WHERE bo.UserLoginId = @businessOwnerLoginId
		GROUP BY bo.Id,bo.UserLoginId, ul.Address, bo.FirstName + ' ' + bo.LastName,bo.FirstName ,bo.LastName,bo.DOB,bo.ProfileImage,ul.Email,ul.PhoneNumber,ul.PhoneNumber_CountryCode, bo.ProfileImage,
			dbo.GetBusinessProfileImageWithPath(bo.ProfileImage),  ul.UniqueUserId,ul.FacebookProfileLink, ul.InstagramProfileLink, ul.TwitterProfileLink;
	 end
	 -- Get Business and User Master-Id by User-Login-Id (Business or Staff)
	 else if(@mode=16)
	 begin
		select ISNULL(ul.MasterId, '') as BusinessMasterId, ISNULL(studentUL.MasterId, '') as StudentUserMasterId, bo.UserLoginId as BusinessOwnerLoginId, bo.StudentUserLoginId, IsNull(ul.UniqueUserId, '') as BusinessUniqueUserId, ISNULL(studentUL.UniqueUserId, '') as StudentUniqueUserId
		from BusinessOwners bo
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		left join UserLogins studentUL on bo.StudentUserLoginId = studentUL.Id
		where bo.UserLoginId = @UserLoginId
		Union 
		select ISNULL(ul.MasterId, '') as BusinessMasterId, ISNULL(studentUL.MasterId, '') as StudentUserMasterId, s.UserLoginId as BusinessOwnerLoginId, studentUL.Id as StudentUserLoginId, IsNull(ul.UniqueUserId, '') as BusinessUniqueUserId, ISNULL(studentUL.UniqueUserId, '') as StudentUniqueUserId
				from Staffs s
				inner join UserLogins ul on s.UserLoginId = ul.Id
				left join UserLogins studentUL on s.MasterId = studentUL.MasterId
				where s.UserLoginId = @UserLoginId and ul.IsDeleted = 0
	 end
	 -- Get Temporary Ids by User-Login-Id (Business or staff)
	 else if(@mode=17)
	 begin
		
		select @businessMasterId = ISNULL(t.BusinessMasterId, ''), @studentMasterId = ISNULL(t.StudentUserMasterId, '')
		from (
			select ISNULL(ul.MasterId, '') as BusinessMasterId, ISNULL(studentUL.MasterId, '') as StudentUserMasterId, bo.UserLoginId as BusinessOwnerLoginId, bo.StudentUserLoginId, IsNull(ul.UniqueUserId, '') as BusinessUniqueUserId, ISNULL(studentUL.UniqueUserId, '') as StudentUniqueUserId
			from BusinessOwners bo
			inner join UserLogins ul on bo.UserLoginId = ul.Id
			left join UserLogins studentUL on bo.StudentUserLoginId = studentUL.Id
			where bo.UserLoginId = @UserLoginId
			Union 
			select ISNULL(ul.MasterId, '') as BusinessMasterId, ISNULL(studentUL.MasterId, '') as StudentUserMasterId, s.UserLoginId as BusinessOwnerLoginId, studentUL.Id as StudentUserLoginId, IsNull(ul.UniqueUserId, '') as BusinessUniqueUserId, ISNULL(studentUL.UniqueUserId, '') as StudentUniqueUserId
					from Staffs s
					inner join UserLogins ul on s.UserLoginId = ul.Id
					left join UserLogins studentUL on s.MasterId = studentUL.MasterId
					where s.UserLoginId = @UserLoginId and ul.IsDeleted = 0
		) t
		

		select ISNULL(ul.MasterId, '') as BusinessMasterId, ISNULL(studentUL.MasterId, '') as StudentUserMasterId, s.UserLoginId as BusinessLoginId, studentUL.Id as StudentUserLoginId, IsNull(ul.UniqueUserId, '') as BusinessUniqueUserId, ISNULL(studentUL.UniqueUserId, '') as StudentUniqueUserId, 
			bo.BusinessName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
		from Staffs s
		inner join BusinessOwners bo on s.BusinessOwnerLoginId = bo.UserLoginId
		inner join UserLogins ul on s.UserLoginId = ul.Id
		left join UserLogins studentUL on s.MasterId = studentUL.MasterId
		where s.MasterId != '' and (s.MasterId = @businessMasterId or s.MasterId = @studentMasterId) and ul.IsDeleted = 0
	 end
	 --- To Get Business (staff) Working Detail  through Staff UserLoginId 
	 else if (@mode=18)
	 begin
	     select sf.Id,sf.BusinessOwnerLoginId,bo.FirstName +''+ bo.LastName as BusinessOwnerName, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoImage, bo.BusinessName
		from Staffs sf
		inner join BusinessOwners bo on sf.BusinessOwnerLoginId = bo.UserLoginId		
		 where sf.MasterId = (select MasterId from Staffs sf  where sf.UserLoginId  =  @userLoginId)
	 end
	 --- To Get Business User Detail For (Others-Profile detail)
	 else if(@mode=19)
	begin
		select bo.Id, CONCAT(bo.FirstName, ' ', bo.LastName) AS Name, bo.UserLoginId,ISNULL(bo.ProfileImage, '') AS ProfileImage,IsNULL(bo.About,'') as About,ISNULL(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), '') AS ProfileImageWithPath, ISNULL(ul.FacebookProfileLink, '') AS FacebookProfileLink,ISNULL(ul.LinkedInProfileLink, '') AS LinkedInProfileLink, ISNULL(ul.InstagramProfileLink, '') AS InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') AS TwitterProfileLink, ISNUll(ul.Address, '') as Address, ISNull(ul.Country, '') as Country,  IsNull(ul.State, '') as State,IsNull(ul.MasterId,'') as MasterId,  IsNull(ul.City, '') as City, IsNull(ul.Email, '') as Email, IsNull(ul.PhoneNumber, '') as PhoneNumber, IsNull(bo.DOB, '') as DOB, IsNULL(urc.Summary,'') as Summary,IsNull(urc.Languages,'') as Languages,IsNULL(urc.Skills,'') as Skills,IsNULL (urc.Freelance,'') as Freelance,IsNULL(bcc.Name,'') as BusinessCategoryName 
		from BusinessOwners bo 
		inner join BusinessCategories bc on bo.BusinessSubCategoryId = bc.Id
		inner join BusinessCategories bcc on bo.BusinessCategoryId = bcc.Id
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join ProfilePageTypes p on bc.ProfilePageTypeId = p.Id
		inner join UserResumeContents urc on ul.Id = urc.UserLoginId
		where bc.menuTag = 'Other' and bo.UserLoginId = @userLoginId
	end
	-- Get Instructors List for Home Page
	else if(@mode=20)
	begin
		select bo.Id, bo.UserLoginId, CONCAT(bo.FirstName, ' ', bo.LastName) AS Name, ISNULL(bo.ProfileImage, '') AS ProfileImage, ISNULL(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), '') AS ProfileImageWithPath, ISNULL(ul.FacebookProfileLink, '') AS FacebookProfileLink,ISNULL(ul.LinkedInProfileLink, '') AS LinkedInProfileLink, ISNULL(ul.InstagramProfileLink, '') AS InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') AS TwitterProfileLink, IsNull(bo.CoverImage, '') as CoverImage, dbo.GetBusinessCoverImageWithPath(bo.CoverImage) as CoverImageWithPath,
		bsc.Name as BusinessSubCategoryName,
		ul.IsCertified, bo.Verified, dbo.GetBusinessVerifiedTextValue(bo.Verified) as VerifiedText,
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Dance') as decimal(18,2)) as AverageRating
		from BusinessOwners bo 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where ul.IsDeleted = 0 and ul.Status = 1 and bsc.CategoryKey = 'instructor' and bo.ShowOnHomePage = 1
	end
	----- To Get Business  Single Instructor Detail 
	else if(@mode=21)
    begin
	    select s.Id,ul.Id as InstructorUserLoginId,s.UserLoginId,bo.About,IsNull(ul.Address,'') as Address, s.FirstName +' '+ s.LastName as InstructorName,bsc.Name ,s.ProfileImage,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as InstructorImageWithPath, YEAR(GETDATE()) - YEAR(bo.DOB) -   CASE 
        WHEN MONTH(bo.DOB) > MONTH(GETDATE()) OR   (MONTH(bo.DOB) = MONTH(GETDATE()) AND DAY(bo.DOB) > DAY(GETDATE())) 
        THEN 1 
        ELSE 0 
		END as Age	from Staffs s 
		inner join UserLogins ul on s.MasterId = ul.MasterId 
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where bsc.CategoryKey = 'instructor' and s.UserLoginId=  @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessBranchDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessBranchDetail] 
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
------ To Get Business Branch Detail 
    if(@mode=1)
	begin
	    select b.Id,bo.UserLoginId,b.BranchBusinessLoginId,b.Name,ul.PhoneNumber,ul.Email,bo.BusinessSubCategoryId,bo.FirstName ,bo.LastName,ul.Password,b.Status
		from Branches b 
		inner join BusinessOwners bo on bo.UserLoginId = b.BranchBusinessLoginId 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		where b.IsDeleted = 0 and b.BranchBusinessLoginId =  @businessOwnerLoginId
	end
	--- To Get Braches Count Detail By BusinessOwnerLoginId (Classic-Dance) detail
	else if(@mode=2)
	begin 
		select bo.Id,Concat(bo.FirstName ,'',bo.LastName) as BusinessOwnerName,IsNULl(ul.Address,'') as Address,IsNULL(ul.State,'') as State,IsNULL(ul.City,'') as City,IsNULL(ul.Country,'') as Country,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,COUNT(*) OVER () AS TotalCount from BusinessOwners bo 
			inner join Branches b on bo.UserLoginId = b.BranchBusinessLoginId
			inner join UserLogins ul on b.BranchBusinessLoginId = ul.Id where b.BusinessOwnerLoginId = @businessOwnerLoginId and b.IsDeleted = 0
	end
	
end


GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessBranches_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessBranches_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All View Detail for Branches  in business owner
	if(@mode=1)
	begin
	    select b.Id,bo.UserLoginId,b.Name as BranchName,b.BranchBusinessLoginId,ul.PhoneNumber,bo.BusinessName,ul.Email,CONCAT(bo.FirstName,  ' ', bo.LastName) as BusinessOwnerName,IsNull(bo.Address,'') as Address,bo.BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,b.CreatedOn,(CONVERT(varchar, b.CreatedOn,106)) as CreatedOn_FormatDate,b.Status
		Into  #AllBranchesDetailByBusinessOwner
		from Branches b 
		inner join BusinessOwners bo on bo.UserLoginId = b.BranchBusinessLoginId 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		where b.IsDeleted = 0 and b.BusinessOwnerLoginId =  @businessOwnerLoginId 
		and
		(b.Name  LIKE '%'+@searchFilter+'%' OR
	    ul.PhoneNumber LIKE '%'+@searchFilter+'%' OR
		  bo.BusinessName LIKE '%'+@searchFilter+'%' OR
		  ul.Email Like '%' +@searchFilter+ '%' OR
		   bo.FirstName + ''+bo.LastName  Like '%' +@searchFilter+ '%' OR
		   bo.Address Like '%' +@searchFilter+ '%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllBranchesDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BranchName' AND @sortOrder = 'ASC' THEN BranchName END,
				CASE WHEN @sorting = 'BranchName' AND @sortOrder = 'DESC' THEN BranchName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'BusinessOwnerName' AND @sortOrder = 'ASC' THEN BusinessOwnerName END,
				CASE WHEN @sorting = 'BusinessOwnerName' AND @sortOrder = 'DESC' THEN BusinessOwnerName END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'ASC' THEN Address END,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'DESC' THEN Address END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllBranchesDetailByBusinessOwner
		order by
			CASE WHEN @sorting = 'BranchName' AND @sortOrder = 'ASC' THEN BranchName END,
				CASE WHEN @sorting = 'BranchName' AND @sortOrder = 'DESC' THEN BranchName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'BusinessOwnerName' AND @sortOrder = 'ASC' THEN BusinessOwnerName END,
				CASE WHEN @sorting = 'BusinessOwnerName' AND @sortOrder = 'DESC' THEN BusinessOwnerName END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'ASC' THEN Address END,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'DESC' THEN Address END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllBranchesDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessBranchLocationDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessBranchLocationDetail] 
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@state nvarchar(max),
@city nvarchar(max),
@mode int
)
as
begin
--- To Get Braches Count Detail By BusinessOwnerLoginId (Classic-Dance) detail
 if(@mode=1)
	begin 
		select bo.Id,Concat(bo.FirstName ,'',bo.LastName) as BusinessOwnerName,IsNull(bo.BusinessName,'') as BusinessName,IsNULl(ul.Address,'') as Address,IsNULL(ul.State,'') as State,IsNULL(ul.City,'') as City,IsNULL(ul.Country,'') as Country,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,COUNT(*) OVER () AS TotalCount from BusinessOwners bo 
			inner join Branches b on bo.UserLoginId = b.BranchBusinessLoginId
			inner join UserLogins ul on b.BranchBusinessLoginId = ul.Id where  b.IsDeleted = 0 and ul.State= @state and ul.City = @city
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessBranchStudent_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessBranchStudent_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All View Detail for Student  in business owner
	if(@mode=1)
	begin
	    SELECT  s.Id  as StudentId,bo.UserLoginId ,s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) AS ProfileImageWithPath,
        s.FirstName + ' ' + s.LastName AS StudentName,ul.CreatedOn,(CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate,ul.PhoneNumber,ul.MasterId
		Into  #AllStudentBranchDetailByBusinessOwner
		
    FROM Students s
	inner join BusinessStudents bs on  s.Id = bs.StudentId
	Inner join UserLogins ul on  s.UserLoginId = ul.Id
	Inner join BusinessOwners bo on bs.BusinessOwnerId = bo.Id
    WHERE bo.UserLoginId = @userLoginId and ul.IsDeleted = 0
		and
		(
		    ul.PhoneNumber Like '%' +@searchFilter+ '%' OR
		   s.FirstName + ''+s.LastName  Like '%' +@searchFilter+ '%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStudentBranchDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStudentBranchDetailByBusinessOwner
		order by
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStudentBranchDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessCategory]
(
	@id bigint,
	@parentBusinessCategoryId bigint,
	@mode int
)
as
begin
	-- Get All Business Categories - Non-Deleted
	if(@mode=1)
	begin
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath, bc.CategoryKey, bc.ProfilePageTypeId, bc.MenuTag
		from BusinessCategories bc where bc.IsDeleted = 0
	end
	-- Get All Active Business Categories 
	else if(@mode=2)
	begin
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath , bc.CategoryKey, bc.ProfilePageTypeId, bc.MenuTag
		from BusinessCategories bc where bc.IsDeleted = 0 and bc.IsActive = 1
	end
	-- Get Business-Category-By-Id
	else if(@mode=3)
	begin
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath, bc.CategoryKey, bc.ProfilePageTypeId, bc.MenuTag
		from BusinessCategories bc where bc.IsDeleted = 0 and bc.Id = @id
	end
	-- Delete Business Category
	else if(@mode=4)
	begin
		 if not exists(select Id from BusinessCategories bc where bc.Id = @id and bc.IsDeleted = 0)
		 begin
			select -1 as ret, 'Business Category not exists!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessCategoryNot_Exists' as resourceKey
		 end
		 else 
		 begin
			declare @parentId bigint
			select @parentId = bc.ParentBusinessCategoryId from BusinessCategories bc where bc.Id = @id and bc.IsDeleted = 0

			BEGIN TRY
				BEGIN TRANSACTION
					-- if business category is a main category then soft delete sub-categories
					if(@parentId = 0)
					begin
						update BusinessCategories set IsDeleted = 1, DeletedOn = GETUTCDATE() where ParentBusinessCategoryId = @id
					end

					update BusinessCategories set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id
					select 1 as ret, 'Business Category successfully deleted!' as responseMessage, 'SuperAdminPanel' resourceFileName, 'BusinessCategoryDeleted_SuccessMessage' resourceKey
				COMMIT
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0
					ROLLBACK
				select -1 as ret, 'Something exception occurred!' as responseMessage, 'SuperAdminPanel' resourceFileName, 'ExceptionOccured_ErrorMessage' resourceKey 
			END CATCH
			
		 end
	end
	-- Get All Active Parent Business Categories 
	else if(@mode=5)
	begin 
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath from BusinessCategories bc where bc.IsDeleted = 0 and bc.IsActive = 1 and bc.ParentBusinessCategoryId = 0
	end
	-- Change Business-Category Status by Id
	else if(@mode=6)
	begin
		update BusinessCategories set IsActive = (case IsActive when 1 then 0 else 1 end)
			where Id = @id

		select 1 as ret, 'Category status has been successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'BusinessCategoryStatus_SuccessMessage' as resourceKey
	end
	-- Get All Active Sub-Categories by Parent-Business-Category
	else if(@mode=7)
	begin 
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, bc.CategoryKey,dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath from BusinessCategories bc where bc.IsDeleted = 0 and bc.IsActive = 1 and bc.ParentBusinessCategoryId = @parentBusinessCategoryId
	end
	--- Get All ParentBusinessCategoryId  List where Id Is Zero 
	else if(@mode=8)
	begin
	    select cct.Id,cct.Name from ClassCategoryTypes cct where cct.ParentClassCategoryTypeId = 0 and cct.IsDeleted = 0
	end
	--- Get All  SubCategory  List Where Category Key b2b
	else if(@mode=9)
	begin
	    select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage,bc.CategoryKey,dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath 
		from BusinessCategories bc where bc.IsDeleted = 0 and bc.IsActive = 1 and bc.ParentBusinessCategoryId in (select Id from BusinessCategories where ParentBusinessCategoryId = 0  and categoryKey = 'b2b')
	end
	--- Get All Active B2B Sub-Categories List for Home Page
	else if(@mode=10)
	begin
	    select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage,bc.CategoryKey,dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath 
		from BusinessCategories bc where bc.IsDeleted = 0 and bc.IsActive = 1 and bc.ParentBusinessCategoryId in (select Id from BusinessCategories where  bc.ParentBusinessCategoryId != 0  and categoryKey = 'b2b')
	end
	-- Get Business List by business-Sub-Category-Id and Home-Page-Visibility For Home Page
	else if(@mode=11)
	begin
		select 
		bo.Id, bo.UserLoginId, bo.BusinessName, bo.FirstName, bo.LastName, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath, bo.BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.Verified, dbo.GetBusinessVerifiedTextValue(bo.Verified),
		bsc.Name as SubCategoryName, ul.IsCertified, IsNull(bo.CoverImage, '') as CoverImage, dbo.GetBusinessCoverImageWithPath(bo.CoverImage) as CoverImageWithPath
		from BusinessOwners bo 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where (@id = 0 OR bo.BusinessSubCategoryId = @id) 
		and bc.CategoryKey = 'b2b'
		and bo.ShowOnHomePage = 1 
		and ul.IsDeleted = 0 
		and ul.Status = 1
	end
	-- Get All Business-Categories for Instructor.
	else if (@mode = 12)
	begin
		select bc.Id, bc.ParentBusinessCategoryId, bc.Name, bc.IsActive, bc.CategoryImage, bc.CategoryKey,dbo.GetBusinessCategoryImageWithPath(bc.CategoryImage) as CategoryImageWithPath from BusinessCategories bc where CategoryKey ='instructor';
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessClassicDanceTechniqueDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessClassicDanceTechniqueDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--- TO Get Classic Dance Technique Detail 
   if(@mode =1)
	begin
	    select cdt.Id,cdt.Title,cdt.SubTitle,cdt.TechniqueImage,dbo.GetClassicDanceTechniqueImageWithPath(cdt.TechniqueImage)  as TechniqueImagePath from ClassicDanceTechniques  cdt where cdt.UserLoginId = @userLoginId
		
	end
	---- To Get Business Content Classic Dance Detail By Id 
else if(@mode=2)
      begin
		  select ccp.Id,ccp.UserLoginId,ccp.Title,ccp.Description,ccp.TechniqueItemList from BusinessContentClassicDanceTechnique_PPCMeta ccp where  ccp.Id = @id
	  end
---- To Get Business Content Classic Dance Detail By UserLoginId
else if(@mode=3)
     begin
	    select ccp.Id,ccp.UserLoginId,ccp.Title,ccp.Description,ccp.TechniqueItemList
		from BusinessContentClassicDanceTechnique_PPCMeta ccp 
		where  ccp.UserLoginId = @userLoginId and ccp .IsDeleted = 0
	 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessClassicDanceVideoDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[sp_ManageBusinessClassicDanceVideoDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--- To get Business Classic Dance Video Detail 
   if(@mode=1)
    begin
	     select ccv.Id,ccv.UserLoginId,ccv.Title,ccv.SubTitle,ccv.Note,ccv.ButtonText,ccv.ButtonLink,ccv.ButtonText1,ccv.ButtonLink1,ccv.VideoLink,ISNULL(ccv.VideoImage, '') AS VideoImage,dbo.GetClassicDanceImageWithPath(ccv.VideoImage) as VideoImageWithPath from BusinessContentClassicDanceVideoSection_PPCMeta ccv 
    end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessClassPauseRequest_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessClassPauseRequest_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
	
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All View Detail for Branches  in business owner
	if(@mode=1)
	begin
	    SELECT  cp.Id, CONCAT(s.FirstName, '', s.LastName) as StudentName, s.UserLoginId as StudentUserLoginId, dbo.GetStudentImageWithPath(s.ProfileImage) as StudentProfileImageWithPath,ul.MasterId,cp.ClassBookingId,c.Name as ClassName,cp.PauseStartDate,
		cp.PauseEndDate, cp.Reason,cp.PauseDays, cp.Status,cp.CreatedOn,(CONVERT(varchar, cp.CreatedOn,106)) as CreatedOn_FormatDate
		Into  #AllClassPauseRequestByBusinessOwner
		FROM ClassPauseRequests cp
		inner join ClassBookings cb ON cp.ClassBookingId = cb.Id
		inner join  Classes c ON cb.ClassId = c.Id
		inner join  Students s ON cp.UserLoginId = s.UserLoginId 
		inner join  UserLogins ul ON s.UserLoginId = ul.Id
		WHERE cp.BusinessOwnerLoginId = @businessOwnerLoginId
		and
		(c.Name  LIKE '%'+@searchFilter+'%' OR
		  cp.PauseStartDate LIKE '%'+@searchFilter+'%' OR
		  cp.PauseEndDate Like '%' +@searchFilter+ '%' OR
		   s.FirstName + ''+s.LastName  Like '%' +@searchFilter+ '%' OR
		   cp.Reason Like '%' +@searchFilter+ '%' OR
		     cp.Status Like '%' +@searchFilter+ '%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllClassPauseRequestByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'ASC' THEN PauseStartDate END,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'DESC' THEN PauseStartDate END DESC,
				CASE WHEN @sorting = 'PauseEndDate' AND @sortOrder = 'ASC' THEN PauseEndDate END,
				CASE WHEN @sorting = 'PauseEndDate' AND @sortOrder = 'DESC' THEN PauseEndDate END DESC,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'ASC' THEN Reason END,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'DESC' THEN Reason END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllClassPauseRequestByBusinessOwner
		order by
			CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'ASC' THEN PauseStartDate END,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'DESC' THEN PauseStartDate END DESC,
				CASE WHEN @sorting = 'PauseEndDate' AND @sortOrder = 'ASC' THEN PauseEndDate END,
				CASE WHEN @sorting = 'PauseEndDate' AND @sortOrder = 'DESC' THEN PauseEndDate END DESC,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'ASC' THEN Reason END,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'DESC' THEN Reason END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllClassPauseRequestByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessClassTimeDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessClassTimeDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@classDays nvarchar(max),
@mode int
)
as
begin
---To Show Class Detail 
if(@mode=1)
 begin 
    SELECT c.Name AS Name, c.ClassDays, b.Name AS BatchName,  b.ScheduledStartOnTime_24HF,  b.ScheduledEndOnTime_24HF,
    CONCAT(bo.FirstName, '', bo.LastName) as BusinessName,bo.FirstName + ' ' + bo. LastName as InstructorFullName,ct.Name as CategoryName 
	FROM   Classes c
	INNER JOIN  Batches b ON c.BusinessOwnerLoginId = b.BusinessOwnerLoginId
	inner join ClassBatches cb on c.Id = cb.ClassId
	INNER JOIN  BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
	inner join ClassCategoryTypes ct on c.ClassCategoryTypeId = ct.Id
	WHERE  c.BusinessOwnerLoginId = @businessOwnerLoginId
    AND (
        (',' + c.ClassDays + ',' LIKE '%' + @classDays + '%')
        OR
        (c.ClassDays = 'All Days')
    );
 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAbout]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentAbout]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
 begin
 if(@mode=1)
  begin
     select  bo.UserLoginId,IsNull(bo.About,'') as About,ISNULL(bca.Id, '') AS Id,ISNULL(bca.UserLoginId, '') AS UserLoginId,IsNull(bca.Title,'') as Title,ISNULL(bca.SubTitle, '') AS SubTitle, ISNULL(bca.Description, '') AS Description, ISNULL(bca.AboutImage, '') AS AboutImage,dbo.GetAboutImageWithPath(bca.AboutImage) as AboutImageWithPath ,IsNull(c.Address,'') as Address,IsNull(c.HowToBookText,'') as HowToBookText,IsNull(ul.PhoneNumber,'') as PhoneNumber,IsNull(bo.BusinessLogo,'') as BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath ,IsNull(bo.BusinessName,'') as BusinessName
	  from BusinessContentAbouts bca
	    Left join Classes c on bca.UserLoginId = c.BusinessOwnerLoginId
		Left join UserLogins ul on bca.UserLoginId = ul.Id
	  right join BusinessOwners bo on bca.UserLoginId = bo.UserLoginId
	  where bo.UserLoginId = @businessOwnerLoginId
  end
 -----To Get About Detail For Dance Page
 else if(@mode=2)
 begin
    select  bo.UserLoginId,IsNull(bo.About,'') as About,ISNULL(bca.Id, '') AS Id,ISNULL(bca.UserLoginId, '') AS UserLoginId,ISNULL(bca.Title,'') as Title,ISNULL(bca.SubTitle, '') AS SubTitle, ISNULL(bca.Description, '') AS Description, ISNULL(bca.AboutImage, '') AS AboutImage,dbo.GetAboutImageWithPath(bca.AboutImage) as AboutImageWithPath 
	  from BusinessContentAbouts bca
	  right join BusinessOwners bo on bca.UserLoginId = bo.UserLoginId
	  where bo.UserLoginId = @businessOwnerLoginId
 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAboutService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentAboutService]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
begin
if(@mode=1)
begin
    select bcas.Id,bcas.UserLoginId,ISNULL(bcas.AboutServiceTitle,'') AS AboutServiceTitle,ISNULL(bcas.AboutServiceDescription,'') AS AboutServiceDescription,dbo.GetAboutServiceIconWithPath(bcas.AboutServiceIcon) as AboutServiceIconWithPath from BusinessContentAboutServiceDetails bcas
	where bcas.Id = @id and bcas.IsDeleted = 0 
end
 else if(@mode=2)
begin
    select bcas.Id,bcas.UserLoginId,ISNull(bcas.AboutServiceTitle,'') AS AboutServiceTitle,ISNull(bcas.AboutServiceDescription,'') as AboutServiceDescription,dbo.GetAboutServiceIconWithPath(IsNull(bcas.AboutServiceIcon,'')) AS AboutServiceIconWithPath
	from BusinessContentAboutServiceDetails bcas
	where bcas.UserLoginId = @businessOwnerLoginId and bcas.IsDeleted = 0 
end
-- To Get About Detail In Class-Detail For Visitor-Panel
else if(@mode=3)
      begin
          select bcas.Id,bcas.UserLoginId,ISNULL(bcas.AboutServiceTitle,'') AS AboutServiceTitle,ISNULL(bcas.AboutServiceDescription,'') AS AboutServiceDescription,dbo.GetAboutServiceIconWithPath(bcas.AboutServiceIcon) AS AboutServiceIconWithPath,ISNULL(c.Address,'') AS Address,ISNULL(c.HowToBookText,'') AS HowToBookText ,ISNULL(bca.Title,'') AS Title,ISNULL(bca.SubTitle, '') AS SubTitle, ISNULL(bca.Description, '') AS Description,IsNull(bca.AboutImage,'') AS AboutImage,dbo.GetAboutImageWithPath(ISNULL(bca.AboutImage, '')) AS AboutImageWithPath 
			 from BusinessContentAboutServiceDetails bcas 
			  Left join BusinessContentAbouts bca on bcas.UserLoginId = bca.UserLoginId
			 Left join Classes c on bcas.UserLoginId = c.BusinessOwnerLoginId
			 where bcas.UserLoginId =  @businessOwnerLoginId and bcas.IsDeleted = 0 
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAboutService_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentAboutService_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  About Service in business owner
	if(@mode=1)
	begin
	     select bcas.Id,bcas.UserLoginId,bcas.AboutServiceTitle, ISNULL(bcas.AboutServiceDescription, '') AS AboutServiceDescription,bcas.AboutServiceIcon,dbo.GetAboutServiceIconWithPath(bcas.AboutServiceIcon) as AboutServiceIconWithPath,bcas.CreatedOn, (CONVERT(varchar, bcas.CreatedOn,106)) as CreatedOn_FormatDate
		 INTO #AllAboutServiceDetailByBusinessOwner
		 from BusinessContentAboutServiceDetails bcas where UserLoginId = @businessOwnerLoginId  and bcas.IsDeleted = 0		
		and
		(bcas.AboutServiceTitle  LIKE '%'+@searchFilter+'%' OR
	    bcas.AboutServiceDescription LIKE '%'+@searchFilter+'%' OR
		  bcas.AboutServiceDescription LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllAboutServiceDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'AboutServiceTitle' AND @sortOrder = 'ASC' THEN AboutServiceTitle END,
				CASE WHEN @sorting = 'AboutServiceTitle' AND @sortOrder = 'DESC' THEN AboutServiceTitle END DESC,
				CASE WHEN @sorting = 'AboutServiceDescription' AND @sortOrder = 'ASC' THEN AboutServiceDescription END,
				CASE WHEN @sorting = 'AboutServiceDescription' AND @sortOrder = 'DESC' THEN AboutServiceDescription END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllAboutServiceDetailByBusinessOwner
		order by
		  CASE WHEN @sorting = 'AboutServiceTitle' AND @sortOrder = 'ASC' THEN AboutServiceTitle END,
				CASE WHEN @sorting = 'AboutServiceTitle' AND @sortOrder = 'DESC' THEN AboutServiceTitle END DESC,
				CASE WHEN @sorting = 'AboutServiceDescription' AND @sortOrder = 'ASC' THEN AboutServiceDescription END,
				CASE WHEN @sorting = 'AboutServiceDescription' AND @sortOrder = 'DESC' THEN AboutServiceDescription END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllAboutServiceDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAccessCourseDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentAccessCourseDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
if(@mode=1)
begin
   select bac.Id,bac.UserLoginId,bac.ProfilePageTypeId,bac.Title,bac.SubTitle,bac.Description,bac.CourseImage,dbo.GetAccessCourseImageWithPath(bac.CourseImage) as AccessCourseImageWithPath ,bac.AccessCourse from BusinessContentAccessCourseDetails bac where bac.UserLoginId = @userLoginId
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAudio_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentAudio_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Audio in business owner
	if(@mode=1)
	begin		     
	select bcp.Id,bcp.UserLoginId,bcp.ProfilePageTypeId,bcp.Title,bcp.ArtistName,bcp.AudioFile,dbo.GetAudioFileWithPath(bcp.AudioFile) as AudioFileWithPath,bcp.CreatedOn,(CONVERT(varchar, bcp.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 INTO #AllAudioDetailByBusinessOwner
		 from   BusinessContentPortfolios bcp  where UserLoginId = @businessOwnerLoginId  and bcp.IsDeleted = 0		
		and
		(bcp.ArtistName  LIKE '%'+@searchFilter+'%' OR
		  bcp.Title LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllAudioDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'ArtistName' AND @sortOrder = 'ASC' THEN ArtistName END,
				CASE WHEN @sorting = 'ArtistName' AND @sortOrder = 'DESC' THEN ArtistName END DESC,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllAudioDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'ArtistName' AND @sortOrder = 'ASC' THEN ArtistName END,
				CASE WHEN @sorting = 'ArtistName' AND @sortOrder = 'DESC' THEN ArtistName END DESC,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllAudioDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentAudio_PPCMetaDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentAudio_PPCMetaDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
-------To Get Portfolio Detail By UserLoginId
    if(@mode=1)
    begin
	select bcp.Id,bcp.UserLoginId,bcp.ProfilePageTypeId,bcp.Title,bcp.Description,bcp.PortfolioImage,dbo.GetPortfolioImageWithPath(bcp.PortfolioImage) AS PortfolioImageWithPath, bcp.AudioImage, dbo.GetAudioImageWithPath(bcp.AudioImage) AS AudioImageWithPath from BusinessContentPortfolio_PPCMeta bcp where UserLoginId = @businessOwnerLoginId
    end 
	------To Get Audio Detail By Id 
	else if(@mode=2)
	begin
	SELECT bcp.Id,bcp.UserLoginId,bcp.ProfilePageTypeId,bcp.Title,bcp.ArtistName, bcp.AudioFile,  dbo.GetAudioFileWithPath(bcp.AudioFile) AS AudioFileWithPath FROM  BusinessContentPortfolios bcp WHERE bcp.Id = @id;

	end
	------To Get Audio Detail By BusinessOwnerLoginIdId 
	else if(@mode=3)
	begin
	SELECT bcp.Id,bcp.UserLoginId,bcp.ProfilePageTypeId,bcp.Title,bcp.ArtistName,bcp.AudioFile,  dbo.GetAudioFileWithPath(bcp.AudioFile) AS AudioFileWithPath FROM  BusinessContentPortfolios bcp WHERE bcp.UserLoginId = @businessOwnerLoginId and bcp.IsDeleted=0

	end
end
GO
/****** Object:  StoredProcedure [dbo].[Sp_ManageBusinessContentBanner]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE procedure [dbo].[Sp_ManageBusinessContentBanner]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
 begin
 if(@mode=1)
  begin
     select bcb.Id,bcb.UserLoginId,bcb.Title,bcb.SubTitle, ISNULL(bcb.Description, '') AS Description,bcb.ButtonText,bcb.ButtonLink,bcb.BannerImage,dbo.GetBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath from BusinessContentBanners bcb where UserLoginId = @businessOwnerLoginId 
  end
 else if(@mode=2)
  begin
     select bcb.Id,bcb.UserLoginId,bcb.Title,bcb.SubTitle, ISNULL(bcb.Description, '') AS Description,bcb.ButtonText,bcb.ButtonLink,bcb.BannerImage,dbo.GetBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath from BusinessContentBanners bcb where bcb.Id = @id 
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCategories_Detail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentCategories_Detail]

(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId  bigint,
@mode int 
)
as
begin
if(@mode=1)
begin
    select bc.Id,bc.UserLoginId,bc.Title,bc.Description from BusinessContentCategories bc where bc.UserLoginId = @userLoginId
end  

end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentClass_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[sp_ManageBusinessContentClass_PPCMeta]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	if(@mode=1)
	begin
		select bcc.Id,bcc.UserLoginId,bcc.Description,bcc.Title from BusinessContentClass_PPCMeta bcc where bcc.UserLoginId = @businessOwnerLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentClassicDanceTechnique_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentClassicDanceTechnique_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All View Detail for Business Content Classic dance techniquwe  in business owner
	if(@mode=1)
	begin
	      select ccp.Id,ccp.UserLoginId,ccp.Description,ccp.TechniqueItemList,ccp.CreatedOn,(CONVERT(varchar, ccp.CreatedOn,106)) as CreatedOn_FormatDate
		Into  #AllBusinessContentClassicDanceDetailByBusinessOwner
		from BusinessContentClassicDanceTechnique_PPCMeta ccp 
		where ccp.IsDeleted = 0 and ccp.UserLoginId =  @businessOwnerLoginId
		and
		(ccp.Description  LIKE '%'+@searchFilter+'%' OR
	    ccp.TechniqueItemList LIKE '%'+@searchFilter+'%' OR
		
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllBusinessContentClassicDanceDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'ASC' THEN TechniqueItemList END,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'DESC' THEN TechniqueItemList END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllBusinessContentClassicDanceDetailByBusinessOwner
		order by
			CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'ASC' THEN TechniqueItemList END,
				CASE WHEN @sorting = 'TechniqueItemList' AND @sortOrder = 'DESC' THEN TechniqueItemList END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllBusinessContentClassicDanceDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentClient_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentClient_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Client in business owner
	if(@mode=1)
	begin
	   select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Name,bc.Description,bc.ClientImage, dbo.GetClientImageWithPath(bc.ClientImage) as ClientImageWithPath,bc.CreatedOn, (CONVERT(varchar, bc.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 INTO #AllClientDetailByBusinessOwner
		 from   BusinessContentClient_PPCMeta bc  where UserLoginId = @businessOwnerLoginId  and bc.IsDeleted = 0		
		and
		(bc.Name  LIKE '%'+@searchFilter+'%' OR
		  bc.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllClientDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllClientDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllClientDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentClient_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentClient_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
	------To Get Client Detail By Id 
	if(@mode=1)
	begin
	   select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Name,bc.Description,bc.ClientImage, dbo.GetClientImageWithPath(bc.ClientImage) as ClientImageWithPath from BusinessContentClient_PPCMeta bc where bc.Id = @id
	end
	------To Get Client Detail By BusinessOwnerLoginId 
	else if(@mode=2)
	begin
	   select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Name,bc.Description,bc.ClientImage, dbo.GetClientImageWithPath(bc.ClientImage) as ClientImageWithPath from BusinessContentClient_PPCMeta bc where bc.UserLoginId = @businessOwnerLoginId and bc.IsDeleted = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentContactInformation_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentContactInformation_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--- To Get Contact Information By UserLoginId 
   if(@mode=1)
  begin
     select c.Id,c.UserLoginId,c.Title,c.Description from BusinessContentContactInformation_PPCMeta c where c.UserLoginId = @userLoginId
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCourse_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentCourse_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Course in business owner
	if(@mode=1)
	begin
	   select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CourseSignIcon, dbo.GetCourseImageWithPath(bc.CourseSignIcon) as CourseImageWithPath,bc.CreatedOn, (CONVERT(varchar, bc.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 INTO #AllCourseDetailByBusinessOwner
		 from   BusinessContentCourseDetail_PPCMeta bc  where UserLoginId = @businessOwnerLoginId  and bc.IsDeleted = 0		
		and
		(bc.Title  LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllCourseDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllCourseDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllCourseDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCourseCategoryDetail_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentCourseCategoryDetail_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int 
) 
as
begin 
if(@mode=1)
begin
  SELECT   bcc.Id,  bcc.BusinessOwnerLoginId,  bcc.CourseCategoryId,  bc.Title,  bc.Description,  bc.CourseCategoryImage,
    dbo.GetCourseCategoryImageWithPath(bc.CourseCategoryImage) AS CourseCategoryImageWithPath
   FROM   BusinessContentCategoryCource_PPCMeta bcc
   INNER JOIN BusinessCourseCategories bc ON bcc.CourseCategoryId = bc.Id
   WHERE  bcc.BusinessOwnerLoginId =   @businessOwnerLoginId AND bcc.IsDeleted = 0;

end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCourseImage_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentCourseImage_PPCMeta] 
( 
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--------To Get Business Content Course detail By Id 
  if(@mode=1)
  begin
    select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CourseSignIcon, dbo.GetCourseImageWithPath(bc.CourseSignIcon) as CourseImageWithPath   from   BusinessContentCourseDetail_PPCMeta bc  where Id = @id
  end
  --------To Get Business Content Course detail By BusinessOwnerLoginId 
  else if(@mode=2)
       begin
         select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CourseSignIcon, dbo.GetCourseImageWithPath(bc.CourseSignIcon) as CourseImageWithPath   from   BusinessContentCourseDetail_PPCMeta bc  where UserLoginId = @businessOwnerLoginId and bc.IsDeleted = 0
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCurriculum_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentCurriculum_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Curriculum in business owner
	if(@mode=1)
	begin
	  select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CurriculumOptions, dbo.GetCurriculumImageWithPath(bc.CurriculumImage) as CurriculumImageWithPath ,bc.CreatedOn, (CONVERT(varchar, bc.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 INTO #AllCurriculumDetailByBusinessOwner
		 from   BusinessContentCurriculum_PPCMeta bc  where UserLoginId = @businessOwnerLoginId  and bc.IsDeleted = 0		
		and
		(bc.Title  LIKE '%'+@searchFilter+'%' OR
		bc.CurriculumOptions  LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllCurriculumDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CurriculumOptions' AND @sortOrder = 'ASC' THEN CurriculumOptions END,
				CASE WHEN @sorting = 'CurriculumOptions' AND @sortOrder = 'DESC' THEN CurriculumOptions END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllCurriculumDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CurriculumOptions' AND @sortOrder = 'ASC' THEN CurriculumOptions END,
				CASE WHEN @sorting = 'CurriculumOptions' AND @sortOrder = 'DESC' THEN CurriculumOptions END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllCurriculumDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentCurriculum_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentCurriculum_PPCMeta] 
( 
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--------To Get Business Content Curriculum detail By Id 
  if(@mode=1)
  begin
    select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CurriculumImage,bc.CurriculumOptions, dbo.GetCurriculumImageWithPath(bc.CurriculumImage) as CurriculumImageWithPath   from   BusinessContentCurriculum_PPCMeta bc  where Id = @id
  end
  --------To Get Business Content Curriculum detail By BusinessOwnerLoginId 
  else if(@mode=2)
       begin
         select bc.Id,bc.UserLoginId,bc.ProfilePageTypeId, bc.Title,bc.CurriculumImage,bc.CurriculumOptions, dbo.GetCurriculumImageWithPath(bc.CurriculumImage) as CurriculumImageWithPath   from   BusinessContentCurriculum_PPCMeta bc  where UserLoginId = @businessOwnerLoginId and bc.IsDeleted = 0
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEducation_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentEducation_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Education in business owner
	if(@mode=1)
	begin
	  select be.Id,be.UserLoginId,be.University,dbo.GetUniversityLogoWithPath(be.UniversityLogo) as UniversityLogoWithPath,be.CreatedOn, (CONVERT(varchar, be.CreatedOn,106)) as CreatedOn_FormatDate,be.UniversityImage,dbo.GetUniversityImageWithPath(be.UniversityImage) as UniversityImageWithPath,be.Description 	     
		 INTO #AllEducationDetailByBusinessOwner
		 from   BusinessContentEducation_PPCMeta be  where UserLoginId = @userLoginId  and be.IsDeleted = 0		
		and
		(
		be.University LIKE '%'+@searchFilter+'%' OR
		
		be.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllEducationDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
		
				CASE WHEN @sorting = 'University' AND @sortOrder = 'ASC' THEN University END,
				CASE WHEN @sorting = 'University' AND @sortOrder = 'DESC' THEN University END DESC,
		 	
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllEducationDetailByBusinessOwner
		order by
	
				CASE WHEN @sorting = 'University' AND @sortOrder = 'ASC' THEN University END,
				CASE WHEN @sorting = 'University' AND @sortOrder = 'DESC' THEN University END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllEducationDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEducation_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentEducation_PPCMeta] 
( 
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--------To Get Business Content Education detail By Id 
  if(@mode=1)
  begin
    select be.Id,be.UserLoginId,be.University,be.UniversityLogo,dbo.GetUniversityLogoWithPath(be.UniversityLogo) as UniversityLogoWithPath,be.UniversityImage,dbo.GetUniversityImageWithPath(be.UniversityImage) as UniversityImageWithPath ,be.Description  from   BusinessContentEducation_PPCMeta be  where Id = @id
  end

  else if(@mode=2)
  begin
    select be.Id,be.UserLoginId,be.University,be.UniversityLogo,dbo.GetUniversityLogoWithPath(be.UniversityLogo) as UniversityLogoWithPath,be.UniversityImage,dbo.GetUniversityImageWithPath(be.UniversityImage) as UniversityImageWithPath ,be.Description  from   BusinessContentEducation_PPCMeta be
  end
--------- To Get University Detail For BusinessPanel Detail ----------------------------
else if(@mode=3)
begin
   select  be.Id,be.UserLoginId,be.University,be.UniversityLogo,dbo.GetUniversityLogoWithPath(be.UniversityLogo) as UniversityLogoWithPath,be.UniversityImage,dbo.GetUniversityImageWithPath(be.UniversityImage) as UniversityImageWithPath ,be.Description ,bu.BusinessOwnerLoginId,bu.UniversityId from   BusinessContentEducation_PPCMeta be inner join BusinessContentUniversity_PPCMeta bu on be.Id = bu.UniversityId
   where bu.BusinessOwnerLoginId = @businessOwnerLoginId
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEvent_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentEvent_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
if(@mode=1)
 begin
    select bce.Id,bce.UserLoginId,bce.Description from BusinessContentEvent_PPCMeta bce where bce.UserLoginId = @businessOwnerLoginId
 end
end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEventCompanyDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentEventCompanyDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
   if(@mode=1)
   begin
        select bce.Id, bce.BusinessOwnerLoginId,bce.ProfilePageTypeId,bce.Title,bce.Description,bce.Image,dbo.GetEventCompanyImageWithPath(bce.Image)as EventCompanyImageWithPath ,bce.EventOptions from BussinessContentEventCompanyDetail_PPCMeta bce where bce.BusinessOwnerLoginId =  @businessOwnerLoginId
   end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEventImage_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentEventImage_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  Event Image in business owner
	if(@mode=1)
	begin
	     select bec.Id,bec.BusinessOwnerLoginId,bec.ProfilePageTypeId,bec.Image,dbo.GetBusinessContentEventImagesWithPath(bec.Image) as BusinessEventImagesWithPath,e.Title,bec.CreatedOn, (CONVERT(varchar, bec.CreatedOn,106)) as CreatedOn_FormatDate
		  INTO #AllEventImageDetailByBusinessOwner
		 from BusinessContentEventImages_PPCMeta bec inner join Events e on bec.EventId =  e.Id  where bec.BusinessOwnerLoginId = @businessOwnerLoginId and bec.IsDeleted = 0		
		and
		(
	    e.Title LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllEventImageDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllEventImageDetailByBusinessOwner
		order by
		  CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllEventImageDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentEventImageDetail_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentEventImageDetail_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@eventId bigint,
@mode int
)
as
begin
if(@mode=1)
begin
    select bec.Id,bec.BusinessOwnerLoginId,bec.ProfilePageTypeId,bec.Image,dbo.GetBusinessContentEventImagesWithPath(bec.Image) as BusinessEventImagesWithPath from BusinessContentEventImages_PPCMeta bec where bec.EventId= @eventId and bec.BusinessOwnerLoginId =  @businessOwnerLoginId

end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentFitness_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentFitness_PPCMeta]
(
@id bigint,
@businesOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
   if(@mode=1)
  begin
    select bcfm.Id,bcfm.UserLoginId,bcfm.Title,bcfm.Description,bcfm.FitnessImage,dbo.GetFitnessImageWithPath(bcfm.FitnessImage) as FitnessImageWithPath from BusinessContentFitnessMovement_PPCMeta bcfm where bcfm.UserLoginId = @businesOwnerLoginId
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentFitnessMovement_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentFitnessMovement_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Fitness Movementin business owner
	if(@mode=1)
	begin
	     select bcfm.Id,bcfm.UserLoginId,bcfm.Title, bcfm.Requirements,bcfm.Investment,bcfm.Inclusions,bcfm.Description,bcfm.CreatedOn, (CONVERT(varchar, bcfm.CreatedOn,106)) as CreatedOn_FormatDate
		 INTO #AllFitnessMovementDetailByBusinessOwner
		 from BusinessContentFitnessMovements bcfm where UserLoginId = @businessOwnerLoginId  and bcfm.IsDeleted = 0		
		and
		(bcfm.Title LIKE '%'+@searchFilter+'%' OR
	    bcfm.Requirements LIKE '%'+@searchFilter+'%' OR
		 bcfm.Investment LIKE '%'+@searchFilter+'%' OR
		 bcfm.Inclusions LIKE '%'+@searchFilter+'%' OR
		 bcfm.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllFitnessMovementDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Requirements' AND @sortOrder = 'ASC' THEN Requirements END,
				CASE WHEN @sorting = 'Requirements' AND @sortOrder = 'DESC' THEN Requirements END DESC,
				CASE WHEN @sorting = 'Investment' AND @sortOrder = 'ASC' THEN Investment END,
				CASE WHEN @sorting = 'Investment' AND @sortOrder = 'DESC' THEN Investment END DESC,
				CASE WHEN @sorting = 'Inclusions' AND @sortOrder = 'ASC' THEN Inclusions END,
				CASE WHEN @sorting = 'Inclusions' AND @sortOrder = 'DESC' THEN Inclusions END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllFitnessMovementDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Requirements' AND @sortOrder = 'ASC' THEN Requirements END,
				CASE WHEN @sorting = 'Requirements' AND @sortOrder = 'DESC' THEN Requirements END DESC,
				CASE WHEN @sorting = 'Investment' AND @sortOrder = 'ASC' THEN Investment END,
				CASE WHEN @sorting = 'Investment' AND @sortOrder = 'DESC' THEN Investment END DESC,
				CASE WHEN @sorting = 'Inclusions' AND @sortOrder = 'ASC' THEN Inclusions END,
				CASE WHEN @sorting = 'Inclusions' AND @sortOrder = 'DESC' THEN Inclusions END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllFitnessMovementDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentFitnessMovementDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentFitnessMovementDetail]
(
@id bigint,
@businesOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
-------- To Get Fitness Movement Detail For Profile Page Information
   if(@mode=1)
  begin
    select bcfm.Id,bcfm.UserLoginId,bcfm.Title,bcfm.Requirements,bcfm.Investment,bcfm.Inclusions,bcfm.Description from BusinessContentFitnessMovements bcfm where bcfm.id = @id
  end

  ------  To Get  Fitness Movement Detail For Gym Page for visitor panel to show detail 
 else if(@mode=2)
  begin
    select bcfm.Id,bcfm.UserLoginId,ISNull(bcfm.Title,'') as Title,ISNULL(bcfm.Requirements,'') as Requirements,bcfm.Investment,bcfm.Inclusions,IsNull(bcfm.Description ,'') as Description from BusinessContentFitnessMovements bcfm where bcfm.UserLoginId = @businesOwnerLoginId and bcfm.IsDeleted = 0
  end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentLanguage_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentLanguage_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Language in business owner
	if(@mode=1)
	begin
	   select bc.Id,bc.UserLoginId, bc.Language,bc.LanguageIcon, dbo.GetLanguageIconWithPath(bc.LanguageIcon) as LanguageIconWithPath,bc.CreatedOn, (CONVERT(varchar, bc.CreatedOn,106)) as CreatedOn_FormatDate  	     
		INTO #AllLanguageDetailByBusinessOwner
		 from   BusinessLanguages bc  where UserLoginId = @userLoginId  and bc.IsDeleted = 0		
		and
		(bc.Language  LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllLanguageDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Language' AND @sortOrder = 'ASC' THEN Language END,
				CASE WHEN @sorting = 'Language' AND @sortOrder = 'DESC' THEN Language END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllLanguageDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Language' AND @sortOrder = 'ASC' THEN Language END,
				CASE WHEN @sorting = 'Language' AND @sortOrder = 'DESC' THEN Language END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllLanguageDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentLanguage_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentLanguage_PPCMeta]
( 
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--------To Get Business Content Language detail By Id 
  if(@mode=1)
  begin
    select bc.Id,bc.UserLoginId, bc.Language,bc.LanguageIcon, dbo.GetLanguageIconWithPath(bc.LanguageIcon) as LanguageIconWithPath   from   BusinessLanguages bc  where Id = @id
  end
  --------To Get Business Content Language detail By BusinessOwnerLoginId 
  else if(@mode=2)
       begin
         select bc.Id,bc.UserLoginId, bc.Language,bc.LanguageIcon,dbo.GetLanguageIconWithPath(bc.LanguageIcon) as LanguageIconWithPath     from   BusinessLanguages bc  where bc.IsDeleted = 0
      end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentLanguageDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentLanguageDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int 
) 
as
begin 
if(@mode=1)
begin
    select bl.Id,bl.LanguageId,bl.ProfilePageTypeId,bo.FirstName +''+ bo.LastName as businessOwnerName,l.Language,l.LanguageIcon, dbo.GetLanguageIconWithPath(l.LanguageIcon) as LanguageIconWithPath from BusinessContentLanguage_PPCMeta bl inner join BusinessLanguages l on l.Id = bl.LanguageId 
	inner join BusinessOwners bo on bl.BusinessOwnerLoginId = bo.UserLoginId  where bl.BusinessOwnerLoginId = @businessOwnerLoginId
end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentMuchMoreService_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentMuchMoreService_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Much More Service in business owner
	if(@mode=1)
	begin
	 select bcms.Id,bcms.UserLoginId,bcms.Content,bcms.ServiceIcon,dbo.GetMuchMoreServiceIconWithPath(bcms.ServiceIcon) as ServiceIconWithPath,bcms.CreatedOn, (CONVERT(varchar, bcms.CreatedOn,106)) as CreatedOn_FormatDate
	 	INTO #AllMuchMoreServiceDetailByBusinessOwner
	 from BusinessContentMuchMoreService_PPCMeta bcms
	     where UserLoginId = @businessOwnerLoginId  and bcms.IsDeleted = 0		
		and
		(
	    bcms.Content LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllMuchMoreServiceDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				
				CASE WHEN @sorting = 'Content' AND @sortOrder = 'ASC' THEN Content END,
				CASE WHEN @sorting = 'Content' AND @sortOrder = 'DESC' THEN Content END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllMuchMoreServiceDetailByBusinessOwner
		order by
		 	
				CASE WHEN @sorting = 'Content' AND @sortOrder = 'ASC' THEN Content END,
				CASE WHEN @sorting = 'Content' AND @sortOrder = 'DESC' THEN Content END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllMuchMoreServiceDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentMuchMoreServiceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentMuchMoreServiceDetail]
(
@id bigint,
@businesOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--------To Get Much More Service Detail By Id 
   if(@mode=1)
  begin
    select bcms.Id,bcms.UserLoginId,bcms.Content,bcms.ServiceIcon,dbo.GetMuchMoreServiceIconWithPath(bcms.ServiceIcon) as ServiceIconWithPath from BusinessContentMuchMoreService_PPCMeta bcms where bcms.id = @id
  end
  --------------- To Get Much More Service Title Detail By BusinessOwnerLoginId
   else if(@mode=2)
  begin
    select bcms.Id,bcms.UserLoginId,bcms.Title from BusinessContentMuchMoreServices bcms where bcms.UserLoginId = @businesOwnerLoginId
  end
  --------To Get Much More Service Detail By BusinessOwnerLoginId(Gym Much More Service Detail)  
else   if(@mode=3)
  begin
    select bcms.Id,bcms.UserLoginId,bcms.Content,bcms.ServiceIcon,dbo.GetMuchMoreServiceIconWithPath(bcms.ServiceIcon) as ServiceIconWithPath from BusinessContentMuchMoreService_PPCMeta bcms where bcms.UserLoginId = @businesOwnerLoginId and bcms.IsDeleted = 0
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentPlan_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentPlan_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
if(@mode=1)
 begin
      select IsNull(bcp.Id,'') as Id,IsNull(bcp.UserLoginId,'')as UserLoginId,IsNull(bcp.BusinessPlanTitle,'') as BusinessPlanTitle,IsNull(bcp.BusinessPlanDescription,'')as BusinessPlanDescription
	 from BusinessContentPlan_PPCMeta bcp
	 where bcp.UserLoginId = @businessOwnerLoginId 
 end
  else if(@mode=2)
 begin
     select IsNull(bp.Id,'') as Id,IsNull(bcp.UserLoginId,'')as UserLoginId,IsNull(bcp.BusinessPlanTitle,'') as BusinessPlanTitle,IsNull(bcp.BusinessPlanDescription,'')as BusinessPlanDescription, bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
	 from BusinessContentPlan_PPCMeta bcp
	 right join  BusinessPlans bp on bcp.UserLoginId = bp.BusinessOwnerLoginId
	 right join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
	 where bp.BusinessOwnerLoginId = @businessOwnerLoginId and bp.IsDeleted = 0 and bp.Status = 1
 end
end


	
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentProfessional_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentProfessional_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
	if(@mode=1)
	begin
		select bcp.Id,bcp.UserLoginId,bcp.ProfessionalTitle,bcp.Description from BusinessContentProfessionals bcp where bcp.UserLoginId = @businessOwnerLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentProfilePage_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[sp_ManageBusinessContentProfilePage_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  Instructor in business owner
	if(@mode=1)
	begin
	     select bcb.Id,bcb.UserLoginId,bcb.Title,bcb.SubTitle, ISNULL(bcb.Description, '') AS Description,bcb.ButtonText,bcb.ButtonLink,bcb.BannerImage,dbo.GetBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath,bcb.CreatedOn, (CONVERT(varchar, bcb.CreatedOn,106)) as CreatedOn_FormatDate
		 INTO #AllSportsDetailByBusinessOwner
		 from BusinessContentBanners bcb where UserLoginId = @businessOwnerLoginId  and bcb.IsDeleted = 0		
		and
		(bcb.Title  LIKE '%'+@searchFilter+'%' OR
	    bcb.SubTitle LIKE '%'+@searchFilter+'%' OR
		  bcb.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllSportsDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'SubTitle' AND @sortOrder = 'ASC' THEN SubTitle END,
				CASE WHEN @sorting = 'SubTitle' AND @sortOrder = 'DESC' THEN SubTitle END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllSportsDetailByBusinessOwner
		order by
		   CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'SubTitle' AND @sortOrder = 'ASC' THEN SubTitle END,
				CASE WHEN @sorting = 'SubTitle' AND @sortOrder = 'DESC' THEN SubTitle END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllSportsDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentReview_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentReview_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
	if(@mode=1)
	begin
		select bcr.Id,bcr.UserLoginId,bcr.Description,bcr.ReviewImage,dbo.GetReviewImageWithPath(bcr.ReviewImage) as ReviewImageWithPath from BusinessContentReview_PPCMeta bcr where bcr.UserLoginId = @businessOwnerLoginId
		order by bcr.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE procedure [dbo].[sp_ManageBusinessContentService]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
 begin
 if(@mode=1)
  begin
     select bcs.Id,bcs.UserLoginId,bcs.ServiceTitle,ISNULL(bcs.ServiceTitle, '') AS ServiceTitle, ISNULL(bcs.ShortDescription, '') AS ShortDescription from BusinessContentServices bcs where bcs.UserLoginId = @businessOwnerLoginId
  end
  else if(@mode=2)
  begin
  ----To Get Business Service For Yoga Page
   select  bs.Id,bs.Title,bs.Description,bs.Icon,dbo.GetBusinessServiceIconWithPath(bs.Icon) as BusinessServiceIconWithPath,bs.FeaturedImage,dbo.GetBusinessServiceImageWithPath(bs.FeaturedImage) as BusinessServiceImageWithPath		,bcs.Id,bcs.UserLoginId,ISNULL(bcs.ServiceTitle, '') AS ServiceTitle, ISNULL(bcs.ShortDescription, '') AS ShortDescription from BusinessContentServices bcs
   Right join BusinessServices bs on bcs.UserLoginId = bs.UserLoginId
   where bcs.UserLoginId = @businessOwnerLoginId and bs.IsDeleted =0
   end
end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentSponsor_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentSponsor_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content sponsor in business owner
	if(@mode=1)
	begin
	   select es.Id,es.BusinessOwnerLoginId, es.SponsorTitle,es.SponsorLink,es.SponsorIcon,dbo.GetBusinessSponsorImageWithPath(es.SponsorIcon) as BusinessSponsorImageWithPath,es.CreatedOn, (CONVERT(varchar, es.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 --INTO #AllSponsorDetailByBusinessOwner
		 from   BusinessContentSponsors es  where es.BusinessOwnerLoginId = @businessOwnerLoginId  		
		and
		(es.SponsorTitle  LIKE '%'+@searchFilter+'%' OR
		  es.SponsorLink LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllSponsorDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'SponsorTitle' AND @sortOrder = 'ASC' THEN SponsorTitle END,
				CASE WHEN @sorting = 'SponsorTitle' AND @sortOrder = 'DESC' THEN SponsorTitle END DESC,
				CASE WHEN @sorting = 'SponsorLink' AND @sortOrder = 'ASC' THEN SponsorLink END,
				CASE WHEN @sorting = 'SponsorLink' AND @sortOrder = 'DESC' THEN SponsorLink END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllSponsorDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'SponsorTitle' AND @sortOrder = 'ASC' THEN SponsorTitle END,
				CASE WHEN @sorting = 'SponsorTitle' AND @sortOrder = 'DESC' THEN SponsorTitle END DESC,
				CASE WHEN @sorting = 'SponsorLink' AND @sortOrder = 'ASC' THEN SponsorLink END,
				CASE WHEN @sorting = 'SponsorLink' AND @sortOrder = 'DESC' THEN SponsorLink END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllSponsorDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentSponsors]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_ManageBusinessContentSponsors]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@UserLoginId bigint,
	@mode int
)
as 
begin
	--------------------To Get All Sponsor List by BusinessOwnerLoginId 
	if(@mode=1)
	begin
	   select es.Id,es.BusinessOwnerLoginId,  es.SponsorTitle,es.SponsorLink,es.SponsorIcon,dbo.GetBusinessSponsorImageWithPath(es.SponsorIcon) as BusinessSponsorImageWithPath from BusinessContentSponsors es  where es.BusinessOwnerLoginId = @businessOwnerLoginId

	end
	------------------------------To Get Sponsor Detail By Id 
	else if(@mode=2)
	begin
	   select es.Id,es.BusinessOwnerLoginId, es.SponsorTitle,es.SponsorLink,es.SponsorIcon,dbo.GetBusinessSponsorImageWithPath(es.SponsorIcon) as BusinessSponsorImageWithPath from BusinessContentSponsors es  where es.Id = @id

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentStudioEquipment_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageBusinessContentStudioEquipment_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Studio Equipment in business owner
	if(@mode=1)
	begin
	   select bcse.Id,bcse.UserLoginId,bcse.ProfilePageTypeId, bcse.EquipmentType,bcse.EquipmentValue,bcse.CreatedOn, (CONVERT(varchar, bcse.CreatedOn,106)) as CreatedOn_FormatDate  	     
		 INTO #AllStudioEquipmentDetailByBusinessOwner
		 from   BusinessContentStudioEquipments bcse  where bcse.UserLoginId = @businessOwnerLoginId  and bcse.IsDeleted = 0		
		and
		(bcse.EquipmentType  LIKE '%'+@searchFilter+'%' OR
		  bcse.EquipmentValue LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStudioEquipmentDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'EquipmentType' AND @sortOrder = 'ASC' THEN EquipmentType END,
				CASE WHEN @sorting = 'EquipmentType' AND @sortOrder = 'DESC' THEN EquipmentType END DESC,
				CASE WHEN @sorting = 'EquipmentValue' AND @sortOrder = 'ASC' THEN EquipmentValue END,
				CASE WHEN @sorting = 'EquipmentValue' AND @sortOrder = 'DESC' THEN EquipmentValue END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStudioEquipmentDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'EquipmentType' AND @sortOrder = 'ASC' THEN EquipmentType END,
				CASE WHEN @sorting = 'EquipmentType' AND @sortOrder = 'DESC' THEN EquipmentType END DESC,
				CASE WHEN @sorting = 'EquipmentValue' AND @sortOrder = 'ASC' THEN EquipmentValue END,
				CASE WHEN @sorting = 'EquipmentValue' AND @sortOrder = 'DESC' THEN EquipmentValue END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStudioEquipmentDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentStudioEquipment_PPCMetaDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_ManageBusinessContentStudioEquipment_PPCMetaDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
---------To Get Studio Equipment Detail By BusinessOwnerLoginId 
if(@mode=1)
 begin
	select bcse.Id,bcse.UserLoginId,bcse.ProfilePageTypeId, bcse.Title,bcse.SubTitle from BusinessContentStudioEquipment_PPCMeta bcse 
	where UserLoginId = @businessOwnerLoginId
 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentStudioEquipmentDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentStudioEquipmentDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
---------To Get Studio Equipment Detail by Id 
if(@mode=1)
 begin
	select bcse.Id,bcse.UserLoginId,bcse.ProfilePageTypeId, bcse.EquipmentType,bcse.EquipmentValue from BusinessContentStudioEquipments bcse 
	where bcse.Id = @id
 end
 ---- To Get Studio Equipment Detail By BusinessOwnerLoginId 
else if(@mode=2)
 begin
	select bcse.Id,bcse.UserLoginId,bcse.ProfilePageTypeId, bcse.EquipmentType,bcse.EquipmentValue from BusinessContentStudioEquipments bcse 
	where UserLoginId = @businessOwnerLoginId and bcse.IsDeleted = 0
 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentTeacherUniversityDetail_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentTeacherUniversityDetail_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content Teacher in business owner
	if(@mode=1)
	begin
	  select bu.Id,bu.ProfilePageTypeId,bu.BusinessOwnerLoginId,bu.Qualification,bu.StartDate,bu.EndDate,bu.UniversityName,bu.CreatedOn, (CONVERT(varchar, bu.CreatedOn,106)) as CreatedOn_FormatDate,bu.UniversityLogo,dbo.GetTeacherUniversityLogoWithPath(bu.UniversityLogo) as UniversityLogoWithPath
		-- INTO #AllTeacherUniversityDetailByBusinessOwner
		 from   BusinessUniversities bu  where BusinessOwnerLoginId = @businessOwnerLoginId  and bu.IsDeleted = 0		
		and
		(
		bu.UniversityName LIKE '%'+@searchFilter+'%' OR
		bu.Qualification LIKE '%'+@searchFilter+'%' OR
		bu.StartDate LIKE '%'+@searchFilter+'%' OR
		bu.EndDate LIKE '%'+@searchFilter+'%' OR

		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTeacherUniversityDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
		
				CASE WHEN @sorting = 'UniversityName' AND @sortOrder = 'ASC' THEN UniversityName END,
				CASE WHEN @sorting = 'UniversityName' AND @sortOrder = 'DESC' THEN UniversityName END DESC,
				CASE WHEN @sorting = 'Qualification' AND @sortOrder = 'ASC' THEN Qualification END,
				CASE WHEN @sorting = 'Qualification' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN Qualification END DESC,
		    	CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,		
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTeacherUniversityDetailByBusinessOwner
		order by
	
			CASE WHEN @sorting = 'UniversityName' AND @sortOrder = 'ASC' THEN UniversityName END,
				CASE WHEN @sorting = 'UniversityName' AND @sortOrder = 'DESC' THEN UniversityName END DESC,
				CASE WHEN @sorting = 'Qualification' AND @sortOrder = 'ASC' THEN Qualification END,
				CASE WHEN @sorting = 'Qualification' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN Qualification END DESC,
		    	CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,		
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTeacherUniversityDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentTennis_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentTennis_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  Tennis Service in business owner
	if(@mode=1)
	begin
	     select bct.Id,bct.UserLoginId,bct.Title,bct.SubTitle,bct.Description,bct.TennisImage,dbo.GetTennisImageWithPath(bct.TennisImage) as TennisImageWithPath,bct.CreatedOn, (CONVERT(varchar, bct.CreatedOn,106)) as CreatedOn_FormatDate
		 INTO #AllTennisDetailByBusinessOwner
		 from   BusinessContentTennis_PPCMeta bct where UserLoginId = @businessOwnerLoginId  and bct.IsDeleted = 0		
		and
		(bct.Title  LIKE '%'+@searchFilter+'%' OR
	    bct.SubTitle LIKE '%'+@searchFilter+'%' OR
		  bct.Description LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTennisDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTennisDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTennisDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentTennis_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentTennis_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
   if(@mode=1)
  begin
      select bct.Id,bct.UserLoginId,bct.Title,bct.SubTitle,bct.Description,bct.TennisImage,dbo.GetTennisImageWithPath(bct.TennisImage) as TennisImageWithPath from BusinessContentTennis_PPCMeta bct where Id = @id
  end
else if(@mode=2)
  begin
      select bct.Id,bct.UserLoginId,bct.Title,bct.SubTitle,bct.Description,bct.TennisImage,dbo.GetTennisImageWithPath(bct.TennisImage) as TennisImageWithPath from BusinessContentTennis_PPCMeta bct where UserLoginId = @businessOwnerLoginId and IsDeleted = 0
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentUserResume]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentUserResume]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
----- To Get User Resume Content Detail 
    if(@mode=1)
	begin
	    select urc.Id,urc.UserLoginId,urc.Summary,urc.Skills,urc.Languages,urc.Freelance from UserResumeContents urc
		where urc.UserLoginId = @userLoginId
	end
	--- To Get User Resume Detail In Visitor-Panel
	if(@mode=2)
	begin
	
	SELECT @userLoginId = ul.Id
		FROM UserLogins ul
		INNER JOIN Staffs sb ON ul.MasterId = sb.MasterId
		WHERE sb.UserLoginId = @businessOwnerLoginId

	SELECT S.Id,
    CONCAT(S.FirstName, ' ', S.LastName) AS Name, ISNULL(S.ProfileImage, '') AS ProfileImage, ISNULL(dbo.GetStudentImageWithPath(S.ProfileImage), '') AS ProfileImageWithPath,ISNULL(ul.FacebookProfileLink, '') AS FacebookProfileLink, ISNULL(ul.LinkedInProfileLink, '') AS LinkedInProfileLink, ISNULL(ul.InstagramProfileLink, '') AS InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') AS TwitterProfileLink, ISNUll(ul.Address, '') as Address,
    ISNull(ul.Country, '') as Country, IsNull(ul.State, '') as State, IsNull(ul.City, '') as City,IsNull(ul.MasterId,'') as MasterId, IsNull(ul.Email, '') as Email, IsNull(ul.PhoneNumber, '') as PhoneNumber,IsNULL(urc.Summary,'') as Summary,IsNull(urc.Languages,'') as Languages,IsNULL(urc.Skills,'') as Skills,IsNULL (urc.Freelance,'') as Freelance,
  --  IsNull(Bo.DOB, '') as DOB,
   IsNull(sc.Name,'') as StaffCategoryName 
	FROM Students S
	inner join UserLogins ul on S.UserLoginId = ul.Id
	INNER JOIN Staffs sf ON ul.MasterId = sf.MasterId
	inner join StaffCategories sc on sf.StaffCategoryId = sc.Id
	inner join UserResumeContents urc on ul.Id = urc.UserLoginId
	--inner join BusinessOwners Bo on S.UserLoginId = Bo.StudentUserLoginId 
	WHERE S.UserLoginId = @userLoginId and ul.RoleId = 3

UNION

SELECT  B.Id, CONCAT(B.FirstName, ' ', B.LastName) AS Name,ISNULL(B.ProfileImage, '') AS ProfileImage,ISNULL(dbo.GetBusinessProfileImageWithPath(B.ProfileImage), '') AS ProfileImageWithPath,ISNULL(ul.FacebookProfileLink, '') AS FacebookProfileLink,ISNULL(ul.LinkedInProfileLink, '') AS LinkedInProfileLink, ISNULL(ul.InstagramProfileLink, '') AS InstagramProfileLink, ISNULL(ul.TwitterProfileLink, '') AS TwitterProfileLink, ISNUll(ul.Address, '') as Address,
    ISNull(ul.Country, '') as Country,  IsNull(ul.State, '') as State,IsNull(ul.MasterId,'') as MasterId,  IsNull(ul.City, '') as City, IsNull(ul.Email, '') as Email, IsNull(ul.PhoneNumber, '') as PhoneNumber, 
	--IsNull(B.DOB, '') as DOB,
  IsNULL(urc.Summary,'') as Summary,IsNull(urc.Languages,'') as Languages,
	IsNULL(urc.Skills,'') as Skills,IsNULL (urc.Freelance,'') as Freelance,  IsNull(sfc.Name,'') as StaffCategoryName
	FROM BusinessOwners B
	INNER JOIN UserLogins ul ON ul.Id = B.UserLoginId AND ul.RoleId = 4
	INNER JOIN Staffs sfb ON ul.MasterId = sfb.MasterId
	inner join StaffCategories sfc on sfb.StaffCategoryId = sfc.Id
	INNER JOIN UserResumeContents urc ON sfb.BusinessOwnerLoginId = urc.UserLoginId
	where B.UserLoginId  =  @userLoginId AND ul.RoleId = 4;
	end
end 
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentVideoCategories]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_ManageBusinessContentVideoCategories]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get All Active Business-Content-Video-Categories List
	if(@mode=1)
	begin
		select * from BusinessContentVideoCategories bcvc where bcvc.IsDeleted = 0 and bcvc.IsActive = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentVideoPPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentVideoPPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
begin
    if(@mode=1)
     begin
	     select bcv.Id,bcv.UserLoginId ,bcv.Title,bcv.VideoDescription from BusinessContentVideos_PPCMeta bcv where bcv.UserLoginId = @businessOwnerLoginId
     end
else if(@mode=2)
	  begin
		SELECT DISTINCT ISNull(bcv.Id, '') as Id, ISNull(bcv.UserLoginId, '') as UserLoginId, ISNull(bcv.Title, '') as Title,ISNull(bcv.VideoDescription, '') as VideoDescription,bv.Id,bv.VideoTitle, bv.VideoLink, ('/Content/UploadImages/VideoThumbNailImage/' + bv.VideoThumbNail) as VideoThumbNailImageWithPath, bv.VideoThumbnail
        FROM BusinessContentVideos_PPCMeta bcv right JOIN BusinessContentVideos bv ON bcv.UserLoginId = bv.BusinessOwnerLoginId
           WHERE bv.BusinessOwnerLoginId  =  @businessOwnerLoginId;

	 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentWorldClassDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentWorldClassDetail]
(
@id bigint,
@businesOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
----- To get World Class Program Detail For Profile Page (Gym page) in business panel
   if(@mode=1)
  begin
    select bcwc.Id,bcwc.UserLoginId,bcwc.Title,bcwc.Description from BusinessContentWorldClassProgram_PPCMeta bcwc where bcwc.UserLoginId = @businesOwnerLoginId 
  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentWorldClassProgram_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessContentWorldClassProgram_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Content World Class Program in business owner
	if(@mode=1)
	begin
	     select bcwcp.Id,bcwcp.UserLoginId,bcwcp.Title,bcwcp.Options,bcwcp.Image,dbo.GetWorldClassImageWithPath(bcwcp.Image) as ImageWithPath,bcwcp.CreatedOn, (CONVERT(varchar, bcwcp.CreatedOn,106)) as CreatedOn_FormatDate
		 INTO #AllWorldClassProgramDetailByBusinessOwner
		 from   BusinessContentWorldClassPrograms bcwcp where UserLoginId = @businessOwnerLoginId  and bcwcp.IsDeleted = 0		
		and
		(bcwcp.Title  LIKE '%'+@searchFilter+'%' OR
		  bcwcp.Options LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllWorldClassProgramDetailByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Options' AND @sortOrder = 'ASC' THEN Options END,
				CASE WHEN @sorting = 'Options' AND @sortOrder = 'DESC' THEN Options END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllWorldClassProgramDetailByBusinessOwner
		order by
		 	CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Options' AND @sortOrder = 'ASC' THEN Options END,
				CASE WHEN @sorting = 'Options' AND @sortOrder = 'DESC' THEN Options END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllWorldClassProgramDetailByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessContentWorldClassProgramDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessContentWorldClassProgramDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
-------To Get World Class Program Detail By Id 
  if(@mode=1)
  begin
     select bcwcp.Id,bcwcp.UserLoginId, bcwcp.Title,bcwcp.Options,bcwcp.Image,dbo.GetWorldClassImageWithPath(bcwcp.Image) as ImageWithPath  from BusinessContentWorldClassPrograms bcwcp where Id = @id
end
-------To Get World Class Program Detail By BusinessOwnerLoginId
 else if(@mode=2)
  begin
     select bcwcp.Id,bcwcp.UserLoginId, bcwcp.Title,bcwcp.Options,bcwcp.Image,dbo.GetWorldClassImageWithPath(bcwcp.Image) as ImageWithPath  from BusinessContentWorldClassPrograms bcwcp where UserLoginId = @businessOwnerLoginId and bcwcp.IsDeleted = 0
end
 end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessCourseCategory_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessCourseCategory_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int

)
as
begin
	
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Course category Created by Business-Admin Users
	if(@mode=1)
	begin
		select bs.Id,bs.UserLoginId,bs.Title,bs.Description,dbo.GetCourseCategoryImageWithPath(bs.CourseCategoryImage) as CourseCategoryImageWithPath,bs.Status,bs.CreatedOn, (CONVERT(varchar, bs.CreatedOn,106)) as CreatedOn_FormatDate
			INTO #AllBusinessCategoryImageBySuperAdmin
		from BusinessCourseCategories bs 
		Where bs.UserLoginId = @userLoginId and bs.IsDeleted = 0
		and
		(bs.Title LIKE '%'+@searchFilter+'%' OR
		bs.Description LIKE '%'+@searchFilter+'%' OR	
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllBusinessCategoryImageBySuperAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllBusinessCategoryImageBySuperAdmin
		order by
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllBusinessCategoryImageBySuperAdmin
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessCourseCategoryDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessCourseCategoryDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId  bigint,
@mode int 
)
as
begin
if(@mode=1)
begin
    select bc.Id,bc.UserLoginId,bc.Title,bc.Description,bc.CourseCategoryImage,dbo.GetCourseCategoryImageWithPath(bc.CourseCategoryImage) as CourseCategoryImageWithPath from BusinessCourseCategories bc where bc.Id = @id
end  
else if(@mode=2)
begin
    select bc.Id,bc.UserLoginId,bc.Title,bc.Description,bc.CourseCategoryImage,dbo.GetCourseCategoryImageWithPath(bc.CourseCategoryImage) as CourseCategoryImageWithPath from BusinessCourseCategories bc where bc.UserLoginId = @userLoginId 
end
else if(@mode=3)
begin
    select bc.Id,bc.UserLoginId,bc.Title,bc.Description,bc.CourseCategoryImage,dbo.GetCourseCategoryImageWithPath(bc.CourseCategoryImage) as CourseCategoryImageWithPath from BusinessCourseCategories bc 
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessDetail_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessDetail_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Detail in Super-Admin Panel
	if(@mode=1)
	begin
		Select bo.Id, bo.UserLoginId, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.ProfileImage,bo.BusinessName,bo.FirstName + ' ' + bo.LastName as Name,ul.MasterId, ul.Email, ul.PhoneNumber,ul.Status,(CASE WHEN ul.Status = 1 THEN 'Active'
		ELSE 'InActive'end  ) as Activity, ul.CreatedOn, (CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate, ISNULL(bc.Name, '') as CategoryName, IsNull(bsc.Name, '') as SubCategoryName, bo.ShowOnHomePage
		INTO #GetAllBusinessOwner
		from UserLogins ul
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		left join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		and ul.IsDeleted = 0 
		and
		(
			ul.MasterId LIKE '%'+@searchFilter+'%' OR
		  bo.BusinessName LIKE '%'+@searchFilter+'%' OR
			bo.FirstName + ' ' + bo.LastName LIKE '%'+@searchFilter+'%' OR
		  ul.Email LIKE '%'+@searchFilter+'%' OR
		  bc.Name LIKE '%'+@searchFilter+'%' OR
		  bsc.Name LIKE '%'+@searchFilter+'%' OR
		  ul.PhoneNumber LIKE '%'+@searchFilter+'%' 
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'ASC' THEN CategoryName END,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'DESC' THEN CategoryName END DESC,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'ASC' THEN SubCategoryName END,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'DESC' THEN SubCategoryName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBusinessOwner
		order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'ASC' THEN CategoryName END,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'DESC' THEN CategoryName END DESC,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'ASC' THEN SubCategoryName END,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'DESC' THEN SubCategoryName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBusinessOwner
	end
	-- Get All Business-Instructor Category List for Super-Admin Panel
	if(@mode=2)
	begin
		Select bo.Id, bo.UserLoginId, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.ProfileImage, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,bo.BusinessName,bo.FirstName + ' ' + bo.LastName as Name,ul.MasterId, ul.Email, ul.PhoneNumber,ul.Status,(CASE WHEN ul.Status = 1 THEN 'Active'
		ELSE 'InActive'end  ) as Activity, ul.CreatedOn, (CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate, ISNULL(bc.Name, '') as CategoryName, IsNull(bsc.Name, '') as SubCategoryName, bo.ShowOnHomePage
		INTO #GetAllBusinessInstructors_Pagination
		from UserLogins ul
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		and ul.IsDeleted = 0 
		and bsc.CategoryKey = 'instructor'
		and
		(
			ul.MasterId LIKE '%'+@searchFilter+'%' OR
		  bo.BusinessName LIKE '%'+@searchFilter+'%' OR
			bo.FirstName + ' ' + bo.LastName LIKE '%'+@searchFilter+'%' OR
		  ul.Email LIKE '%'+@searchFilter+'%' OR
		  bc.Name LIKE '%'+@searchFilter+'%' OR
		  bsc.Name LIKE '%'+@searchFilter+'%' OR
		  ul.PhoneNumber LIKE '%'+@searchFilter+'%' 
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllBusinessInstructors_Pagination);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'ASC' THEN CategoryName END,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'DESC' THEN CategoryName END DESC,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'ASC' THEN SubCategoryName END,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'DESC' THEN SubCategoryName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'MasterId' AND @sortOrder = 'ASC' THEN MasterId END,
				CASE WHEN @sorting = 'MasterId' AND @sortOrder = 'DESC' THEN MasterId END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllBusinessInstructors_Pagination
		order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'ASC' THEN CategoryName END,
				CASE WHEN @sorting = 'CategoryName' AND @sortOrder = 'DESC' THEN CategoryName END DESC,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'ASC' THEN SubCategoryName END,
				CASE WHEN @sorting = 'SubCategoryName' AND @sortOrder = 'DESC' THEN SubCategoryName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'ASC' THEN PhoneNumber END,
				CASE WHEN @sorting = 'PhoneNumber' AND @sortOrder = 'DESC' THEN PhoneNumber END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'MasterId' AND @sortOrder = 'ASC' THEN MasterId END,
				CASE WHEN @sorting = 'MasterId' AND @sortOrder = 'DESC' THEN MasterId END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllBusinessInstructors_Pagination
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessDetailByMenuTag]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessDetailByMenuTag]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@menutag nvarchar (max),
@mode int,
@recordLimit int,
@lastRecordId bigint
)
as 
begin
 if(@mode=1)
 begin
DECLARE @totalRecords BIGINT = 0;

        -- set default record limit
        IF (@recordLimit <= 0)
            SET @recordLimit = 10;

        SELECT @totalRecords = COUNT(c.Id)
        FROM Classes c
		inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
		inner join BusinessCategories bc on bo.BusinessSubCategoryId =  bc.Id 
        WHERE bc.MenuTag =    @menuTag;

        IF (@lastRecordId <= 0)
---- To Get The Class Acc. Menu Tag

  begin
     SELECT TOP (@recordLimit) c.Id, ISNULL(MAX(c.Description), '') AS Description,ISNULL(MAX(c.BusinessOwnerLoginId), '') AS BusinessOwnerLoginId,
 ISNULL(MAX(c.Name), '') AS Name,ISNULL(MAX(c.OnlineClassLink), '') AS OnlineClassLink, ISNULL(MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')), '') AS FormattedScheduledOnDateTime,ISNULL(MAX(c.Address), '') AS Address,
 ISNULL(MAX(c.ClassDays_ShortForm), '') AS ClassDays_ShortForm,ISNULL(MAX(c.ClassType), '') AS ClassType,ISNULL(MAX(c.classMode), '') AS classMode,ISNULL(MAX(c.ClassImage), '') AS ClassImage,ISNULL(MAX(dbo.GetClassImageWithPath(c.ClassImage)), '') AS ClassImageWithPath, ISNULL(MAX(b.ScheduledStartOnTime_24HF), '') AS ScheduledStartOnTime_24HF,
 ISNULL(MAX(b.ScheduledEndOnTime_24HF), '') AS ScheduledEndOnTime_24HF,ISNULL(MAX(b.ScheduledOnDateTime), '') AS ScheduledOnDateTime, ISNULL(MAX(bo.BusinessName), '') AS BusinessName,ISNULL(MAX(s.ProfileImage), '') AS ProfileImage,
 ISNULL(MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)), '') AS BusinessProfileImage,ISNULL(DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()), 0) AS DaysDifference,ISNULL(DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24, 0) AS HoursDifference,ISNULL(DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60, 0) AS MinutesDifference,
 ISNULL(MAX(r.Rating), 0) AS Rating,ISNULL(MAX(bc.Name), '') AS BusinessSubCategoryName,ISNULL(Max(DAY(b.ScheduledOnDateTime)), 0) AS ScheduledDay,ISNULL(Max(Format(b.ScheduledOnDateTime, 'MMMM')), '') AS ScheduledMonth,
 ISNULL(Max(bo.FirstName + '' + bo.LastName), '') AS BusinessOwnerName,ISNULL(COUNT(*), 0) AS TotalReviewsEntered,
ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,ISNULL(SUM(r.Rating), 0) AS TotalRating,ISNULL(bc.MenuTag, '') AS MenuTag,@totalRecords
FROM Classes c
LEFT JOIN ClassBatches cb ON cb.ClassId = c.Id
LEFT JOIN Batches b ON cb.BatchId = b.Id
Left Join Staffs s on b.InstructorLoginId = s.UserLoginId
LEFT Join UserLogins ul on b.BusinessOwnerLoginId = ul.Id
Left JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
Left JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
where bc.MenuTag = @menutag
--WHERE bo.BusinessSubCategoryId = @id
GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName,bc.MenuTag
 Order by c.Id desc;
   end
 else 
  begin
      SELECT TOP (@recordLimit) c.Id, ISNULL(MAX(c.Description), '') AS Description,ISNULL(MAX(c.BusinessOwnerLoginId), '') AS BusinessOwnerLoginId,
 ISNULL(MAX(c.Name), '') AS Name,ISNULL(MAX(c.OnlineClassLink), '') AS OnlineClassLink, ISNULL(MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')), '') AS FormattedScheduledOnDateTime,ISNULL(MAX(c.Address), '') AS Address,
 ISNULL(MAX(c.ClassDays_ShortForm), '') AS ClassDays_ShortForm,ISNULL(MAX(c.ClassType), '') AS ClassType,ISNULL(MAX(c.classMode), '') AS classMode,ISNULL(MAX(c.ClassImage), '') AS ClassImage,ISNULL(MAX(dbo.GetClassImageWithPath(c.ClassImage)), '') AS ClassImageWithPath, ISNULL(MAX(b.ScheduledStartOnTime_24HF), '') AS ScheduledStartOnTime_24HF,
 ISNULL(MAX(b.ScheduledEndOnTime_24HF), '') AS ScheduledEndOnTime_24HF,ISNULL(MAX(b.ScheduledOnDateTime), '') AS ScheduledOnDateTime, ISNULL(MAX(bo.BusinessName), '') AS BusinessName,ISNULL(MAX(s.ProfileImage), '') AS ProfileImage,
 ISNULL(MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)), '') AS BusinessProfileImage,ISNULL(DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()), 0) AS DaysDifference,ISNULL(DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24, 0) AS HoursDifference,ISNULL(DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60, 0) AS MinutesDifference,
 ISNULL(MAX(r.Rating), 0) AS Rating,ISNULL(MAX(bc.Name), '') AS BusinessSubCategoryName,ISNULL(Max(DAY(b.ScheduledOnDateTime)), 0) AS ScheduledDay,ISNULL(Max(Format(b.ScheduledOnDateTime, 'MMMM')), '') AS ScheduledMonth,
 ISNULL(Max(bo.FirstName + '' + bo.LastName), '') AS BusinessOwnerName,ISNULL(COUNT(*), 0) AS TotalReviewsEntered,
ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,ISNULL(SUM(r.Rating), 0) AS TotalRating,ISNULL(bc.MenuTag, '') AS MenuTag,@totalRecords
FROM Classes c
LEFT JOIN ClassBatches cb ON cb.ClassId = c.Id
LEFT JOIN Batches b ON cb.BatchId = b.Id
Left Join Staffs s on b.InstructorLoginId = s.UserLoginId
LEFT Join UserLogins ul on b.BusinessOwnerLoginId = ul.Id
Left JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
Left JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
where bc.MenuTag = @menutag and c.Id < @lastRecordId
--WHERE bo.BusinessSubCategoryId = @id
GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName,bc.MenuTag
 Order by c.Id desc;
  end
  end
---To Get Event Detail By Menu- Tag
 else if(@mode=2)
       begin
	  -- declare @totalRecords bigint = 0;
		-- set default record limit
	  if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords =Count(e.Id) from Events e inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginid inner join BusinessCategories bc on bo.BusinessSubCategoryId =  bc.Id where bc.MenuTag = @menuTag and e.IsDeleted = 0
	 if(@lastRecordId <= 0) 
     begin
         SELECT Top (@recordLimit) e.Id, e.Title, CONCAT(DATENAME(month, e.StartDate), ' ',  DATENAME(day, e.StartDate),'', DATENAME(year, e.StartDate)) AS StartDate, DATENAME(MONTH, e.StartDate) AS StartMonth, DATENAME(dw, e.StartDate) AS Weeks, YEAR(e.StartDate) AS StartYear,DATENAME(Day, e.StartDate) AS StartDay, e.EndDate,e.StartTime_24HF, e.EndTime_24HF, e.IsPaid,e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,  e.AdditionalInformation, e.AboutEvent, IsNull(e.TicketInformation,'') as TicketInformation, IsNull(e.Walkings,'') as Walkings, ISNULL(e.Address,'') AS Address, e.Country, e.State, e.City, e.PinCode, e.LandMark,bc.MenuTag,@totalRecords
		FROM Events e
		INNER JOIN BusinessOwners bo ON e.UserLoginId = bo.UserLoginId
		LEFT JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		WHERE bc.MenuTag =  @menutag
		order by e.Id desc;
     end
else
   begin
       SELECT Top (@recordLimit) e.Id, e.Title, CONCAT(DATENAME(month, e.StartDate), ' ',  DATENAME(day, e.StartDate),'', DATENAME(year, e.StartDate)) AS StartDate, DATENAME(MONTH, e.StartDate) AS StartMonth, DATENAME(dw, e.StartDate) AS Weeks, YEAR(e.StartDate) AS StartYear,DATENAME(Day, e.StartDate) AS StartDay, e.EndDate,e.StartTime_24HF, e.EndTime_24HF, e.IsPaid,e.EventLocationURL, e.ShortDescription, e.Price, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,  e.AdditionalInformation, e.AboutEvent, IsNull(e.TicketInformation,'') as TicketInformation, IsNull(e.Walkings,'') as Walkings, ISNULL(e.Address,'') AS Address, e.Country, e.State, e.City, e.PinCode, e.LandMark,bc.MenuTag,@totalRecords
		FROM Events e
		INNER JOIN BusinessOwners bo ON e.UserLoginId = bo.UserLoginId
		LEFT JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		WHERE bc.MenuTag =  @menutag and e.Id <@lastRecordId
		order by e.Id desc;
   end
end
--- To Get Training Detail By Menu Tag
 else if(@mode=3)
  begin
	   --declare @totalRecords bigint = 0;
		-- set default record limit
	  if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords =Count(t.Id) from Trainings t inner join BusinessOwners bo on t.UserLoginId = bo.UserLoginid inner join BusinessCategories bc on bo.BusinessSubCategoryId =  bc.Id where bc.MenuTag = @menuTag and t.IsDeleted = 0
	 if(@lastRecordId <= 0) 
     begin
     select  Top(@recordLimit)t.Id,DAY(t.StartDate) AS StartDay, DATENAME(MONTH,t.StartDate) AS StartMonth, DATENAME(dw, t.StartDate) AS Weeks, YEAR(t.StartDate) AS StartYear, t.InstructorUserLoginId,s.FirstName +''+ s.LastName as InstructorName,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,t.TrainingName,t.ShortDescription,t.InstructorEmail,t.InstructorMobileNumber,t.InstructorAlternateNumber,t.IsPaid, t.Price,t.AdditionalPriceInformation,t.CenterName,t.Location,t.Address,t.City,t.State,t.Country,t.PinCode,t.LocationUrl,t.StartDate,t.EndDate,t.StartTime_24HF,t.EndTime_24HF,t.Description,t.MusicType,t.EnergyLevel,t.DanceStyle, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath,bc.MenuTag
		from trainings t
		inner join businessOwners bo on t.UserLoginId = bo.UserLoginId
		inner join Staffs s on t.InstructorUserLoginId = s.UserLoginId
		inner join BusinessCategories bc on bo.BusinessSubCategoryId = bc.Id
		where bc.MenuTag = @menuTag
		order by t.Id desc;
  end
else 
  begin
      select  Top(@recordLimit)t.Id,DAY(t.StartDate) AS StartDay, DATENAME(MONTH,t.StartDate) AS StartMonth, DATENAME(dw, t.StartDate) AS Weeks, YEAR(t.StartDate) AS StartYear, t.InstructorUserLoginId,s.FirstName +''+ s.LastName as InstructorName,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,t.TrainingName,t.ShortDescription,t.InstructorEmail,t.InstructorMobileNumber,t.InstructorAlternateNumber,t.IsPaid, t.Price,t.AdditionalPriceInformation,t.CenterName,t.Location,t.Address,t.City,t.State,t.Country,t.PinCode,t.LocationUrl,t.StartDate,t.EndDate,t.StartTime_24HF,t.EndTime_24HF,t.Description,t.MusicType,t.EnergyLevel,t.DanceStyle, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath,bc.MenuTag
		from trainings t
		inner join businessOwners bo on t.UserLoginId = bo.UserLoginId
		inner join Staffs s on t.InstructorUserLoginId = s.UserLoginId
		inner join BusinessCategories bc on bo.BusinessSubCategoryId = bc.Id
		where bc.MenuTag = @menuTag and t.Id <@lastRecordId
		order by t.Id desc;  
  end
end
--To Get Instructor By MenuTag
 else if(@mode=4)
 begin
  --declare @totalRecords bigint = 0;
		-- set default record limit
	  if(@recordLimit <= 0)
		set @recordLimit = 10

		select @totalRecords = Count(bo.Id) from  BusinessOwners bo inner join BusinessCategories bc on bo.BusinessSubCategoryId =  bc.Id where bc.MenuTag = @menuTag and bc.IsDeleted = 0
	 if(@lastRecordId <= 0) 
  begin
   	SELECT  Top(@recordLimit)bo.Id,  bo.UserLoginId AS InstructorUserLoginId,  bo.FirstName + ' ' + bo.LastName AS InstructorName,  bsc.Name AS BusinessCategoryName,  dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,  COUNT(*) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, COALESCE(SUM(r.Rating), 0) AS TotalRating, c.CertificateIcon,dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath,IsNull(bo.Experience,'') as Experience,IsNull(bo.Privacy_UniqueUserId,'') as Privacy_UniqueUserId, IsNull(bo.Verified,'') as Verified,IsNull(Icd.Description,'') as Description,   CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite
	FROM BusinessOwners bo
	Left Join InstructorContentDescription_PPCMeta Icd on bo.UserLoginId = Icd.UserLoginId
	INNER JOIN BusinessCertifications Bc on bo.UserLoginId = Bc.BusinessOwnerLoginId
	INNER JOIN Certificates c on Bc.CertificateId = c.Id
	INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id 
	LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId 
	 Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId 
	WHERE bsc.MenuTag = @menutag AND bsc.CategoryKey = 'instructor'
	GROUP BY bo.Id, bo.UserLoginId, bo.FirstName, bo.LastName, bsc.Name, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon),bo.Experience,bo.Privacy_UniqueUserId,bo.Verified,Icd.Description,sf.FavouriteUserLoginId
	order by bo.Id desc;

  end
  else
  begin
      SELECT  Top(@recordLimit)bo.Id,  bo.UserLoginId AS InstructorUserLoginId,  bo.FirstName + ' ' + bo.LastName AS InstructorName,  bsc.Name AS BusinessCategoryName,  dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,  COUNT(*) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, COALESCE(SUM(r.Rating), 0) AS TotalRating, c.CertificateIcon,dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath,IsNull(bo.Experience,'') as Experience,IsNull(bo.Privacy_UniqueUserId,'') as Privacy_UniqueUserId, IsNull(bo.Verified,'') as Verified,IsNull(Icd.Description,'') as Description,   CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite
	FROM BusinessOwners bo
	Left Join InstructorContentDescription_PPCMeta Icd on bo.UserLoginId = Icd.UserLoginId
	INNER JOIN BusinessCertifications Bc on bo.UserLoginId = Bc.BusinessOwnerLoginId
	INNER JOIN Certificates c on Bc.CertificateId = c.Id
	INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id 
	 Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId 
	LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId 
	WHERE bsc.MenuTag = @menutag AND bsc.CategoryKey = 'instructor' and bo.Id <@lastRecordId
	GROUP BY bo.Id, bo.UserLoginId, bo.FirstName, bo.LastName, bsc.Name, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon),bo.Experience,bo.Privacy_UniqueUserId,bo.Verified,Icd.Description,sf.FavouriteUserLoginId
	order by bo.Id desc;
  end
  end
else if(@mode=5)
     begin
         SELECT c.Id, ISNULL(MAX(c.Description), '') AS Description,ISNULL(MAX(c.BusinessOwnerLoginId), '') AS BusinessOwnerLoginId, ISNULL(MAX(c.Name), '') AS Name,ISNULL(MAX(c.OnlineClassLink), '') AS OnlineClassLink, ISNULL(MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')), '') AS FormattedScheduledOnDateTime,ISNULL(MAX(c.Address), '') AS Address, ISNULL(MAX(c.ClassDays_ShortForm), '') AS ClassDays_ShortForm,ISNULL(MAX(c.ClassType), '') AS ClassType,ISNULL(MAX(c.classMode), '') AS classMode,ISNULL(MAX(c.ClassImage), '') AS ClassImage,ISNULL(MAX(dbo.GetClassImageWithPath(c.ClassImage)), '') AS ClassImageWithPath, ISNULL(MAX(b.ScheduledStartOnTime_24HF), '') AS ScheduledStartOnTime_24HF,ISNULL(MAX(b.ScheduledEndOnTime_24HF), '') AS ScheduledEndOnTime_24HF,ISNULL(MAX(b.ScheduledOnDateTime), '') AS ScheduledOnDateTime, ISNULL(MAX(bo.BusinessName), '') AS BusinessName,ISNULL(MAX(s.ProfileImage), '') AS ProfileImage,ISNULL(MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)), '') AS BusinessProfileImage,ISNULL(DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()), 0) AS DaysDifference,ISNULL(DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24, 0) AS HoursDifference,ISNULL(DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60, 0) AS MinutesDifference, ISNULL(MAX(r.Rating), 0) AS Rating,ISNULL(MAX(bc.Name), '') AS BusinessSubCategoryName,ISNULL(Max(DAY(b.ScheduledOnDateTime)), 0) AS ScheduledDay,ISNULL(Max(Format(b.ScheduledOnDateTime, 'MMMM')), '') AS ScheduledMonth,ISNULL(Max(bo.FirstName + '' + bo.LastName), '') AS BusinessOwnerName,ISNULL(COUNT(*), 0) AS TotalReviewsEntered,ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,ISNULL(SUM(r.Rating), 0) AS TotalRating,ISNULL(bc.MenuTag, '') AS MenuTag
		FROM Classes c
		LEFT JOIN ClassBatches cb ON cb.ClassId = c.Id
		LEFT JOIN Batches b ON cb.BatchId = b.Id
		Left Join Staffs s on b.InstructorLoginId = s.UserLoginId
		LEFT Join UserLogins ul on b.BusinessOwnerLoginId = ul.Id
		Left JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		Left JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
		where c.Id != @id
		--WHERE bo.BusinessSubCategoryId = @id
		GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName,bc.MenuTag;   
	 end
 end 
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessDistanceLocation]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ManageBusinessDistanceLocation]   
(
    @id bigint,
    @businessOwnerLoginId bigint,
    @userLoginId bigint,
    @latitude nvarchar(max),
    @longitude nvarchar(max),
	@menuTag nvarchar(max),
    @mode int,
	@recordLimit int,
	@lastRecordId bigint

)
AS
BEGIN
    IF (@mode = 1)
    BEGIN
        DECLARE @latitudedesi DECIMAL(10, 2);
        SET @latitudedesi = CAST(@latitude AS DECIMAL(10, 2));

        DECLARE @longitudedesi DECIMAL(10, 2);
        SET @longitudedesi = CAST(@longitude AS DECIMAL(10, 2));

        DECLARE @totalRecords BIGINT = 0;

        -- set default record limit
        IF (@recordLimit <= 0)
            SET @recordLimit = 10;

        SELECT @totalRecords = COUNT(bo.Id)
        FROM BusinessOwners bo inner join BusinessCategories bc on bo.BusinessSubCategoryId =  bc.Id 
        WHERE bc.MenuTag =    @menuTag;

        IF (@lastRecordId <= 0)
        BEGIN
            SELECT TOP (@recordLimit)
                bo.Id,
                bo.UserLoginId,
                bo.FirstName + ' ' + bo.LastName AS BusinessOwnerName,
                bo.BusinessName,
                bc.Name AS BusinessCategoryName,
                ISNULL(ul.Address, '') AS Address,
                ISNULL(ul.City, '') AS City,
                ISNULL(ul.State, '') AS State,
                dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,
                ul.Latitude,
                ul.Longitude,
                bc.MenuTag,
                dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) AS BusinessLogoWithPath,
                COUNT(r.Id) AS TotalReviewsEntered,
                ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
                COALESCE(SUM(r.Rating), 0) AS TotalRating,
                bo.Verified,
                CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite,
                ISNULL(Icd.Description, '') AS Description,
                P.[Key],
                ISNULL(ul.UniqueUserId, '') AS UniqueUserId,
                (
                    6371 *
                    ACOS(
                        COS(RADIANS(ul.Latitude)) *
                        COS(RADIANS(@latitudedesi)) *
                        COS(RADIANS(ul.Longitude) - RADIANS(@longitudedesi)) +
                        SIN(RADIANS(ul.Latitude)) *
                        SIN(RADIANS(@latitudedesi))
                    )
                ) AS DistanceInKilometers,case when sf.FavouriteUserLoginId IS NULL then 0 else 1 end as IsFavourite
            FROM BusinessOwners bo
            INNER JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
            LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId
            LEFT JOIN InstructorContentDescription_PPCMeta Icd ON bo.UserLoginId = Icd.UserLoginId
            INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
            INNER JOIN ProfilePageTypes p ON bc.ProfilePageTypeId = p.Id
           Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId 
            WHERE bc.MenuTag = @menuTag
            GROUP BY bo.Id, bo.UserLoginId, bo.FirstName + ' ' + bo.LastName, bc.Name, bo.BusinessName, ul.City, ul.State, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), ul.Latitude, ul.Longitude, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo), ul.Address, bc.MenuTag, bo.Verified, Icd.Description, sf.FavouriteUserLoginId, p.[Key], ul.UniqueUserId
		order by bo.Id desc;
        END
        ELSE
        BEGIN
            SELECT TOP (@recordLimit)
                bo.Id,
                bo.UserLoginId,
                bo.FirstName + ' ' + bo.LastName AS BusinessOwnerName,
                bo.BusinessName,
                bc.Name AS BusinessCategoryName,
                ISNULL(ul.Address, '') AS Address,
                ISNULL(ul.City, '') AS City,
                ISNULL(ul.State, '') AS State,
                dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,
                ul.Latitude,
                ul.Longitude,
                bc.MenuTag,
                dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) AS BusinessLogoWithPath,
                COUNT(r.Id) AS TotalReviewsEntered,
                ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
                COALESCE(SUM(r.Rating), 0) AS TotalRating,
                bo.Verified,
                ISNULL(Icd.Description, '') AS Description,
                P.[Key],
                ISNULL(ul.UniqueUserId, '') AS UniqueUserId, CASE WHEN sf.FavouriteUserLoginId IS NULL THEN 0 ELSE 1 END AS IsFavourite,
                (
                    6371 *
                    ACOS(
                        COS(RADIANS(ul.Latitude)) *
                        COS(RADIANS(@latitudedesi)) *
                        COS(RADIANS(ul.Longitude) - RADIANS(@longitudedesi)) +
                        SIN(RADIANS(ul.Latitude)) *
                        SIN(RADIANS(@latitudedesi))
                    )
                ) AS DistanceInKilometers
            FROM BusinessOwners bo
            INNER JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
            LEFT JOIN Reviews r ON bo.UserLoginId = r.ItemId
            LEFT JOIN InstructorContentDescription_PPCMeta Icd ON bo.UserLoginId = Icd.UserLoginId
            INNER JOIN UserLogins ul ON bo.UserLoginId = ul.Id
            INNER JOIN ProfilePageTypes p ON bc.ProfilePageTypeId = p.Id
			  Left JOIN StudentFavourites sf ON bo.UserLoginId = sf.FavouriteUserLoginId 
            WHERE bc.MenuTag = @menuTag and bo.Id < @lastRecordId
            GROUP BY bo.Id, bo.UserLoginId, bo.FirstName + ' ' + bo.LastName, bc.Name, bo.BusinessName, ul.City, ul.State, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), ul.Latitude, ul.Longitude, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo), ul.Address, bc.MenuTag, bo.Verified, Icd.Description, p.[Key], ul.UniqueUserId,sf.FavouriteUserLoginId
			order by bo.Id desc;
        END
    END
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessDocuments]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessDocuments]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@businessOwnerId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	if (@mode=1)
	begin
		select d.DocumentTitle, dbo.GetDocumentWithPath(d.DocumentFile) as FilePath, d.Status,(CASE 
			WHEN d.Status = 1 THEN 'Accepted' when d.Status = 0 Then 'Pending'
			ELSE 'Rejected'end  ) as IsAcception,d.UpdatedOn, (CONVERT(varchar, d.UpdatedOn,106)) as UpdatedOn_FormatDate from DocumentDetails d where BusinessOwnerId = @businessOwnerLoginId
	end 
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessExpense_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessExpense_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Expense in Business Panel 
	if(@mode=1)
	begin
		select e.Id,s.FirstName +''+ s.LastName as StaffName,e.Amount,e.Description,e.Remarks,e.Status,e.ExpenseDate_DateTimeFormat,(Convert(varchar,e.ExpenseDate_DateTimeFormat,106) )as Expense_DateTimeFormat, e.CreatedOn
			INTO #AllBusinessExpenseByBusinessAdmin
			from Expenses e 
			inner join Staffs s on e.UserLoginId = s.UserLoginId
				where s.BusinessOwnerLoginId = @businessOwnerLoginId
			 and e.IsDeleted = 0		
		and
		(s.FirstName + '' + s.LastName LIKE '%'+@searchFilter+'%' OR
	     e.Amount LIKE '%'+@searchFilter+'%' OR
		  e.Description LIKE '%'+@searchFilter+'%' OR
		  e.ExpenseDate_DateTimeFormat LIKE '%' +@searchFilter + '%' OR
		  
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllBusinessExpenseByBusinessAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'ASC' THEN Expense_DateTimeFormat END,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'DESC' THEN Expense_DateTimeFormat END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllBusinessExpenseByBusinessAdmin
		order by
		  CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'ASC' THEN ExpenseDate_DateTimeFormat END,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'DESC' THEN ExpenseDate_DateTimeFormat END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStaffByBusinessAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessExploreClassicDanceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessExploreClassicDanceDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin 
	---- To Get Explore classic dance detail by UserloginId
	if(@mode=1)
	begin
		select bce.Id, bce.UserLoginId, bce.ProfilePageTypeId, bce.Title, bce.Description 
		from BusinessContentExploreDetail_PPCMeta bce where bce.UserLoginId = @userLoginId 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessFindMasterProfileDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessFindMasterProfileDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@exploreType nvarchar(max),
	@mode int
)
as
begin
	--- To Get Business Find Master Profile Detail By UserLoginId
	if(@mode=1)
	 begin
		select fm.Id,fm.UserLoginId,fm.ProfilePageTypeId,fm.Title,fm.Description,fm.ExploreType,fm.Image,dbo.GetExploreMasterProfileWithPath(fm.Image) as ImageWithPath,fm.ScheduleLink from BusinessContentFindMasterProfileDetail_PPCMeta fm where fm.UserLoginId = @userLoginId and fm.IsDeleted= 0
	 end
	 --- To Get Business Find Master Profile Detail by Id 
	else if(@mode=2)
    begin
	    select fm.Id,fm.UserLoginId,fm.ProfilePageTypeId,fm.Title,fm.Description,fm.ExploreType,fm.Image,dbo.GetExploreMasterProfileWithPath(fm.Image) as ImageWithPath,fm.ScheduleLink from BusinessContentFindMasterProfileDetail_PPCMeta fm where fm.Id = @id;
	end
	--- To Get Business Find Master Profile Detail by Id  For Visitor-Panel 
	else if(@mode=3)
	begin
		select fm.Id,fm.UserLoginId,fm.ProfilePageTypeId,fm.Title,fm.Description,fm.ExploreType,fm.Image,dbo.GetExploreMasterProfileWithPath(fm.Image) as ImageWithPath,fm.ScheduleLink from BusinessContentFindMasterProfileDetail_PPCMeta fm where fm.ExploreType = @exploreType;
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessImages]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessImages] 
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get all business-Images by business-Owner-Login-Id
	if(@mode = 1)
	begin
		select bi.Id, bi.BusinessOwnerLoginId, bi.ImageTitle,bi.Image,('/Content/Uploads/Images/ManageBusinessImages/' + bi.Image) as ImageWithPath from BusinessContentImages bi where bi.BusinessOwnerLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessInstructorOtherInformation]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 Create procedure [dbo].[sp_ManageBusinessInstructorOtherInformation]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as 
 begin
 if(@mode=1)
  begin
     select ic.Id,ic.UserLoginId,ISNULL(ic.Title,'') as Title, ISNULL(ic.Description, '') AS Description from InstructorContentDescription_PPCMeta ic where UserLoginId = @businessOwnerLoginId
  end
 -----To Get About Detail For Instructor Page
 else if(@mode=2)
 begin
    select ic.Id,ic.UserLoginId,ISNULL(ic.Title,'') as Title, ISNULL(ic.Description, '') AS Description from InstructorContentDescription_PPCMeta ic where UserLoginId = @businessOwnerLoginId
 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessLicenses]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessLicenses]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@licenseId bigint,
	@certificateId bigint,
	@mode int
)
as
begin
	-- Get Available Certificateion Profiles of Booked businessLicenses by Business-Login-Id
	if(@mode=1)
	begin
		select c.Id, c.Name 
		from BusinessLicenses bl 
		inner join Licenses l on bl.LicenseId = l.Id
		inner join Certificates c on l.CertificateId = c.Id
		where bl.BusinessOwnerLoginId = @businessOwnerLoginId 
		and bl.QuantityUsed < bl.Quantity 
		Group by c.Id, c.Name
	end
	-- Get Booked Licenses Avaliable for training 
	else if(@mode=2)
	begin
		select bl.*, l.Title as LicenseTitle
		from BusinessLicenses bl 
		inner join Licenses l on bl.LicenseId = l.Id
		inner join Certificates c on l.CertificateId = c.Id
		where bl.BusinessOwnerLoginId = @businessOwnerLoginId 
		and bl.QuantityUsed < bl.Quantity 
		and l.CertificateId = @certificateId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessMasterProfileBannerDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessMasterProfileBannerDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint, 
	@userLoginId bigint,
	@mode int 
)
as
begin
   ----- To Get All Banner Detail By BusinessOwnerLoginId
   if (@mode= 1)
   begin
       select bcb.Id,bcb.UserLoginId,bcb.ProfilePageTypeId,bcb.Title,bcb.SubTitle,bcb.BannerType,bcb.BannerImage,dbo.GetMasterProfileBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath,bcb.Description from BusinessContentMasterProfileBanner_PPCMeta bcb where bcb.UserLoginId = @userLoginId and bcb.IsDeleted = 0
   end
   ----- To Get Master Profile Banner Detail By Id
	else if (@mode= 2)
	begin
       select bcb.Id,bcb.UserLoginId,bcb.ProfilePageTypeId,bcb.Title,bcb.SubTitle,bcb.BannerType,bcb.BannerImage,dbo.GetMasterProfileBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath,bcb.Description from BusinessContentMasterProfileBanner_PPCMeta bcb where bcb.Id = @id
   end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessMemberShipPackageDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessMemberShipPackageDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int 
) 
as
begin
	----- To Get MemberShip Package Detail by LoginId 
    if(@mode=1)
	begin
	    select mp.Id,mp.ProfilePageTypeId,mp.Title,mp.Description from BusinessContentMemberShipPackageDetail_PPCMeta mp where mp.UserLoginId = @userLoginId 
	end
	--- To Get MemberShip Plan Detail By Id 
	if(@mode=2)
	begin
	    select mp.Id,mp.ProfilePageTypeId,mp.Title,mp.Image,dbo.GetMemberShipPlanImageWithPath(mp.Image) as MemberShipPlanImageWithPath from BusinessContentMembershipPlan_PPCMeta mp where mp.Id = @id 
	end
	--- To Get MemberShip Plan Detail By UserLoginId 
	if(@mode=3)
	begin
	    select mp.Id,mp.ProfilePageTypeId,mp.Title,mp.Image,dbo.GetMemberShipPlanImageWithPath(mp.Image) as MemberShipPlanImageWithPath from BusinessContentMembershipPlan_PPCMeta mp where mp.UserLoginId = @userLoginId and mp.IsDeleted = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessNoticeBoardDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessNoticeBoardDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId  bigint,
@mode int 
)
as
begin
if(@mode=1)
begin
    select bn.Id,bn.UserLoginId,bn.StartDate,bn.Description from BusinessNoticeBoards bn where bn.Id = @id
end  
else if(@mode=2)
begin
     select bn.Id,bn.UserLoginId,bn.StartDate,   DATEPART(day, bn.StartDate) AS StartDay,
    DATENAME(month, bn.StartDate) AS StartMonth,
    DATEPART(year, bn.StartDate) AS StartYear,bn.Description from BusinessNoticeBoards bn where bn.UserLoginId = @userLoginId and bn.IsDeleted = 0
end
end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessPlanDurationType]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_ManageBusinessPlanDurationType]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get All Business-Plan-Duration-Types
	if(@mode=1)
	begin
		select * from BusinessPlanDurationTypes
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessPlans]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessPlans]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
AS
BEGIN
	-- Get All Business Plans List By Business
	if(@mode=1)
	begin
		select bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		where BusinessOwnerLoginId = @businessOwnerLoginId and bp.IsDeleted = 0
	end
	-- Get Business Plan by Id
	else if(@mode=2)
	begin
		select bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		where bp.IsDeleted = 0 and bp.Id = @id
	end
	-- Change Business Plan Status by Id
	else if(@mode=3)
	begin
		if exists(select top 1 bp.Id from BusinessPlans bp where bp.Id = @id and bp.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			update BusinessPlans set Status = (case Status when 1 then 0 else 1 end)
			where Id =  @id and BusinessOwnerLoginId = @businessOwnerLoginId

			select 1 as ret, 'Plan status has been successfully updated' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanStatusUpdated_SuccessMessage' as resourceKey
		end
		else
		begin	
			select -1 as ret, 'Plan not found!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PlanNot_Found' as resourceKey
		end
	end
	-- Get All Active Business-Plans List by BusinessOwnerLoginId
	if(@mode=4)
	begin
		select bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		where bp.BusinessOwnerLoginId = @businessOwnerLoginId and bp.IsDeleted = 0 and bp.Status = 1 
	end
	-- Get Active Business Plan Detial by Plan-Id For User/Student
	else if(@mode=5)
	begin
		select bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		where bp.Status = 1 and bp.IsDeleted = 0 and bp.Id = @id
	end
	-- Get Plan-Table Data by Plan-Id
	else if(@mode=6)
	begin
		select * from BusinessPlans bp where bp.Id = @id
	end
	-- Get All Active Business Plan Detial For User/Student TODO: Remove later just for showing on HomePage
	else if(@mode=7)
	begin
		select bp.Id, bp.Name, bp.BusinessPlanDurationTypeId, bp.Price, bp.PlanImage, bp.CompareAtPrice, bp.Description, bp.Status, bpdt.Value as BusinessPlanDurationTypeName, dbo.GetBusinessPlanImageWithPath(bp.PlanImage)  as PlanImageWithPath, bp.DiscountPercent
		from BusinessPlans bp 
		inner join BusinessPlanDurationTypes bpdt on bp.BusinessPlanDurationTypeId = bpdt.Id 
		where bp.Status = 1 and bp.IsDeleted = 0 
		order by bp.Id desc
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessProfile]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get Business Profile data by Business-Login-Id
	if(@mode=1)
	begin
		select bo.FirstName, bo.LastName, bo.About, bo.ProfileImage, bo.BusinessLogo,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bo.BusinessLogo, bo.BusinessName, ul.Email, ul.PhoneNumber, ul.Address, ul.City, ul.State, ul.Country, ul.Pincode, ul.FullAddressLocation as LandMark,bo.Experience,bo.privacy_UniqueUserId,
		bo.OfficialWebSiteUrl,
		ul.FacebookProfileLink, ul.TwitterProfileLink, ul.InstagramProfileLink, ul.LinkedInProfileLink, IsNull(bo.CoverImage, '') as CoverImage, dbo.GetBusinessCoverImageWithPath(bo.CoverImage) as CoverImageWithPath, bo.BusinessCategoryId, bo.BusinessSubCategoryId, bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName
		from BusinessOwners bo 
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		left join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where bo.UserLoginId = @businessOwnerLoginId
	end
	-- Get Business Profile uploaded documents 
	else if(@mode = 2)
	begin
		select d.DocumentTitle,d.DocumentFile,dbo.GetDocumentWithPath(d.DocumentFile)  as UploadedDocumentsWithPath,d.Status ,(CASE 
			WHEN d.Status = 1 THEN 'Accepted' when d.Status = 0 Then 'Pending'
			ELSE 'Rejected'end  ) as IsAcception  from DocumentDetails d where d.BusinessOwnerId = @businessOwnerLoginId
	end 
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessService]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
	if(@mode=1)
	begin
		select bs.Id,bs.Title,bs.Description,bs.Icon,dbo.GetBusinessServiceIconWithPath(bs.Icon) as BusinessServiceIconWithPath,bs.FeaturedImage,dbo.GetBusinessServiceImageWithPath(bs.FeaturedImage) as BusinessServiceImageWithPath		
			from BusinessServices bs 
			Where bs.Id = @id
	end
	---To Get Business Service detail in dance page show without Authentication
	else if(@mode=2)
	begin
		select bs.Id,bs.Title,bs.Description,bs.Icon,dbo.GetBusinessServiceIconWithPath(bs.Icon) as BusinessServiceIconWithPath,bs.FeaturedImage,dbo.GetBusinessServiceImageWithPath(bs.FeaturedImage) as BusinessServiceImageWithPath		
			from BusinessServices bs where bs.UserLoginId = @businessOwnerLoginId and bs.IsDeleted = 0
	end
end


GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessService_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageBusinessService_Pagination]
(
	@id bigint,
	@userLoginId bigint,
	@createdForLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Service Records Created by Business-Admin Users
	if(@mode=1)
	begin
		select bs.Id,bs.Title,bs.Description,bs.Icon,dbo.GetBusinessServiceIconWithPath(bs.Icon) as BusinessServiceIconWithPath,bs.Status,bs.CreatedOn, (CONVERT(varchar, bs.CreatedOn,106)) as CreatedOn_FormatDate
			INTO #AllBusinessServiceByBusinessAdmin
		from BusinessServices bs 
		Where bs.UserLoginId = @userLoginId and bs.IsDeleted = 0
		and
		(bs.Title LIKE '%'+@searchFilter+'%' OR
		bs.Description LIKE '%'+@searchFilter+'%' OR	
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllBusinessServiceByBusinessAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllBusinessServiceByBusinessAdmin
		order by
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllBusinessServiceByBusinessAdmin
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessStudents]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessStudents] 
(
	@id bigint,
	@businessOwnerId bigint,
	@studentId bigint,
	@userLoginId bigint,
	@mode int,
	@searchKeywords nvarchar(max)
)
as
begin
	-- Get All Students list by Business-Owner-Login-Id
	if(@mode=1)
	begin
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @userLoginId

		select s.Id as StudentId, s.UserLoginId as StudentUserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as StudentFullName, s.ProfileImage,
		dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, s.BusinessStudentProfileImage, dbo.GetStudentImageWithPath(s.BusinessStudentProfileImage) as BusinessStudentProfileImageWithPath, ul.Email, ul.PhoneNumber, ul.PhoneNumber_CountryCode, ul.Status
		from BusinessStudents bs 
		inner join Students s on bs.StudentId = s.Id 
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where bs.BusinessOwnerId = @businessOwnerId
		order by s.Id desc
	end
	-- Get All Business-Owners list by Student-Login-Id
	if(@mode=2)
	begin
		select @studentId = s.Id from Students s where s.UserLoginId = @userLoginId

		select bo.Id, bo.UserLoginId,bo.FirstName, bo.LastName, bo.BusinessName, bo.FirstName + ' ' + bo.LastName as BusinessOwnerFullName,ul.MasterId as BusinessMasterId, 
		bc.Name as BusinessCategoryName, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		IsNull( bsc.Name,'_') as BusinessSubCategoryName 
		from BusinessStudents bs 
		inner join BusinessOwners bo on bs.BusinessOwnerId = bo.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		where bs.StudentId = @studentId
	end
	-- Get All Students list by Business-Owner-Login-Id By Search-Keywords
	if(@mode=3)
	begin
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @userLoginId

		select s.Id as StudentId, s.UserLoginId as StudentUserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as StudentFullName, s.ProfileImage,
		dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.Email
		from BusinessStudents bs 
		inner join Students s on bs.StudentId = s.Id 
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where bs.BusinessOwnerId = @businessOwnerId and s.FirstName + ' ' + s.LastName LIKE '%' + @searchKeywords + '%'
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessTermConditionDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessTermConditionDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int 
) 
as
begin
	---- To Get Term Condition Detail by LoginId 
    if(@mode=1)
	begin
	    select tc.Id,tc.ProfilePageTypeId,tc.Title,tc.Description from BusinessContentTermCondition_PPCMeta tc  where tc.UserLoginId = @userLoginId 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessTimings]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_ManageBusinessTimings]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get Business-Timings by Business-Owner-Login-Id
	if(@mode= 1)
	begin
		select * from BusinessTimings where BusinessOwnerLoginId = @businessOwnerLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessUserEducationDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessUserEducationDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--- To Get User Education Detail By Id 
    if(@mode=1)
	begin
	    select ue.Id, ue.SchoolName,ue.UserLoginId,ue.Designation,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description,ue.Grade from UserEducations ue 
		 where ue.Id = @id
	end

	--- To Get Education Detail BY UserLoginId 
	else if (@mode = 2)
	begin
	   select ue.Id, ue.SchoolName,ue.UserLoginId,ue.Designation,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description,ue.Grade from UserEducations ue where ue.UserLoginId = @userLoginId and ue.IsDeleted = 0
	end
	else if (@mode=3)
	begin  
		select * from  UserEducations where UserLoginId = @userLoginId and IsDeleted = 0 ORDER BY StartYear DESC ;
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessUserExperienceDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessUserExperienceDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
--- To Get User Experience Detail By Id 
    if(@mode=1)
	begin
	    select ue.Id, ue.Title,ue.UserLoginId,ue.CompanyName,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description from UserExperiences ue 
		 where ue.Id = @id
	end
	--- To Get Experience Detail By UserLoginId 
	else if(@mode=2)
	begin
		select ue.Id, ue.Title,ue.UserLoginId,ue.CompanyName,ue.StartDate, ue.EndDate, ue.StartYear, ue.EndYear,ue.StartMonth,ue.EndMonth,  ue.Description from UserExperiences ue 
		    where ue.UserLoginId = @userLoginId and ue.IsDeleted = 0
	end
	else if (@mode =3)
	begin
		select * from  UserExperiences where UserLoginId = @userLoginId and IsDeleted =0  ORDER BY StartYear DESC;
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageBusinessVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageBusinessVideos] 
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get All Business-Videos by Business-Owner-Login-Id
	if(@mode = 1)
	begin
		select bv.Id, bv.VideoTitle, bv.VideoLink, bv.VideoThumbnail, ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) as VideoThumbNailImageWithPath, bv.BusinessContentVideoCategoryId as VideoCategoryId, bcvc.Name as VideoCategoryName,bv.Description
		from BusinessContentVideos bv 
		left join BusinessContentVideoCategories bcvc on bv.BusinessContentVideoCategoryId = bcvc.Id
		where bv.BusinessOwnerLoginId = @userLoginId 
		order by bv.CreatedOn desc
	end
	-- Get Random-Business Videos for Visitor-Panel (mobile app)
	else if(@mode=2)
	begin
		SELECT TOP 4 bv.Id,bv.VideoTitle,bv.VideoLink, ('/Content/Uploads/Images/VideoThumbNailImage/' + bv.VideoThumbNail) as VideoThumbNailImageWithPath FROM BusinessContentVideos bv ORDER BY NEWID()  
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCertificate]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageCertificate]
(
	@id bigint,
	@userLoginId bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- To Get Certificate Detail By Id 
	if(@mode=1)
	begin 
		select c.Id, c.Name, c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath, c.ProfilePageTypeId, c.ShortDescription, c.Status, c.CertificateTypeKey, ISNULL(c.Link, '') as Link
		from Certificates c where Id = @id
	end
	-- Certificate Record To Change-Status By Id 
	else if(@mode=2)
	begin
		update Certificates set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

		select 1 as ret, 'Certificate status has been successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateStatus_SuccessMessage' as resourceKey
	end
	-- Get All Certificate Data
	else if(@mode=3)
	begin 
		select c.Id, c.Name, c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath, c.ProfilePageTypeId, c.ShortDescription, c.Status, ISNULL(c.Link, '') as Link
		from Certificates c where c.IsDeleted = 0
	end
	-- Assign Certificate to business-Owner
	else if(@mode=4)
	begin
		if exists(select * from BusinessCertifications bc where bc.BusinessOwnerLoginId = @businessOwnerLoginId and bc.CertificateId = @id)
		begin
			select -1 as ret, 'Certificate already assigned to this business!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateAlreadyAssigned_ErrorMessage' as resourceKey
		end
		else
		begin
			Insert into BusinessCertifications(BusinessOwnerLoginId, CertificateId) values (@businessOwnerLoginId,@id)

			select 1 as ret, 'Certificate has been successfully assigned!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateAssigned_SuccessMessage' as resourceKey
		end
	end
	-- Un-Assign Certificate to business-Owner
	else if(@mode=5)
	begin
		if not exists(select * from BusinessCertifications bc where bc.BusinessOwnerLoginId = @businessOwnerLoginId and bc.CertificateId = @id)
		begin
			select -1 as ret, 'Certificate is not assigned to this business!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateNotAssigned_ErrorMessage' as resourceKey
		end
		else
		begin
			delete from BusinessCertifications where BusinessOwnerLoginId = @businessOwnerLoginId and CertificateId = @id

			select 1 as ret, 'Certificate has been successfully un-assigned!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CertificateUnAssigned_SuccessMessage' as resourceKey
		end
	end
	-- Get all active, assigned certifications to the business-owner by BO-Login-Id
	else if(@mode=6)
	begin
		select c.Id, c.Name, c.ShortDescription, c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath, c.Status
		from BusinessCertifications bc
		inner join Certificates c on bc.CertificateId = c.Id
		where bc.BusinessOwnerLoginId = @businessOwnerLoginId and c.Status = 1
	end
	-- Get All Assigned Business-Owners List for Certificate by Certificate-Id (Super-Admin)
	else if(@mode=7)
	begin
		select bo.Id, bo.BusinessName, bo.FirstName, bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, 
		1 as IsCertificateAssigned,
		bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName, ul.MasterId as BusinessMasterId, ul.UniqueUserId as BusinessUniqueUserId
		from BusinessOwners bo
		inner join BusinessCertifications bcert on bo.UserLoginId = bcert.BusinessOwnerLoginId
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bc.Id
		where ul.IsDeleted = 0 and bcert.CertificateId = @id
	end
	---To Get Certificate Detail 
	else if(@mode=8)
	begin
	    select  c.Id,c.CertificateIcon,dbo.GetCertificateImageWithPath(c.CertificateIcon)as CertificateImageWithPath   from Certificates c 
		inner join UserCertificates uc on c.Id = uc.CertificateId
		where uc.UserLoginId = @userLoginId
	end
	-- Get All Active Certificate Data For Home Page
	else if(@mode=9)
	begin 
		select c.Id, c.Name, c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath, ISNULL(c.Link, '') as Link
		from Certificates c where c.IsDeleted = 0 and c.Status = 1 and c.ShowOnHomePage = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCertificate_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_ManageCertificate_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Detail in business owner
	if(@mode=1)
	begin
	      	
Select c.Id,c.CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath,c.Name, c.ProfilePageTypeId, c.ShortDescription,c.Status, c.CreatedOn, (CONVERT(varchar, c.CreatedOn,106)) as CreatedOn_FormatDate, ppt.Name as ProfilePageTypeName, c.CertificateTypeKey, c.ShowOnHomePage, ISNULL(c.Link, '') as Link
		INTO #GetAllCertificateForSuperAdmin
		from Certificates c
		left join ProfilePageTypes ppt on c.ProfilePageTypeId = ppt.Id
	where c.IsDeleted = 0 

		and
		( 
		  c.Name LIKE '%'+@searchFilter+'%' OR
		  ppt.Name LIKE '%'+@searchFilter+'%' OR
		  c.ShortDescription LIKE '%'+@searchFilter+'%' OR
		  c.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,c.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllCertificateForSuperAdmin);

		select ROW_NUMBER() OVER (order by
		        
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'ProfilePageTypeName' AND @sortOrder = 'ASC' THEN ProfilePageTypeName END,
				CASE WHEN @sorting = 'ProfilePageTypeName' AND @sortOrder = 'DESC' THEN ProfilePageTypeName END DESC,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'ASC' THEN ShortDescription END,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllCertificateForSuperAdmin
		order by
		    	
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'ProfilePageTypeName' AND @sortOrder = 'ASC' THEN ProfilePageTypeName END,
				CASE WHEN @sorting = 'ProfilePageTypeName' AND @sortOrder = 'DESC' THEN ProfilePageTypeName END DESC,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'ASC' THEN ShortDescription END,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllCertificateForSuperAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCity]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageCity]
(
	@id bigint,
	@stateId bigint,
	@mode int
)
as
begin
	--Get All cities list by state-id
	if(@mode=1)
	begin
		select cm.* from CityMasters cm where cm.StateID = @stateId and cm.Status = 1
	end
	--Get City detail by City-Id
	else if(@mode=2)
	begin
		select citym.*,cm.Name as CountryName, cm.CountryCode, cm.CurrencyCode, sm.StateCode from CityMasters citym 
		inner join StateMasters sm on citym.StateID = sm.ID 
		inner join CountryMasters cm on sm.CountryID = cm.ID
		where citym.ID = @id
	end
	-- Get all Cities
	else if(@mode=3)
	begin
		select * from CityMasters cm where cm.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClass]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClass]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	--Get Class Data By Id
	if(@mode = 1)
	begin
		select c.Id,c.Name,c.Description,c.ClassMode,c.OnlineClassLink,c.Price,ClassDays,c.Address,c.State,c.City,c.Country,c.Pincode,c.LandMark,c.IsPaid,c.ClassPriceType,c.ClassURLLinkPassword, c.ClassType, c.HowToBookText, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.ClassCategoryTypeId, IsNull(cct.ParentClassCategoryTypeId, 0) as ParentClassCategoryTypeId
		from Classes c 
		left join ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id
		where c.Id = @id and c.IsDeleted = 0
	end
	--Get Class List
	else if(@mode=2)
	begin
		select c.Id,c.Name,c.Description,c.ClassMode,c.OnlineClassLink,c.Price,ClassDays 
		from Classes c 
		where c.IsDeleted = 0 
		order by Id desc
	end
	--Get Table Data for class by class id 
	else if(@mode =3)
	begin
		select * from Classes where Id= @id
	end
	--Get All Active Distinct Classes
	else if(@mode = 4)
	begin
		SELECT DISTINCT Name FROM Classes where IsDeleted = 0 and BusinessOwnerLoginId = @userLoginId
	end
	-- Get All Active Classes list for Mobile-App-Profile-page display
	else if(@mode=5)
	begin
		select c.Id, c.Name, c.ClassMode, b.Name as BatchName, insBO.UserLoginId as InstructorUserLoginId, insBO.FirstName as InstructorFirstName, insBO. LastName as InstructorLastName,  insBO.FirstName + ' ' + insBO. LastName as InstructorFullName, dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) as InstructorProfileImageWithPath , insUL.IsCertified as InstructorIsCertified, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.Description
		from Classes c 
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where c.IsDeleted = 0 and c.BusinessOwnerLoginId = @userLoginId
	end
	-- Get all distinct Business-Class-Categories of all classes created by Business-Owner-Login-Id
	else if(@mode=5)
	begin
		select distinct(cct.Name), cct.Id, cct.BusinessCategoryId, cct.Image, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath, cct.IsActive 
		from Classes c 
		inner join ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id 
		where c.BusinessOwnerLoginId = @userLoginId
		and c.IsDeleted = 0
	end
	-- Get all distinct Business-Class-Categories of all ONLINE classes created by Business-Owner-Login-Id
	else if(@mode=6)
	begin
		select distinct(cct.Name), cct.Id, cct.BusinessCategoryId, cct.Image, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath, cct.IsActive
		from Classes c 
		inner join ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id 
		where c.BusinessOwnerLoginId = @userLoginId and c.IsDeleted = 0 and c.ClassMode = 'Online'
	end
	-- Get all distinct Business-Class-Categories of all OFFLINE classes created by Business-Owner-Login-Id
	else if(@mode=7)
	begin
		select distinct(cct.Name), cct.Id, cct.BusinessCategoryId, cct.Image, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath, cct.IsActive 
		from Classes c 
		inner join ClassCategoryTypes cct on c.ClassCategoryTypeId = cct.Id 
		where c.BusinessOwnerLoginId = @userLoginId and c.IsDeleted = 0 and c.ClassMode = 'Offline'
	end
	-- Get All Active Offline Classes for dropdown list
	else if(@mode=8)
	begin
		select c.Id, c.Name from Classes c where c.BusinessOwnerLoginId = @userLoginId and c.ClassMode = 'Offline'
	end
	---- Get All Classes Detail With InstructorDetail   Used in All Class in Visitor-Panel
	else if(@mode=9)
	begin
		SELECT
		c.Id, Max(c.Description) As Description, MAX(c.BusinessOwnerLoginId) AS BusinessOwnerLoginId, MAX(c.Name) AS Name, MAX(c.OnlineClassLink) AS OnlineClassLink,MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')) AS FormattedScheduledOnDateTime, MAX(IsNull(c.Address,'')) AS Address, MAX(IsNull(c.ClassDays_ShortForm,'')) AS ClassDays_ShortForm, MAX(IsNull(c.ClassType,'')) AS ClassType, MAX(c.classMode) AS classMode, MAX(c.ClassImage) AS ClassImage, MAX(dbo.GetClassImageWithPath(c.ClassImage)) AS ClassImageWithPath,  MAX(b.ScheduledStartOnTime_24HF) AS ScheduledStartOnTime_24HF,MAX(b.ScheduledEndOnTime_24HF) AS ScheduledEndOnTime_24HF, MAX(b.ScheduledOnDateTime) AS ScheduledOnDateTime,MAX(bo.BusinessName) AS BusinessName, MAX(bo.ProfileImage) AS ProfileImage, MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)) AS BusinessProfileImage,DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()) AS DaysDifference,DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24 AS HoursDifference,DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60 AS MinutesDifference,ISNULL(MAX(r.Rating),0) AS Rating, MAX(bc.Name) AS BusinessSubCategoryName,Max(DAY(b.ScheduledOnDateTime)) AS ScheduledDay, 
			Max(Format(b.ScheduledOnDateTime,'MMMM')) AS ScheduledMonth,Max(bo.FirstName +''+bo.LastName )as BusinessOwnerName,COUNT(*) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
			COALESCE(SUM(r.Rating), 0) AS TotalRating
			FROM Classes c
			Left JOIN ClassBatches cb ON cb.ClassId = c.Id
			left Join Batches b on cb.BatchId = b.Id
			INNER JOIN BusinessOwners bo ON b.InstructorLoginId = bo.UserLoginId
			LEFT JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
			LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
			where c.IsDeleted = 0 and b.IsDeleted = 0 and b.Status = 1
			GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName;
	end
	---- To Get Business Classes By BusinessSubCategoryId
	else if (@mode=10)
	begin
	 --   SELECT c.Id, c.BusinessOwnerLoginId,c.Address,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.Name,b.ScheduledEndOnTime_24HF, bo.FirstName + ' ' + bo.LastName as BusinessOwnerName, c.City, b.ScheduledStartOnTime_24HF,
		--     DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime
		--FROM Classes c
		--Left JOIN ClassBatches cb ON cb.ClassId = c.Id
		--left Join Batches b on cb.BatchId = b.Id
		--INNER JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId 
		-- where bo.BusinessSubCategoryId = @id
		SELECT
		c.Id, Max(c.Description) As Description, MAX(c.BusinessOwnerLoginId) AS BusinessOwnerLoginId, MAX(c.Name) AS Name, MAX(c.OnlineClassLink) AS OnlineClassLink,MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')) AS FormattedScheduledOnDateTime, MAX(IsNull(c.Address,'')) AS Address, MAX(IsNull(c.ClassDays_ShortForm,'')) AS ClassDays_ShortForm, MAX(IsNull(c.ClassType,'')) AS ClassType, MAX(c.classMode) AS classMode, MAX(c.ClassImage) AS ClassImage, MAX(dbo.GetClassImageWithPath(c.ClassImage)) AS ClassImageWithPath,  MAX(b.ScheduledStartOnTime_24HF) AS ScheduledStartOnTime_24HF,MAX(b.ScheduledEndOnTime_24HF) AS ScheduledEndOnTime_24HF, MAX(b.ScheduledOnDateTime) AS ScheduledOnDateTime,MAX(bo.BusinessName) AS BusinessName, MAX(s.ProfileImage) AS ProfileImage, MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)) AS BusinessProfileImage,DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()) AS DaysDifference,DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24 AS HoursDifference,DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60 AS MinutesDifference,ISNULL(MAX(r.Rating),0) AS Rating, MAX(bc.Name) AS BusinessSubCategoryName,Max(DAY(b.ScheduledOnDateTime)) AS ScheduledDay, 
			Max(Format(b.ScheduledOnDateTime,'MMMM')) AS ScheduledMonth,Max(bo.FirstName +''+bo.LastName )as BusinessOwnerName,COUNT(*) AS TotalReviewsEntered, ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,
		COALESCE(SUM(r.Rating), 0) AS TotalRating
				FROM Classes c
		LEFT JOIN ClassBatches cb ON cb.ClassId = c.Id
		LEFT JOIN Batches b ON cb.BatchId = b.Id
		Left Join Staffs s on b.InstructorLoginId = s.UserLoginId
		LEFT Join UserLogins ul on b.BusinessOwnerLoginId = ul.Id
		Left JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		Left JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
		LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
		WHERE bo.BusinessSubCategoryId = @id
		GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName;
	end
	--Get Class List For Home Page by Business Owner login Id
	else if(@mode=11)
	begin
		select c.Id,c.Name,c.Description,b.ScheduledEndOnTime_24HF,b.ScheduledStartOnTime_24HF,c.ClassMode,c.OnlineClassLink,c.Price,
		c.ClassDays,b.StudentMaxStrength,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,IsNull(c.Address,'') as Address,IsNull(c.State,'') as State,IsNull(c.City,'')as City,IsNull(c.Country,'') as Country,IsNull(c.Pincode,'') as Pincode,IsNull(c.LandMark,'') as LandMark from Classes c 
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		where c.IsDeleted = 0 and c.BusinessOwnerLoginId = @userLoginId
	end
	----Get Upcoming Class  by Business Owner login Id
	else if(@mode=12)
	begin
	  SELECT c.Id, c.BusinessOwnerLoginId,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.Name,b.ScheduledEndOnTime_24HF, bo.FirstName + ' ' + bo.LastName as BusinessOwnerName, c.City, b.ScheduledStartOnTime_24HF,
       DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime
		FROM Classes c
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		INNER JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
		WHERE b.ScheduledOnDateTime BETWEEN GETUTCDATE() AND DATEADD(DAY, 2, GETUTCDATE()) and  b.InstructorLoginId =  @userLoginId and c.IsDeleted = 0 and b.IsDeleted = 0

	end
	--------Get Offline Class By  Business Owner login Id
	else if(@mode=13)
	begin
	   SELECT c.Id, c.BusinessOwnerLoginId, c.Name,bo.FirstName +''+ bo.LastName as BusinessOwnerName,b.ScheduledEndOnTime_24HF, c.City, b.ScheduledStartOnTime_24HF,DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,c.Price,c.Description
		FROM Classes c 
		inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		WHERE b.InstructorLoginId = @userLoginId   AND c.ClassMode = 'Offline' and c.IsDeleted = 0 and b.IsDeleted = 0;
	end
	--------Get Online Class By  Business Owner login Id
	else if(@mode=14)
	begin
	   SELECT c.Id, c.BusinessOwnerLoginId, c.Name,bo.FirstName +''+ bo.LastName as BusinessOwnerName, c.City, b.ScheduledStartOnTime_24HF,DATENAME(WEEKDAY, b.ScheduledOnDateTime) AS DayOfWeek, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime,c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,c.Price,c.Description
		FROM Classes c 
		inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		WHERE b.InstructorLoginId = @userLoginId   AND c.ClassMode = 'Online';
	end
	--Get Course Details By BusinessOwnerLoginId
	else if(@mode=15)
	begin
	     select c.Id, ISNULL(c.Name, '') AS ClassName, ISNULL(c.ClassMode, '') AS ClassMode,ISNULL(c.Description, '') AS ClassDescription,ISNULL(b.Name, '') AS BatchName, ISNULL(insBO.UserLoginId, '') AS InstructorUserLoginId, ISNULL(insBO.FirstName, '') AS InstructorFirstName,ISNULL(insBO.LastName, '') AS InstructorLastName,ISNULL(insBO.FirstName + ' ' + insBO.LastName, '') AS InstructorFullName,dbo.GetBusinessProfileImageWithPath(insBO.ProfileImage) AS InstructorProfileImageWithPath, ISNULL(insUL.IsCertified, 0) AS InstructorIsCertified, ISNULL(c.Address, '') AS ClassAddress, ISNULL(c.ClassType, '') AS ClassType, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime,ISNULL(dbo.GetClassImageWithPath(c.ClassImage), '') AS ClassImageWithPath,ISNULL(insUL.FacebookProfileLink, '') AS FacebookProfileLink,ISNULL(insUL.TwitterProfileLink, '') AS TwitterProfileLink,
    ISNULL(insUL.InstagramProfileLink, '') AS InstagramProfileLink,ISNULL(insUL.LinkedInProfileLink, '') AS LinkedInProfileLink,ISNULL(insUL.UniqueUserId, '') AS UniqueUserId,ISNULL(bcc.Description, '') AS ClassDescription
		from Classes c 
		inner join ClassBatches cb on c.Id = cb.ClassId
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId
		inner join UserLogins insUL on insBO.UserLoginId = insUL.Id
		inner join BusinessContentClass_PPCMeta bcc on c.BusinessOwnerLoginId = bcc.UserLoginId
		where c.IsDeleted = 0 and c.Id = @id
	end
	--- To Get the Class Instructor Detail Using Single Class Detail 
	else if(@mode=16)
	begin
	    select b.Id, ISNULL(insBO.FirstName, '') + ' ' + ISNULL(insBO.LastName, '') AS InstructorName, dbo.GetBusinessProfileImageWithPath(ISNULL(insBO.ProfileImage, '')) AS InstructorImageWithPath,ISNULL(insBO.Address, '') AS Address, ISNULL(bsc.Name, '') AS Name, ISNULL(bc.Name, '') AS BusinessCategoryName
	  from Batches b 
	  inner join BusinessOwners insBo  on b.InstructorLoginId = insBo.UserLoginId 
	  inner join ClassBatches cb on b.Id = cb.BatchId
	  inner join BusinessCategories bc on insBo.BusinessSubCategoryId = bc.Id
	  inner join BusinessCategories bsc on insBo.BusinessCategoryId = bsc.Id
	  where cb.ClassId= @id
	end
	--Get Class List Active/Inactive by Business
	else if(@mode=17)
	begin
		select c.Id,c.Name,c.Description,c.ClassMode,c.OnlineClassLink,c.Price,ClassDays 
		from Classes c 
		where c.IsDeleted = 0 and c.BusinessOwnerLoginId = @userLoginId
		order by Id desc
	end
	-- To get Class Detail For Branch List 
	else if (@mode=18)
	begin
	   select c.Id, c.Name as ClassName,cb.EndDate from Classes c  
		INNER JOIN ClassBookings cb ON c.Id = cb.ClassId	
		INNER JOIN Orders o ON cb.OrderId = o.Id
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
		where bo.UserLoginId =  @userLoginId AND CAST(cb.EndDate AS DATE) > CAST(GETUTCDATE() AS DATE) and c.IsDeleted = 0 
	end
	--Get Class List For Home Page (Show On home page Active)
	else if(@mode=19)
	begin
		select c.Id,c.Name,c.Description,c.ClassMode,c.OnlineClassLink,c.Price,c.ClassDays, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath
		from Classes c 
		where c.IsDeleted = 0 
		and c.ShowOnHomePage = 1
		--and c.Status = 1
		order by Id desc
	end
	--- To Get Class CategoryName Detail List 
	else if(@mode=20)
    begin
	    select DISTINCT cc.Id, cc.Name as CategoryName from ClassCategoryTypes cc inner join Classes c on cc.Id = c.ClassCategoryTypeId where c.BusinessOwnerLoginId = @userLoginId
	end
	---- To Get Instructor Detail List By UserLoginId 
	else if(@mode=21)
	begin
		select Distinct  b.Id, ISNULL(insBO.FirstName, '') + ' ' + ISNULL(insBO.LastName, '') AS InstructorName, dbo.GetBusinessProfileImageWithPath(ISNULL(insBO.ProfileImage, '')) AS InstructorImageWithPath,b.InstructorLoginId as InstructorUserLoginId
		from Batches b 
		inner join BusinessOwners insBo  on b.InstructorLoginId = insBo.UserLoginId 
		inner join ClassBatches cb on b.Id = cb.BatchId
		inner join Classes c on c.Id = cb.ClassId
		where b.BusinessOwnerLoginId =@userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClass_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClass_Pagination]
(
	@id bigint,
	@CreatedByLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	--declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Classes Created by Business Owner
	if(@mode=1)
	begin
		--select @businessOwnerId = Id from BusinessOwners bo where UserLoginId = @businessOwnerLoginId

		select c.Id, c.Name,c.Description,c.Price,c.ClassMode,c.CreatedOn, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath
		INTO #GetAllClassesByUserLoginId
		from Classes c
		where c.BusinessOwnerLoginId = @userLoginId
		and c.IsDeleted = 0 
		and
		(c.Name LIKE '%'+@searchFilter+'%' OR
		c.Description LIKE '%'+@searchFilter+'%' OR
		c.Price LIKE '%'+@searchFilter+'%' OR
		c.ClassMode LIKE '%'+@searchFilter+'%'
		)

		set @totalRecords = (select Count(*) from #GetAllClassesByUserLoginId);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'ASC' THEN ClassMode END,
				CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'DESC' THEN ClassMode END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllClassesByUserLoginId
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
		CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'ASC' THEN ClassMode END,
		CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'DESC' THEN ClassMode END DESC,

		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllClassesByUserLoginId
	end
	-- Get All Classes - For Super-Admin-Panel
	if(@mode=2)
	begin
		--select @businessOwnerId = Id from BusinessOwners bo where UserLoginId = @businessOwnerLoginId

		select c.Id, c.BusinessOwnerLoginId, c.Name,c.Description,c.Price,c.ClassMode,c.CreatedOn, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath, c.ShowOnHomePage,
			bo.FirstName, bo.LastName, bo.BusinessName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.ProfileImage as BusinessProfileImage, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as BusinessProfileImageWithPath
		INTO #GetAllClassesForSuperAdminPanel
		from Classes c
		inner join BusinessOwners bo on c.BusinessOwnerLoginId = bo.UserLoginId
		where c.IsDeleted = 0
		and
		(c.Name LIKE '%'+@searchFilter+'%' OR
		bo.BusinessName LIKE '%' + @searchFilter + '%' OR
		c.Description LIKE '%'+@searchFilter+'%' OR
		c.Price LIKE '%'+@searchFilter+'%' OR
		c.ClassMode LIKE '%'+@searchFilter+'%'
		)

		set @totalRecords = (select Count(*) from #GetAllClassesForSuperAdminPanel);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'ASC' THEN ClassMode END,
				CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'DESC' THEN ClassMode END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllClassesForSuperAdminPanel
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
		CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
		CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
		CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
		CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
		CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'ASC' THEN ClassMode END,
		CASE WHEN @sorting = 'ClassMode' AND @sortOrder = 'DESC' THEN ClassMode END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllClassesForSuperAdminPanel
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassBatches]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClassBatches]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@classId bigint,
	@batchId bigint,
	@mode int
)	
as
begin
	-- Get All Class-Batches Detail List by Class-Id
	if(@mode=1)
	begin
		select b.* 
		from ClassBatches cb 
		inner join [Batches] b on cb.BatchId = b.Id
		where cb.ClassId = @classId
	end
	-- Get Active Batch-List not linked to any other class(excluding passed class) for dropdown by Business-Owner-Login-Id and class Id
	else if(@mode=2)
	begin
		select * from [Batches] b where b.IsDeleted = 0 and b.Status = 1 and b.BusinessOwnerLoginId = @businessOwnerLoginId and b.Id not in (select cb.BatchId from ClassBatches cb where cb.ClassId != @classId)
	end
	-- Get All Active Class-Batches List by Class-Id
	if(@mode=3)
	begin
		select b.* 
		from ClassBatches cb 
		inner join [Batches] b on cb.BatchId = b.Id
		where cb.ClassId = @classId and b.Status = 1
	end
	-- Get All Active Class-Batches List by Class-Id for business
	if(@mode=4)
	begin
		select b.* 
		from ClassBatches cb 
		inner join [Batches] b on cb.BatchId = b.Id
		where cb.ClassId = @classId and b.BusinessOwnerLoginId = @businessOwnerLoginId and b.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClassBooking]
(
	@id bigint,
	@userLoginId bigint, 
	@classId bigint,
	@batchId bigint,
	@mode int,
	@joiningDate nvarchar(max)
)
as
begin
	-- Get Class Booking Details with Order by User [having order status Paid]
	if(@mode=1)
	begin
		select * from ClassBookings cb 
		inner join Orders o on cb.OrderId = o.Id
		where cb.StudentUserLoginId = @userLoginId and cb.ClassId = @classId and o.Status = 1 order by cb.Id desc
	end
	-- Get Class-Bookings count by class-Id, batch-Id and joining date
	else if(@mode=2)
	begin
		select count(*) 
		from ClassBookings cb 
		where cb.ClassId = @classId and cb.BatchId = @batchId and cast(cb.EndDate_DateTimeFormat as date) >= cast(@joiningDate as date)
	end
	--- To get class booked detail in visitor-panel 
	else if(@mode=3) 
	begin
	    select c.Id,IsNull(c.BusinessOwnerLoginId, '') as BusinessOwnerLoginId, IsNull(c.Name, '') as ClassName, IsNull(c.Description, '') as ClassDescription, IsNull(c.Price, 0) as Price, IsNull(c.Address, '') as ClassAddress, IsNull(c.ClassMode, '') as ClassMode, IsNull(c.ClassDays, '') as ClassDays, IsNull(c.ClassType, '') as ClassType, IsNull(c.ClassImage, '') as ClassImage, IsNull(dbo.GetClassImageWithPath(c.ClassImage), '') as ClassImageWithPath, FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy') AS FormattedScheduledOnDateTime, IsNull(c.ClassDays_ShortForm, '') as ClassDays_ShortForm,  IsNull(c.OnlineClassLink, '') as OnlineClassLink, IsNull(bo.BusinessName, '') as BusinessName,  IsNull(b.ScheduledStartOnTime_24HF, '') as ScheduledStartOnTime_24HF,  IsNull(b.ScheduledEndOnTime_24HF, '') as ScheduledEndOnTime_24HF, DATEDIFF(HOUR, b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF) as DurationInHours, IsNull(bo.About, '') as About, IsNull(insUL.FacebookProfileLink, '') as FacebookProfileLink,  IsNull(insUL.TwitterProfileLink, '') as TwitterProfileLink,IsNull(insUL.InstagramProfileLink, '') as InstagramProfileLink,
 IsNull(insUL.LinkedInProfileLink, '') as LinkedInProfileLink, IsNull(insUL.UniqueUserId, '') as UniqueUserId
		from Classes c 
		Inner join Batches b on c.BusinessOwnerLoginId = b.BusinessOwnerLoginId
		Inner Join BusinessOwners bo on b.InstructorLoginId = bo.UserLoginId	
		Inner Join UserLogins insUL on c.BusinessOwnerLoginId = insUL.Id where c.Id = @classId and b.Id = @batchId
	end
	else if(@mode=4)
	begin
		select * from ClassBatches where ClassId = @classId
	end
	else if(@mode=5)
begin
    SELECT c.Id, ISNULL(MAX(c.Description), '') AS Description,ISNULL(MAX(c.BusinessOwnerLoginId), '') AS BusinessOwnerLoginId,
 ISNULL(MAX(c.Name), '') AS Name,ISNULL(MAX(c.OnlineClassLink), '') AS OnlineClassLink, ISNULL(MAX(FORMAT(b.ScheduledOnDateTime, 'MMMM dd, yyyy')), '') AS FormattedScheduledOnDateTime,ISNULL(MAX(c.Address), '') AS Address,
 ISNULL(MAX(c.ClassDays_ShortForm), '') AS ClassDays_ShortForm,ISNULL(MAX(c.ClassType), '') AS ClassType,ISNULL(MAX(c.classMode), '') AS classMode,ISNULL(MAX(c.ClassImage), '') AS ClassImage,ISNULL(MAX(dbo.GetClassImageWithPath(c.ClassImage)), '') AS ClassImageWithPath, ISNULL(MAX(b.ScheduledStartOnTime_24HF), '') AS ScheduledStartOnTime_24HF,
 ISNULL(MAX(b.ScheduledEndOnTime_24HF), '') AS ScheduledEndOnTime_24HF,ISNULL(MAX(b.ScheduledOnDateTime), '') AS ScheduledOnDateTime, ISNULL(MAX(bo.BusinessName), '') AS BusinessName,ISNULL(MAX(s.ProfileImage), '') AS ProfileImage,
 ISNULL(MAX(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage)), '') AS BusinessProfileImage,ISNULL(DATEDIFF(DAY, MAX(b.ScheduledOnDateTime), GETDATE()), 0) AS DaysDifference,ISNULL(DATEDIFF(HOUR, MAX(b.ScheduledOnDateTime), GETDATE()) % 24, 0) AS HoursDifference,ISNULL(DATEDIFF(MINUTE, MAX(b.ScheduledOnDateTime), GETDATE()) % 60, 0) AS MinutesDifference,
 ISNULL(MAX(r.Rating), 0) AS Rating,ISNULL(MAX(bc.Name), '') AS BusinessSubCategoryName,ISNULL(Max(DAY(b.ScheduledOnDateTime)), 0) AS ScheduledDay,ISNULL(Max(Format(b.ScheduledOnDateTime, 'MMMM')), '') AS ScheduledMonth,
 ISNULL(Max(bo.FirstName + '' + bo.LastName), '') AS BusinessOwnerName,ISNULL(COUNT(*), 0) AS TotalReviewsEntered,
ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating,ISNULL(SUM(r.Rating), 0) AS TotalRating,ISNULL(bc.MenuTag, '') AS MenuTag
FROM Classes c
LEFT JOIN ClassBatches cb ON cb.ClassId = c.Id
LEFT JOIN Batches b ON cb.BatchId = b.Id
Left Join Staffs s on b.InstructorLoginId = s.UserLoginId
LEFT Join UserLogins ul on b.BusinessOwnerLoginId = ul.Id
Left JOIN BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
Left JOIN BusinessCategories bc ON bo.BusinessSubCategoryId = bc.Id
LEFT JOIN Reviews r ON b.InstructorLoginId = r.ItemId
where c.Id = @classId
--WHERE bo.BusinessSubCategoryId = @id
GROUP BY c.Id, c.Description, c.BusinessOwnerLoginId, c.Name, c.OnlineClassLink, c.Address, c.ClassDays_ShortForm, c.ClassType, c.classMode, c.ClassImage, bo.BusinessName, bo.ProfileImage, bc.Name, bo.FirstName, bo.LastName,bc.MenuTag;   
end
else if(@mode=6)
begin
   select c.BusinessOwnerLoginId as Id from Classes  c where c.Id=  @classId
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassCategoryType]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClassCategoryType]
(
	@id bigint,
	@businessCategoryId bigint,
	@mode int
)
as
begin
	-- Get All Class-Category-Types
	if(@mode=1)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath from ClassCategoryTypes cct where IsDeleted = 0
	end
	-- Get All Class-Category-Types by Business-Category-Id
	else if(@mode=2)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  from ClassCategoryTypes cct where IsDeleted = 0 and BusinessCategoryId = @businessCategoryId
	end
	-- Get All Active Class-Category-Types by Business-Category-Id
	else if(@mode=3)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  from ClassCategoryTypes cct where IsDeleted = 0 and IsActive = 1 and BusinessCategoryId = @businessCategoryId
	end
	-- Get Class-Category-Type by Id
	else if(@mode=4)
	begin
		select cct.*,dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  from ClassCategoryTypes cct where cct.Id =  @id
	end
	--- Get Class Category Type Detail List 
	else if(@mode=5)
	 begin
	     SELECT DISTINCT cct.Id,ISNULL(cct.Name, '') AS Name, cct.ParentClassCategoryTypeId, ISNULL(ct.Name, '') AS ParentClassCategoryTypeName, cct.Image, dbo.GetClassCategoryTypeImageWithPath(cct.Image) AS ImageWithPath, cct.IsActive, cct.Description
			FROM ClassCategoryTypes cct
			LEFT JOIN	ClassCategoryTypes ct ON cct.ParentClassCategoryTypeId = ct.Id
          WHERE cct.IsDeleted = 0 AND cct.CreatedByLoginId = @id
	 end
	-- Get All ParentCategory-List
	else if(@mode=6)
	begin
	    select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath from ClassCategoryTypes cct where cct.ParentClassCategoryTypeId = 0 and cct.IsDeleted = 0
	end
	-- Get All Active Sub Class-Category-Types by Paretn Class-Category-Type-Id
	else if(@mode=7)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  
		from ClassCategoryTypes cct where IsDeleted = 0 and IsActive = 1 and ParentClassCategoryTypeId = @id
	end
	-- Get All Class-Category-Types by Parent-Class-Category-Type-Id
	else if(@mode=8)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  from ClassCategoryTypes cct where cct.IsDeleted = 0 and cct.ParentClassCategoryTypeId = @id
	end
	-- Get All Active Sub Class-Categories-Types Data For Home Page
	else if(@mode=9)
	begin 
		select cct.*, IsNull(cct.Description, '') as Description, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  from ClassCategoryTypes cct where cct.IsDeleted = 0 and cct.IsActive = 1 and cct.ShowOnHomePage = 1 and cct.ParentClassCategoryTypeId != 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassFeature]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageClassFeature]
(
	@id bigint,
	@classId bigint,
	@mode int
)
as
begin 
	--Get All Class Features List By Class-Id
	if(@mode = 1)
	begin
		select cf.Id, cf.ClassId, cf.Title, cf.Description, cf.Icon, dbo.GetClassFeatureImageWithPath(cf.Icon) as ClassFeatureIconWithPath from ClassFeatures cf where cf.ClassId = @classId
	end
	--Get Single record Class-Feature By Class-Feature-Id
	else if(@mode = 2)
	begin
		select cf.Id, cf.ClassId, cf.Title, cf.Description, cf.Icon, dbo.GetClassFeatureImageWithPath(cf.Icon) as ClassFeatureIconWithPath from ClassFeatures cf where cf.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassicDanceProfile_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageClassicDanceProfile_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
---To Get Classic Dance Detail By UserLoginId 
  if(@mode=1)
   begin
       select ccp.Id,ccp.UserLoginId,ccp.ProfilePageTypeId ,ccp.Title,ccp.SubTitle,ccp.ClassicImage,dbo.GetClassicDanceProfileImageWithPath(ccp.ClassicImage) as ClassicImageWithPath,ccp.Image,dbo.GetClassicDanceProfileImageWithPath(ccp.Image) as ImageWithPath,ccp.ScheduleImage,dbo.GetClassicDanceProfileImageWithPath(ccp.ScheduleImage) as ScheduleImageWithPath from ClassicDanceProfileDetail_PPCMeta ccp where ccp.UserLoginId = @userLoginId
   end

   --- To Get Banner And Class Schedule detail 
 else if(@mode=2)
      begin
	      select ccp.Id,ccp.UserLoginId,ccp.ProfilePageTypeId ,IsNULL(ccp.Title,'') as Title,IsNULL(ccp.SubTitle,'') as SubTitle,IsNULL(ccp.ClassicImage,'') as ClassicImage,dbo.GetClassicDanceProfileImageWithPath(ccp.ClassicImage) as ClassicImageWithPath,IsNULL(ccp.Image,'') as Image,dbo.GetClassicDanceProfileImageWithPath(ccp.Image) as ImageWithPath,IsNULL(ccp.ScheduleImage,'') as ScheduleImage,dbo.GetClassicDanceProfileImageWithPath(ccp.ScheduleImage) as ScheduleImageWithPath,bcb.BannerImage,dbo.GetBannerImageWithPath(bcb.BannerImage) as BannerImageWithPath from ClassicDanceProfileDetail_PPCMeta ccp
		  inner join   BusinessContentBanners bcb on ccp.UserLoginId = bcb.UserLoginId
		  where ccp.UserLoginId = @userLoginId
	  end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageClassPauseDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[sp_ManageClassPauseDetail]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
----- ---- To Get The ClassPause Requests Detail by Id 
    if(@mode=1)
	begin
	    select cpr.Id,cpr.ClassBookingId,cpr.PauseStartDate,cpr.PauseEndDate,cpr.Reason,cpr.Status,cpr.PauseDays,cpr.BusinessReply,cpr.UserLoginId, cpr.BusinessOwnerLoginId from ClassPauseRequests cpr 
		where cpr.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageContactDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageContactDetail]
(
	@id bigint,
    @userLoginId bigint,
	@mode int
)
as
begin
	--Get Contact Detail Data
	if(@mode=1)
	begin
	 Select top 1 cd.Id, cd.Email, cd.ContactNumber1, cd.ContactNumber2, cd.Address from ContactDetails cd 
   end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCountry]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[sp_ManageCountry]
(
	@id bigint,
	@mode int
)
as
begin
	--Get All countries list
	if(@mode=1)
	begin
		select cm.* from CountryMasters cm where cm.Status=1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCoupon]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageCoupon]
(
	@id bigint,
	@userLoginId int,
	@businessOwnerLoginId bigint,
	@couponCode nvarchar(max),
	@mode int
)
as 
begin
	-- Get Coupon By Id 
	if(@mode=1)
	begin
		  select c.Id, c.Name,c.Description,c.StartDate,c.EndDate,c.IsFixedAmount,c.DiscountValue,c.DiscountFor,c.SelectedStudent from Coupons c Where Id = @id 
	end
	else if(@mode=2)
	begin
			select c.Id, c.Name,c.Description,c.Code,c.StartDate,c.EndDate,c.DiscountValue, c.IsFixedAmount,(CASE 
		WHEN c.IsFixedAmount = 1 THEN 'Fixed'
		ELSE 'percentage'end  ) as AmountTypeName, c.DiscountFor,(CASE 
		WHEN c.DiscountFor = 2 THEN  'Selected Student'
		ELSE 'All Student'end  ) as DiscountForName,c.SelectedStudent from Coupons c
	end
	-- Get Coupon By Id
	else if(@mode=3)
	begin
		select c.Id, c.Name, c.Description, c.Code, c.DiscountFor, c.SelectedStudent as SelectedStudents
		from Coupons c		
		where c.Id = @id
	end
	-- Get Coupon Detail By Coupon Code and (created by userLoginId)
	else if(@mode=4)
	begin
		select * from Coupons c Where  c.IsDeleted = 0 and c.Code = @couponCode and c.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCoupon_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageCoupon_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Groups Created by Business Owner
	if(@mode=1)
	begin
		

		select c.Id, c.Name, c.Description, c.Code, c.StartDate, c.EndDate, 
		c.IsFixedAmount,(CASE 
    WHEN c.IsFixedAmount = 1 THEN 'Fixed'
    ELSE 'percentage'end  ) as AmountTypeName,c.DiscountValue,  c.DiscountFor,(CASE 
    WHEN c.DiscountFor = 2 THEN  'Selected Student'
    ELSE 'All Student'end  ) as DiscountForName, c.TotalUsed,c.CreatedOn, (CONVERT(varchar, c.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #GetAllDiscountByBusinessOwner
		from Coupons c
		where c.UserLoginId = @businessOwnerLoginId
		and c.IsDeleted = 0 
		and
		(c.Name LIKE '%'+@searchFilter+'%' OR
		c.Description LIKE '%'+@searchFilter+'%' OR
		c.Code LIKE '%'+@searchFilter+'%' OR
		c.StartDate LIKE '%'+@searchFilter+'%' OR
		c.EndDate LIKE '%'+@searchFilter+'%' OR
		c.DiscountValue LIKE '%'+@searchFilter+'%' OR
		c.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,c.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #GetAllDiscountByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END ,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Code' AND @sortOrder = 'ASC' THEN Code END,
				CASE WHEN @sorting = 'Code' AND @sortOrder = 'DESC' THEN Code END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'IsFixedAmount' AND @sortOrder = 'ASC' THEN IsFixedAmount END,
				CASE WHEN @sorting = 'IsFixedAmount' AND @sortOrder = 'DESC' THEN IsFixedAmount END DESC,
				CASE WHEN @sorting = 'DiscountValue' AND @sortOrder = 'ASC' THEN DiscountValue END,
				CASE WHEN @sorting = 'DiscountValue' AND @sortOrder = 'DESC' THEN DiscountValue END DESC,
				CASE WHEN @sorting = 'DiscountFor' AND @sortOrder = 'ASC' THEN DiscountFor END,
				CASE WHEN @sorting = 'DiscountFor' AND @sortOrder = 'DESC' THEN DiscountFor END DESC,
				CASE WHEN @sorting = 'TotalUsed' AND @sortOrder = 'ASC' THEN TotalUsed END,
				CASE WHEN @sorting = 'TotalUsed' AND @sortOrder = 'DESC' THEN TotalUsed END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllDiscountByBusinessOwner
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Code' AND @sortOrder = 'ASC' THEN Code END,
				CASE WHEN @sorting = 'Code' AND @sortOrder = 'DESC' THEN Code END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'IsFixedAmount' AND @sortOrder = 'ASC' THEN IsFixedAmount END,
				CASE WHEN @sorting = 'IsFixedAmount' AND @sortOrder = 'DESC' THEN IsFixedAmount END DESC,
				CASE WHEN @sorting = 'DiscountValue' AND @sortOrder = 'ASC' THEN DiscountValue END,
				CASE WHEN @sorting = 'DiscountValue' AND @sortOrder = 'DESC' THEN DiscountValue END DESC,
				CASE WHEN @sorting = 'DiscountFor' AND @sortOrder = 'ASC' THEN DiscountFor END,
				CASE WHEN @sorting = 'DiscountFor' AND @sortOrder = 'DESC' THEN DiscountFor END DESC,
				CASE WHEN @sorting = 'TotalUsed' AND @sortOrder = 'ASC' THEN TotalUsed END,
				CASE WHEN @sorting = 'TotalUsed' AND @sortOrder = 'DESC' THEN TotalUsed END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllDiscountByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCouponConsumption]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageCouponConsumption] 
(
	@id bigint,
	@consumerUserLoginId bigint,
	@couponCode nvarchar(max),
	@mode int
)
as
begin
	-- Get Consuption Detail by Coupon-Code and consumer-Login-Id
	if(@mode = 1)
	begin
		select * from CouponConsumptions cc where cc.ConsumerUserLoginId = @consumerUserLoginId and cc.CouponCode = @couponCode
	end
	-- Get Consuption Detail by Coupon-Id and consumer-Login-Id
	if(@mode = 2)
	begin
		select * from CouponConsumptions cc where cc.ConsumerUserLoginId = @consumerUserLoginId and cc.CouponId = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCustomFormDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageCustomFormDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	------ To Get Custom Form Name Detail By BusinessOwnerLoginId 
	if(@mode=1)
    begin
		select  c.Id,c.CustomFormName
		from CustomForms c  
		where c.BusinessOwnerLoginId = @businessOwnerLoginId  and c.IsDeleted = 0
    end
	---- To Get Custom Form Detail By Id 
	else if(@mode=2)
	begin

	    select cf.Id,cf.CustomFormElementName,cf.CustomFormElementType,cf.CustomFormElementValue,cf.CustomFormElementPlaceholder,cf.CustomFormElementStatus, IsNull(cfo.CustomFormElementOptions,'') as CustomFormElementOptions,cfo.Id as CustomFormOptionId
		From CustomFormElements cf
		Left join CustomFormOptions cfo on cf.Id = cfo.CustomFormElementId
		where cf.CustomFormId = @id

	end
	--- To Get Custom Form Name Detail By Id 
	else if(@mode= 3)
    begin
	    select  c.Id,c.CustomFormName
		from CustomForms c  
		where c.Id = @id  and c.IsDeleted = 0
	end
	---- To Assign(Transfer Form)  Custom Form Id into business Owner  
	else if(@mode=4)
	begin
		if exists(select * from BusinessCustomForms bc where bc.BusinessOwnerLoginId = @businessOwnerLoginId and bc.CustomFormId = @id)
		begin
			select -1 as ret, 'Custom Form already assigned to this business!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CustomFormAlreadyAssigned_ErrorMessage' as resourceKey
		end
		else
		begin
			Insert into BusinessCustomForms(BusinessOwnerLoginId, CustomFormId,TransferById) values (@businessOwnerLoginId,@id,@userLoginId)

			select 1 as ret, 'Custom Form has been successfully assigned!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CustomFormAssigned_SuccessMessage' as resourceKey
		end
	end
	------ To UnAssign (Transfer Form) Custom Form Id into Business Owner 
	else if(@mode=5)
	begin
		if not exists(select * from BusinessCustomForms bc where bc.BusinessOwnerLoginId = @businessOwnerLoginId and bc.CustomFormId = @id)
		begin
			select -1 as ret, 'Custom Form is not assigned to this business!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CustomFormNotAssigned_ErrorMessage' as resourceKey
		end
		else
		begin
			delete from BusinessCustomForms where BusinessOwnerLoginId = @businessOwnerLoginId and CustomFormId = @id and TransferById = @userLoginId

			select 1 as ret, 'Custom Form has been successfully un-assigned!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'CustomFormUnAssigned_SuccessMessage' as resourceKey
		end
	end
	-- Get All Assigned Business-Owners List for BusinessCustom by CustomForm-Id (Super-Admin)
	else if(@mode=6)
	begin
		select bo.Id, bo.BusinessName, bo.FirstName,bcf.CustomFormId,c.CustomFormName,  bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, 
		1 as IsCertificateAssigned,
		bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName, ul.MasterId as BusinessMasterId, ul.UniqueUserId as BusinessUniqueUserId
		from BusinessOwners bo
		inner join BusinessCustomForms bcf on bo.UserLoginId = bcf.BusinessOwnerLoginId
		inner join UserLogins ul on bo.UserLoginId = ul.Id
			inner join CustomForms c on bcf.CustomFormId = c.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bc.Id
		where ul.IsDeleted = 0 and bcf.CustomFormId = @id
	end
	--- To Show Assign Custom Form Transfer By the Super Admin
	else if(@mode=7)
    begin
	    select bo.Id, bo.BusinessName, bo.FirstName,bcf.CustomFormId,c.CustomFormName,  bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, 
		1 as IsCertificateAssigned,
		bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName, ul.MasterId as BusinessMasterId, ul.UniqueUserId as BusinessUniqueUserId
		from BusinessOwners bo
		inner join BusinessCustomForms bcf on bo.UserLoginId = bcf.BusinessOwnerLoginId
		inner join CustomForms c on bcf.CustomFormId = c.Id
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bc.Id
		where ul.IsDeleted = 0 and bcf.BusinessOwnerLoginId = @businessOwnerLoginId
	end
	--- To Get Custom Form Transfer List By BusinessOwner To Another Business Owner 
	else if(@mode=8)
    begin
	     select bo.Id, bo.BusinessName, bo.FirstName,bcf.CustomFormId,c.CustomFormName ,bo.LastName,bo.BusinessCategoryId,bo.BusinessSubCategoryId,bo.ProfileImage,bo.BusinessLogo,ul.Email,ul.Status,
		dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath,
		bc.Name as BusinessCategoryName, ul.FullAddressLocation,bo.UserLoginId, 
		1 as IsCertificateAssigned,
		bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName, ul.MasterId as BusinessMasterId, ul.UniqueUserId as BusinessUniqueUserId
		from BusinessOwners bo
		inner join BusinessCustomForms bcf on bo.UserLoginId = bcf.BusinessOwnerLoginId
		inner join UserLogins ul on bo.UserLoginId = ul.Id
		inner join CustomForms c on bcf.CustomFormId = c.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id 
		left join BusinessCategories bsc on bo.BusinessSubCategoryId = bc.Id
		where ul.IsDeleted = 0 and bcf.TransferById = @businessOwnerLoginId

	 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageCustomFormDetail_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  procedure [dbo].[sp_ManageCustomFormDetail_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All View Detail for custom Form Detail in business owner
	if(@mode=1)
	begin
	   select c.CustomFormName,c.Status,cf.CustomFormElementName,cf.CustomFormElementType,cf.CustomFormElementValue,cf.CustomFormElementPlaceholder,cf.CustomFormElementStatus, IsNull(cfo.CustomFormElementOptions,'') as CustomFormElementOptions,c.CreatedOn,(CONVERT(varchar, c.CreatedOn,106)) as CreatedOn_FormatDate
		 Into #AllCustomFormDetail
		 from CustomForms c
		 inner join CustomFormElements cf on c.Id = cf.CustomFormId
		 Left join CustomFormOptions cfo on cf.Id = cfo.CustomFormElementId
		 where c.BusinessOwnerLoginId = @businessOwnerLoginId  and c.IsDeleted = 0 
		and
		(c.CustomFormName  LIKE '%'+@searchFilter+'%' OR
	    cf.CustomFormElementName LIKE '%'+@searchFilter+'%' OR
		 cf.CustomFormElementType LIKE '%'+@searchFilter+'%' OR
		  cf.CustomFormElementValue Like '%' +@searchFilter+ '%' OR
		  cf.CustomFormElementPlaceholder  Like '%' +@searchFilter+ '%' OR
		  cfo.CustomFormElementOptions Like '%' +@searchFilter+ '%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllCustomFormDetail);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'CustomFormName' AND @sortOrder = 'ASC' THEN CustomFormName END,
				CASE WHEN @sorting = 'CustomFormName' AND @sortOrder = 'DESC' THEN CustomFormName END DESC,
				CASE WHEN @sorting = 'CustomFormElementName' AND @sortOrder = 'ASC' THEN CustomFormElementName END,
				CASE WHEN @sorting = 'CustomFormElementName' AND @sortOrder = 'DESC' THEN CustomFormElementName END DESC,
				CASE WHEN @sorting = 'CustomFormElementType' AND @sortOrder = 'ASC' THEN CustomFormElementType END,
				CASE WHEN @sorting = 'CustomFormElementType' AND @sortOrder = 'DESC' THEN CustomFormElementType END DESC,
				CASE WHEN @sorting = 'CustomFormElementValue' AND @sortOrder = 'ASC' THEN CustomFormElementValue END,
				CASE WHEN @sorting = 'CustomFormElementValue' AND @sortOrder = 'DESC' THEN CustomFormElementValue END DESC,
				CASE WHEN @sorting = 'CustomFormElementPlaceholder' AND @sortOrder = 'ASC' THEN CustomFormElementPlaceholder END,
				CASE WHEN @sorting = 'CustomFormElementPlaceholder' AND @sortOrder = 'DESC' THEN CustomFormElementPlaceholder END DESC,
				CASE WHEN @sorting = 'CustomFormElementOptions' AND @sortOrder = 'ASC' THEN CustomFormElementOptions END,
				CASE WHEN @sorting = 'CustomFormElementOptions' AND @sortOrder = 'DESC' THEN CustomFormElementOptions END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllCustomFormDetail
		order by
			CASE WHEN @sorting = 'CustomFormName' AND @sortOrder = 'ASC' THEN CustomFormName END,
				CASE WHEN @sorting = 'CustomFormName' AND @sortOrder = 'DESC' THEN CustomFormName END DESC,
				CASE WHEN @sorting = 'CustomFormElementName' AND @sortOrder = 'ASC' THEN CustomFormElementName END,
				CASE WHEN @sorting = 'CustomFormElementName' AND @sortOrder = 'DESC' THEN CustomFormElementName END DESC,
				CASE WHEN @sorting = 'CustomFormElementType' AND @sortOrder = 'ASC' THEN CustomFormElementType END,
				CASE WHEN @sorting = 'CustomFormElementType' AND @sortOrder = 'DESC' THEN CustomFormElementType END DESC,
				CASE WHEN @sorting = 'CustomFormElementValue' AND @sortOrder = 'ASC' THEN CustomFormElementValue END,
				CASE WHEN @sorting = 'CustomFormElementValue' AND @sortOrder = 'DESC' THEN CustomFormElementValue END DESC,
				CASE WHEN @sorting = 'CustomFormElementPlaceholder' AND @sortOrder = 'ASC' THEN CustomFormElementPlaceholder END,
				CASE WHEN @sorting = 'CustomFormElementPlaceholder' AND @sortOrder = 'DESC' THEN CustomFormElementPlaceholder END DESC,
				CASE WHEN @sorting = 'CustomFormElementOptions' AND @sortOrder = 'ASC' THEN CustomFormElementOptions END,
				CASE WHEN @sorting = 'CustomFormElementOptions' AND @sortOrder = 'DESC' THEN CustomFormElementOptions END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllCustomFormDetail
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEnquiry_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEnquiry_Pagination]
(
	@id bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Enquiries by Business-Owner
	if(@mode=1)
	begin

		select e.Id, e.Name, e.UserLoginId, e.Notes, e.Email, e.StaffId, e.CreatedOn, (CONVERT(varchar, e.CreatedOn,106)) as CreatedOn_FormatDate, e.EnquiryStatus, s.FirstName + ' ' + s.LastName as StaffName
		INTO #AllEnquiriesByBusinessOwner
		from Enquiries e
		left join Staffs s on e.StaffId = s.Id
		where e.UserLoginId = @userLoginId
		and e.IsDeleted = 0 
		and
		(e.Name LIKE '%'+@searchFilter+'%' OR
		e.Notes LIKE '%'+@searchFilter+'%' OR
		e.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllEnquiriesByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'Notes' AND @sortOrder = 'ASC' THEN Notes END,
				CASE WHEN @sorting = 'Notes' AND @sortOrder = 'DESC' THEN Notes END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllEnquiriesByBusinessOwner
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
		CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
		CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
		CASE WHEN @sorting = 'Notes' AND @sortOrder = 'ASC' THEN Notes END,
		CASE WHEN @sorting = 'Notes' AND @sortOrder = 'DESC' THEN Notes END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllEnquiriesByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEnquiryFollowUp_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  procedure [dbo].[sp_ManageEnquiryFollowUp_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  FollowUp in business owner
	if(@mode=1)
	begin
		select  e.Id,e.Name,e.Status,e.EnquiryStatus,e.StartFromDate,(Convert (varchar, e.StartFromDate_DateTimeFormat,106 )) as StartFromDate_DateTimeFormat,bo.FirstName +''+ bo.LastName as BusinessName,e.FollowUpDate,(Convert (varchar, e.FollowUpDate_DateTimeFormat,106 )) as FollowUpDate_DateTimeFormat ,e.CreatedOn,(Convert (varchar, e.CreatedOn,106 )) as CreatedOn_FormatDate,s.FirstName +''+s.LastName as StaffName
		INTO #AllFollowUpByBusinessOwner
		from Enquiries e 
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId 
		inner join Staffs s on e.StaffId = s.Id 
		where e.StaffId = s.Id and e.IsDeleted = 0 and s.UserLoginId = @userLoginId
		and
		(bo.FirstName + ' ' + bo.LastName LIKE '%'+@searchFilter+'%' OR
	    e.Name LIKE '%'+@searchFilter+'%' OR
		 e.Status LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.StartFromDate,106)) LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.FollowUpDate,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllFollowUpByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'StartFromDate' AND @sortOrder = 'ASC' THEN StartFromDate END,
				CASE WHEN @sorting = 'StartFromDate' AND @sortOrder = 'DESC' THEN StartFromDate END DESC,
				CASE WHEN @sorting = 'FollowUpDate' AND @sortOrder = 'ASC' THEN FollowUpDate END,
				CASE WHEN @sorting = 'FollowUpDate' AND @sortOrder = 'DESC' THEN FollowUpDate END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllFollowUpByBusinessOwner
		order by
		   				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'StartFromDate' AND @sortOrder = 'ASC' THEN StartFromDate END,
				CASE WHEN @sorting = 'StartFromDate' AND @sortOrder = 'DESC' THEN StartFromDate END DESC,
				CASE WHEN @sorting = 'FollowUpDate' AND @sortOrder = 'ASC' THEN FollowUpDate END,
				CASE WHEN @sorting = 'FollowUpDate' AND @sortOrder = 'DESC' THEN FollowUpDate END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllFollowUpByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEnquries]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEnquries]
(
	@id bigint,
	@userLoginId nvarchar(max),
	@mode int
)
as 
begin
	-- Get All Enquiries by Business/Staff
	if(@mode=1)
	begin
		select en.*,(CONVERT(varchar, en.CreatedOn,106)) as CreatedOn_FormatDate 
		from Enquiries en where UserLoginId = @userLoginId and en.IsDeleted = 0 order by CreatedOn desc
	end
	--Get Enquiry Detail by Id
	else if(@mode=2)
	begin
		select en.*, c.Name as ClassName, bp.Name as BusinessPlanName, s.FirstName + ' ' + s.LastName as StaffName
		from Enquiries en 
		left join Staffs s on en.StaffId = s.Id
		Left join BusinessPlans bp on en.BusinessPlanId = bp.Id 
		left join Classes c on en.ClassId = c.Id 
		where en.Id=@id and en.UserLoginId = @userLoginId
	end
	-- Get Enquiry Detail By Id
	else if(@mode=3)
	begin
	     select  e.Id,e.Name,e.PhoneNumber,e.AlternatePhoneNumber,e.Notes,e.Email,e.Gender,e.Address,e.Activity,e.StartFromDate,(Convert (varchar, e.StartFromDate_DateTimeFormat,106 )) as StartFromDate_DateTimeFormat,bo.FirstName +''+ bo.LastName as BusinessName,e.FollowUpDate,(Convert (varchar, e.FollowUpDate_DateTimeFormat,106 )) as FollowUpDate_DateTimeFormat 
		 from Enquiries e 
		 inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId where e.Id =@id
	end
	-- Update Enquiry-Status
	else if(@mode=4)
	begin
	    Update Enquiries  set EnquiryStatus = 2 Where Id = @id

       select 1 as ret, 'Enquiry status has been  closed successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'EnquiryStatusClosed_SuccessMessage' as resourceKey
	end
	-- Get All Equiry Follow-up comments by Staff-Login-Id
	else if(@mode=5)
	begin 
	   select  ef.Id,ef.Comments,ef.CreatedOn, (CONVERT(varchar, ef.CreatedOn,106)) as CreatedOn_FormatDate 
	   from EnquiryFollowsUps ef where ef.FollowedbyLoginId = @userLoginId
	end
	-- Get All Enquiry Follow-Up Comments By Business-Login-Id
	else if(@mode=6)
	begin 
		select ef.Id, ef.Comments ,ef.CreatedOn,(CONVERT(varchar, ef.CreatedOn,106)) as CreatedOn_FormatDate 
		from EnquiryFollowsUps ef 
		inner join Enquiries e on ef.EnquiryId = e.Id
		where e.UserLoginId = @userLoginId and ef.EnquiryId = @id
	end
	-- Get All Enquiries assigned to Staff
	else if(@mode =7)
	begin
      select * 
	  from Enquiries e
	  where 
	  e.IsDeleted = 0
	  and StaffId = (select Id from Staffs where UserLoginId = @id) 
	  order by CreatedOn desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEvent]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEvent]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	declare @eventUserLoginId bigint = 0;
	declare @currentDateTime datetime = DateAdd(MINUTE,330, GETUTCDATE())

	--Get Event by Id
	if(@mode = 1)
	begin
		select e.Id,e.Title,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.AdditionalInformation,e.AboutEvent,e.TicketInformation,e.Walkings,e.Address,e.Country,e.State,e.City,e.PinCode,e.LandMark, e.EventCategoryId from Events e where e.Id = @id
	end
	--Get All EventList
	else if(@mode=2)
	begin
		select e.Id,e.Title,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.AdditionalInformation,e.AboutEvent,e.TicketInformation,e.Walkings,e.TotalJoined from Events e where e.IsDeleted =0
		order by e.Id desc
	end
	--Get Event Details For Upcoming Three Event 
	else if(@mode=3)
	begin
		set @eventUserLoginId = (select e.UserLoginId from Events e where e.Id = @id)
		select TOP 3 e.Id,e.Title,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.AdditionalInformation,e.AboutEvent,e.TicketInformation,e.Walkings from Events e where e.IsDeleted =0 and e.UserLoginId = @eventUserLoginId and e.Id NOT IN (@id) ORDER BY StartDate ASC;
	end
	--Get Creator Name For Event
	else if(@mode = 4)
	begin
		select e.id, bo.FirstName +' '+ bo.LastName as EventCreatorName,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as CreatedImage from Events e inner join UserLogins ul on e.UserLoginId = ul.Id inner join BusinessOwners bo on ul.Id = bo.UserLoginId where e.Id =  @id
	end
	--Get Event-Table-Record-Data By Event Id
	else if(@mode=5)
	begin
		select * from Events where Id = @id
	end
	-- Update and increase Total Joined of Event by Event-Id
	else if(@mode=6)
	begin
		update Events set TotalJoined = TotalJoined+1 where Id = @id
		select 1 as ret, 'Updated joined count by 1' as responseMessage
	end
	-- To Get Event Detail In Sports Business Owner by BusinessSubCategoryId
	else if(@mode=7)
	begin
		select e.Id,e.Title,CONCAT(DATENAME(month, e.StartDate), ' ',  DATENAME(day, e.StartDate), ', ', DATENAME(year, e.StartDate)) AS StartDate, DATENAME(MONTH,e.StartDate) AS StartMonth, DATENAME(dw, e.StartDate) AS Weeks, YEAR(e.StartDate) AS StartYear,DATENAME(Day,e.StartDate) AS StartDay,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.Address,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.AdditionalInformation,e.AboutEvent,e.TicketInformation,e.Walkings,e.Address,e.Country,e.State,e.City,e.PinCode,e.LandMark from Events e
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId
		where bo.BusinessSubCategoryId = @id
	end
	--Get All Event List by Business
	else if(@mode=8)
	begin
		
		select e.Id,e.Title,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath,e.AdditionalInformation,e.AboutEvent,e.TicketInformation,e.Walkings,e.TotalJoined 
		from Events e 
		where e.IsDeleted = 0 
		and e.UserLoginId = @userLoginId
		and @currentDateTime between e.StartDateTime and e.EndDateTime
		order by e.Id desc
	end
	-- Get Events list for Home Page (ShowOnHomePage- Active status)
	else if(@mode=9)
	begin
		select e.Id,e.Title,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF,e.IsPaid,e.EventLocationURL,e.ShortDescription,e.Price,e.FeaturedImage,dbo.GetEventImageWithPath(e.FeaturedImage) as EventImageWithPath 
		from Events e 
		where e.IsDeleted = 0 
		and e.ShowOnHomePage = 1
		--and @currentDateTime between e.StartDateTime and e.EndDateTime
		order by e.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEvent_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEvent_Pagination]
(
	@id bigint,
	@CreatedByLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	--declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Events Created by Business Owner
	if(@mode=1)
	begin
		--select @businessOwnerId = Id from BusinessOwners bo where UserLoginId = @businessOwnerLoginId

		select e.Id, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.Title,e.Price,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF, e.StartDateTime, FORMAT(e.StartDateTime, 'dd MMM yyyy h:mm tt') as StartDateTime_Format,e.EndDateTime,FORMAT(e.EndDateTime, 'dd MMM yyyy h:mm tt') as EndDateTime_Format, case when GETUTCDATE() > EndDateTime then 1 else 0 end as EventArchived 
		INTO #GetAllEventByUserLoginId
		from Events e
		where e.UserLoginId = @userLoginId
		and e.IsDeleted = 0 
		and
		(e.Title LIKE '%'+@searchFilter+'%' OR
		e.StartDateTime LIKE '%'+@searchFilter+'%' OR
		e.EndDateTime LIKE '%'+@searchFilter+'%' OR
		e.Price LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.StartDateTime,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #GetAllEventByUserLoginId);

		select ROW_NUMBER() OVER (order by
				EventArchived asc,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'ASC' THEN StartDateTime_Format END,
				CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'DESC' THEN StartDateTime_Format END DESC,
				CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'ASC' THEN EndDateTime_Format END,
				CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'DESC' THEN EndDateTime_Format END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				StartDatetime desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllEventByUserLoginId
		order by
		EventArchived asc,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'ASC' THEN StartDateTime_Format END,
		CASE WHEN @sorting = 'StartDatetime' AND @sortOrder = 'DESC' THEN StartDateTime_Format END DESC,
		CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'ASC' THEN EndDateTime_Format END,
		CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'DESC' THEN EndDateTime_Format END DESC,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
		StartDatetime desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllEventByUserLoginId
	end
	-- Get All Events Created of Business Owners For Super-Admin-Panel
	if(@mode=2)
	begin
		
		select e.Id, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.Title, e.ShortDescription,e.Price,e.StartDate,e.EndDate,e.StartTime_24HF,e.EndTime_24HF, e.StartDateTime, FORMAT(e.StartDateTime, 'dd MMM yyyy h:mm tt') as StartDateTime_Format,e.EndDateTime,FORMAT(e.EndDateTime, 'dd MMM yyyy h:mm tt') as EndDateTime_Format, case when GETUTCDATE() > EndDateTime then 1 else 0 end as EventArchived, e.ShowOnHomePage,
		bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName, bo.LastName, bo.BusinessName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.ProfileImage as BusinessProfileImage, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as BusinessProfileImageWithPath
		INTO #GetAllEventBySuperAdminPanel
		from Events e
		inner join BusinessOwners bo on e.UserLoginId = bo.UserLoginId
		where e.IsDeleted = 0 
		and
		(e.Title LIKE '%'+@searchFilter+'%' OR
		bo.BusinessName LIKE '%' + @searchFilter + '%' OR
		e.StartDateTime LIKE '%'+@searchFilter+'%' OR
		e.EndDateTime LIKE '%'+@searchFilter+'%' OR
		e.Price LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.StartDateTime,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #GetAllEventBySuperAdminPanel);

		select ROW_NUMBER() OVER (order by
				EventArchived asc,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'ASC' THEN StartDateTime_Format END,
				CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'DESC' THEN StartDateTime_Format END DESC,
				CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'ASC' THEN EndDateTime_Format END,
				CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'DESC' THEN EndDateTime_Format END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				StartDatetime desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllEventBySuperAdminPanel
		order by
		EventArchived asc,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
		CASE WHEN @sorting = 'StartDateTime_Format' AND @sortOrder = 'ASC' THEN StartDateTime_Format END,
		CASE WHEN @sorting = 'StartDatetime' AND @sortOrder = 'DESC' THEN StartDateTime_Format END DESC,
		CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'ASC' THEN EndDateTime_Format END,
		CASE WHEN @sorting = 'EndDateTime_Format' AND @sortOrder = 'DESC' THEN EndDateTime_Format END DESC,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
		CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
		StartDatetime desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllEventBySuperAdminPanel
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEventBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEventBooking]
(
	@id bigint,
	@userLoginId bigint, 
	@eventId bigint,
	@mode int
)
as
begin
	-- Get Event Booking Detail with Order by User [having order status Paid]
	if(@mode=1)
	begin
		select * from EventBookings eb 
		inner join Orders o on eb.OrderId = o.Id
		where eb.UserLoginId = @userLoginId and eb.EventId = @eventId and o.Status = 1 order by eb.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEventCategory]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[sp_ManageEventCategory]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get All Event-Category
	if(@mode=1)
	begin
		select *  from EventCategories  where IsDeleted = 0
	end
	-- Get All Class-Category-Types by Business-Category-Id
	else if(@mode=2)
	begin
		select * from EventCategories  where IsDeleted = 0 and Id = @id
	end	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEventDetails]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEventDetails]
(
@id bigint,
@userLoginId bigint,
@eventId bigint,
@mode int
)
as 
begin
---Get all EventDetails List By Event Id
if(@mode=1)
begin
select ed.Id,ed.Name,ed.Image,dbo.GetEventDetailsImageWithPath(ed.Image) as EventDetailsImageWithPath ,ed.Link,ed.Designation,ed.DetailsType from EventDetails ed where ed.EventId =@eventId
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageEventSponsor]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageEventSponsor]
(
@id bigint,
@eventId bigint,
@userLoginId bigint,
@mode int
)
as
begin 
--Get All Events Sponsor List 
if(@mode = 1)
begin
select es.Id,es.EventId, es.SponsorTitle,es.SponsorLink,es.SponsorIcon,dbo.GetEventSponsorImageWithPath(es.SponsorIcon) as EventSponsorWithPath from EventSponsors es inner join Events e on es.EventId = e.Id  where es.EventId = @eventId and e.IsDeleted =0
end
--Get Single record EventSponsor By Id
else if(@mode = 2)
begin
select es.Id, es.SponsorTitle,es.SponsorLink,es.SponsorIcon,dbo.GetEventSponsorImageWithPath(es.SponsorIcon) as EventSponsorWithPath from EventSponsors es inner join Events e on es.EventId = e.Id  where es.EventId = @eventId and e.IsDeleted =0 and es.Id = @id
end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageExamForm]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageExamForm]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as 
begin
	 ---Get all exam form data by businessid dispay at Business/Exam  
	 if(@mode = 1)  
	 begin  
		select Id, Title, dbo.GetExamLogoImageWithPath(ExamFormLogo) as ExamFormLogoWithPath, StartDate, EndDate, BusinessMasterId, Status from ExamForms where BusinessOwnerLoginId = @userLoginId and IsDeleted = 0  
	 end  
	 ---Get all exam form data by examformid dispay at Business/EditExam  
	 else if(@mode = 2)  
	 begin  
		select Id, Title, EstablishedYear,ExamFormLogo, dbo.GetExamLogoImageWithPath(ExamFormLogo) as ExamFormLogoWithPath, StartDate, StartDate_DateTimeFormat, EndDate, EndDate_DateTimeFormat, SecretaryNumber, RegistrarOfficeNumber, Email, WebsiteLink, ImportantInstruction, BusinessMasterId, NameWithAddress, Status,CenterNo,BusinessOwnerLoginId as BusinessId from ExamForms where Id = @id and IsDeleted = 0  
	 end  
	 -- Get All exam form list which is active and display at vistitor page Home/Index  
	 else if(@mode = 3)  
	 begin  
		select Id, Title, dbo.GetExamLogoImageWithPath(ExamFormLogo) as ExamFormLogoWithPath, StartDate_DateTimeFormat, EndDate_DateTimeFormat,CenterNo from ExamForms where Status !=0 and IsDeleted = 0   
		order by Id desc
	 end  
end 
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageExamFormSubmission]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ManageExamFormSubmission]
    @id bigint = NULL,
    @userMasterId varchar(max) = NULL,
    @examFormId bigint = NULL,
    @businessId bigint = NULL,
    @businessMasterId bigint = NULL,
    @mode bigint
AS
BEGIN
    SET NOCOUNT ON;
	-- Retrieve submitted Exam Form data based on Id from the ExamFormSubmit Table
	if(@mode=1)
	begin
		SELECT  *,FORMAT(CreatedOn, 'dd-MM-yyyy') AS CreatedFormatDate, FORMAT(DOB, 'dd-MM-yyyy') AS DOB_FormatDate,dbo.GetSubmitExamFromCandidateProfileImageWithPath(CandidateProfileImage) as CandidateProfileImageWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(CandidateSignature) as CandidateSignatureWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(CandidateGuradianSignature) as GuradianSignatureWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(SuperintendentSignature) as SuperintendentSignatureWithPath FROM ExamFormSubmissions WHERE id = @id;
	end
	--Retrieve submitted Exam Form data based on userMasterId, examFormId, businessId, and businessMasterId from the ExamFormSubmit Table. These parameters are optional; if no values are provided, retrieve all data from the table. If you provide the ExamFormId, there is no need to pass the BusinessId and BusinessMasterId. First, check the ExamFormId; if it is zero, then filter by BusinessId; otherwise, filter by ExamFormId. If BusinessId is also zero, then filter by BusinessMasterId
	else if (@mode=2)
	begin

		DECLARE @sql NVARCHAR(MAX);
		SET @sql = 'SELECT  *,FORMAT(CreatedOn, ''dd-MM-yyyy'') AS CreatedFormatDate, FORMAT(DOB, ''dd-MM-yyyy'') AS DOB_FormatDate, dbo.GetSubmitExamFromCandidateProfileImageWithPath(CandidateProfileImage) as CandidateProfileImageWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(CandidateSignature) as CandidateSignatureWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(CandidateGuradianSignature) as GuradianSignatureWithPath, dbo.GetSubmitExamFromCandidateSignWithPath(SuperintendentSignature) as SuperintendentSignatureWithPath,CurrentRollNo FROM ExamFormSubmissions WHERE 1 = 1';

		IF @userMasterId IS NOT NULL and @userMasterId !=''
			SET @sql = @sql + ' AND UserMasterId = @userMasterId';

		IF @examFormId IS NOT NULL AND @examFormId > 0
			SET @sql = @sql + ' AND ExamFormId = @examFormId';
		ELSE IF @businessId IS NOT NULL AND @businessId > 0
			SET @sql = @sql + ' AND ExamFormId = (select id from Exams where BusinessOwnerLoginId = @businessId)';
		ELSE IF @businessMasterId IS NOT NULL AND @businessMasterId<> 0
			SET @sql = @sql + ' AND ExamFormId = (select id from Exams where BusinessMasterId = @businessMasterId)';
        
		EXEC sp_executesql @sql, 
						   N'@userMasterId varchar(max), @examFormId bigint, @businessId bigint, @businessMasterId bigint',
						   @userMasterId, @examFormId, @businessId, @businessMasterId;
	end

END
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageExpense]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageExpense]
(
	@id bigint,
	@userLoginId bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get Expense Detail by Id for Staff
	if(@mode=1)
	begin 
	    select  e.Id,e.Amount,e.Description,e.ExpenseDate ExpenseDate from Expenses e where e.Id = @id
	end
	-- Get Expense Detail By Id for Business
	else if(@mode=2)
	begin
	    select e.Id,s.FirstName +''+ s.LastName as StaffName,e.Amount,e.Description,e.ExpenseDate_DateTimeFormat,(Convert(varchar,e.ExpenseDate_DateTimeFormat,106) )as Expense_DateTimeFormat, e.CreatedOn
		from Expenses e 
		inner join Staffs s on e.UserLoginId = s.UserLoginId
		where e.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageExpense_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageExpense_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Expense records
	if(@mode=1)
	begin
		select  e.Id,s.FirstName +''+s.LastName as StaffName,e.Remarks,e.Amount,e.Description,e.Status,e.ExpenseDate_DateTimeFormat, (CONVERT(varchar, e.ExpenseDate_DateTimeFormat,106)) as Expense_DateTimeFormat ,e.CreatedOn
		INTO #AllStaffByBusinessAdmin
		from Expenses e
		inner join Staffs s on e.UserLoginId = s.UserLoginId
		inner join UserLogins ul on e.UserLoginId = ul.Id
		where e.UserLoginId = ul.Id 
		--and  e.CreatedByLoginId = @userLoginId 
		and e.IsDeleted = 0		
		and
		(s.FirstName + '' +s.LastName LIKE '%'+@searchFilter+'%' OR
	     e.Amount LIKE '%'+@searchFilter+'%' OR
		  e.Description LIKE '%'+@searchFilter+'%' OR
		  e.ExpenseDate_DateTimeFormat LIKE '%' +@searchFilter + '%' OR
		  
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStaffByBusinessAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'ASC' THEN Expense_DateTimeFormat END,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'DESC' THEN Expense_DateTimeFormat END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStaffByBusinessAdmin
		order by
		  CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'ASC' THEN StaffName END,
				CASE WHEN @sorting = 'StaffName' AND @sortOrder = 'DESC' THEN StaffName END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'ASC' THEN ExpenseDate_DateTimeFormat END,
				CASE WHEN @sorting = 'Expense_DateTimeFormat' AND @sortOrder = 'DESC' THEN ExpenseDate_DateTimeFormat END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStaffByBusinessAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageFamilyMember]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageFamilyMember]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get All Family Members by User-Login-Id
	if(@mode=1)
	begin
		select *, dbo.GetFamilyMemberProfileImageWithPath(fm.ProfileImage) as ProfileImageWithPath from FamilyMembers fm where fm.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageFeatures]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_ManageFeatures]
(
	@id bigint,
	@panelTypeId int,
	@mode int
)
as
begin
	-- select Features by Panel-Type-Id
	if(@mode=1)
	begin
		select f.Id, f.KeyName, f.TextValue, f.IsLimited, f.IsActive, f.PanelTypeId  from dbo.Features f where PanelTypeId = @panelTypeId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageFieldTypeCatalog]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageFieldTypeCatalog]
(
	@id bigint,
	@panelTypeId bigint,
	@keyName nvarchar(max),
	@mode int
)
as
begin
	-- Get All Active Field-Types list by key name
	if(@mode=1)
	begin
		select * from FieldTypeCatalogs ftc where ftc.ParentId = (select Id from FieldTypeCatalogs where KeyName = @keyName) and ftc.IsActive = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageFollowingUser]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageFollowingUser]
(
	@id bigint,
	@followerUserLoginId bigint,
	@followingUserLoginId bigint,
	@mode int
)
as 
begin
	if(@mode=1)
	begin
      	if not exists(select ul.Id from UserLogins ul where ul.Id = @followingUserLoginId and ul.IsDeleted = 0)
		begin
			select -1 as ret, 'Sorry, user not found!' as responseMessage,'VisitorPanel' as resourceFileName, 'UserNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select uf.Id from FollowUsers uf where uf.FollowerUserLoginId = @followerUserLoginId and  uf.FollowingUserLoginId = @followingUserLoginId)
		begin
			Delete from FollowUsers Where FollowerUserLoginId=  @followerUserLoginId and FollowingUserLoginId = @followingUserLoginId
			select 2 as ret, 'Removed from Follower!' as responseMessage,'VisitorPanel' as resourceFileName, 'RemovedFollower_SuccessMessage' as resourceKey, @followingUserLoginId as Id
		end
		else
		begin
			insert into FollowUsers(FollowerUserLoginId,FollowingUserLoginId)values(@followerUserLoginId,@followingUserLoginId)
			select 1 as ret, ' Added to Follower!' as responseMessage,'VisitorPanel' as resourceFileName, 'AddedFollower_SuccessMessage' as resourceKey, @followingUserLoginId as Id
		end
	end
	-- Check where User Follows 
	else if(@mode=2)
	begin
		if exists(select * from FollowUsers where FollowerUserLoginId = @followerUserLoginId and FollowingUserLoginId = @followingUserLoginId)
		begin 
			select 1
		end
		else 
		begin
			select 0
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageGroup]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageGroup]
(
	@id bigint,
	@userLoginId bigint,
	@mode int,
	@searchKeywords nvarchar(max)
)
as
begin
	declare @businessOwnerId bigint = 0
	declare @businessOwnerLoginId bigint = 0

	-- Get Group by Id
	if(@mode=1)
	begin
		select g.Id, g.Name, g.Description, g.GroupType, g.GroupImage, dbo.GetGroupImageWithPath(g.GroupImage) as GroupImageWithPath 
		from Groups g 
		where g.Id = @id
	end
	-- Get Group Members(Students & Staffs) by Group-Id
	else if(@mode=2)
	begin
		--select s.Id as StudentId, s.UserLoginId as StudentUserLoginId, s.FirstName, s.LastName, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath 
		--from GroupMembers gm 
		--inner join Groups g on gm.GroupId = g.Id
		--inner join Students s on gm.UserLoginId = s.UserLoginId
		--where g.Id = @id

		select Id, UserLoginId, RoleId, RoleName, FirstName, LastName, FullName, ProfileImage, ProfileImageWithPath, MasterId, StaffCategoryName
		from 
		(
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage, 
				dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId,ul.RoleId, 'Student' as RoleName, '' as StaffCategoryName
				from GroupMembers gm
				inner join Students s on gm.UserLoginId = s.UserLoginId 
				inner join UserLogins ul on s.UserLoginId = ul.Id
				where gm.GroupId = @id and ul.IsDeleted = 0
			Union 
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage,
				dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId, ul.RoleId, case when s.MasterId like 'MB%' or s.MasterId like 'MBI%' then 'Instructor' else 'Staff' end as RoleName, sc.Name as StaffCategoryName
				from GroupMembers gm
				inner join Staffs s on gm.UserLoginId = s.UserLoginId
				inner join UserLogins ul on s.UserLoginId = ul.Id
				inner join StaffCategories sc on s.StaffCategoryId = sc.Id
				where gm.GroupId = @id and ul.IsDeleted = 0
		) t
	end
	-- Get All Group Id,Name by Business-Owner-Login-Id.
	else if(@mode=3)
	begin
		select @businessOwnerId = bo.Id from BusinessOwners bo where bo.UserLoginId = @userLoginId
		select g.Id, g.Name from Groups g where g.BusinessOwnerId = @businessOwnerId and g.IsDeleted = 0
	end
	-- Get All Group Members table-data by Group-Id
	else if(@mode=4)
	begin
		select * from GroupMembers gm where gm.GroupId = @id
	end
	-- Get List of All Members (Staff and Students) for Group [added or not added both]
	else if(@mode=5)
	begin
		set @businessOwnerId = (select bo.Id from BusinessOwners bo where bo.UserLoginId = @userLoginId)

		select Id, UserLoginId, RoleId, RoleName, FirstName, LastName, FullName, ProfileImage, ProfileImageWithPath, MasterId, StaffCategoryName
		from 
		(
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage, 
				dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId,ul.RoleId, 'Student' as RoleName, '' as StaffCategoryName
				from BusinessStudents bs 
				inner join Students s on bs.StudentId = s.Id 
				inner join UserLogins ul on s.UserLoginId = ul.Id
				where bs.BusinessOwnerId = @businessOwnerId and ul.IsDeleted = 0
			Union All
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage,
				dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId, ul.RoleId, case when s.MasterId like 'MB%' or s.MasterId like 'MBI%' then 'Instructor' else 'Staff' end as RoleName, sc.Name as StaffCategoryName
				from Staffs s 
				inner join UserLogins ul on s.UserLoginId = ul.Id
				inner join StaffCategories sc on s.StaffCategoryId = sc.Id
				where s.BusinessOwnerLoginId = @userLoginId and ul.IsDeleted = 0
		) t
	end
	-- Get Searched List of All Members (Staff and Students) for Group [added or not added both]
	else if(@mode=6)
	begin
		set @businessOwnerId = (select bo.Id from BusinessOwners bo where bo.UserLoginId = @userLoginId)

		select Id, UserLoginId, RoleId, RoleName, FirstName, LastName, FullName, ProfileImage, ProfileImageWithPath, MasterId, StaffCategoryName
		from 
		(
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage, 
				dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId,ul.RoleId, 'Student' as RoleName, '' as StaffCategoryName
				from BusinessStudents bs 
				inner join Students s on bs.StudentId = s.Id 
				inner join UserLogins ul on s.UserLoginId = ul.Id
				where bs.BusinessOwnerId = @businessOwnerId and ul.IsDeleted = 0
			Union All
			select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage,
				dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, ul.MasterId, ul.RoleId, case when s.MasterId like 'MB%' or s.MasterId like 'MBI%' then 'Instructor' else 'Staff' end as RoleName, sc.Name as StaffCategoryName
				from Staffs s 
				inner join UserLogins ul on s.UserLoginId = ul.Id
				inner join StaffCategories sc on s.StaffCategoryId = sc.Id
				where s.BusinessOwnerLoginId = @userLoginId and ul.IsDeleted = 0
		) t
		where t.FullName like '%'+ @searchKeywords +'%'
		or t.MasterId like '%'+ @searchKeywords + '%'
	end	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageGroup_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageGroup_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Groups Created by Business Owner
	if(@mode=1)
	begin
		select @businessOwnerId = Id from BusinessOwners bo where UserLoginId = @businessOwnerLoginId

		select g.Id, g.Name,g.GroupImage,dbo.GetGroupImageWithPath(g.GroupImage) as GroupImageWithPath, g.Description, g.GroupType, g.CreatedOn, (CONVERT(varchar, g.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #GetAllGroupsByBusinessOwner
		from Groups g
		where g.BusinessOwnerId = @businessOwnerId
		and g.IsDeleted = 0 
		and
		(g.Name LIKE '%'+@searchFilter+'%' OR
		g.Description LIKE '%'+@searchFilter+'%' OR
		g.GroupType LIKE '%'+@searchFilter+'%' OR
		g.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,g.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #GetAllGroupsByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllGroupsByBusinessOwner
		order by
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
		CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllGroupsByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageHomePageBannerItem]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageHomePageBannerItem]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get Record By Id
	if(@mode=1)
	begin
		select *, dbo.GetHomePageImageWithPath(Image) as ImageWithPath from HomePageBannerItems where Id = @id 
	end
	-- Get All Items Record
	else if(@mode=2)
	begin
		select *, dbo.GetHomePageImageWithPath(Image) as ImageWithPath from HomePageBannerItems
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageHomePageClassCategorySection]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageHomePageClassCategorySection]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get Record
	if(@mode=1)
	begin
		select top 1 * from HomePageClassCategorySections
	end
	-- Get All Active Sub Class-Category-Types by Parent Class-Category-Type-Id - for home page class-category-section
	else if(@mode=2)
	begin
		select cct.*, dbo.GetClassCategoryTypeImageWithPath(cct.Image) as ImageWithPath  
		from 
		HomePageClassCategorySections hpccs
		inner join ClassCategoryTypes cct on hpccs.ClassCategoryTypeId = cct.ParentClassCategoryTypeId
		where cct.IsDeleted = 0 and cct.IsActive = 1 and hpccs.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageHomePageFeaturedCardSection]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageHomePageFeaturedCardSection]
(
	@id bigint,
	@type nvarchar(max),
	@mode int
)
as
begin
	-- Get Record By Id
	if(@mode=1)
	begin
		select *, dbo.GetHomePageImageWithPath(Thumbnail) as ThumbnailImageWithPath from HomePageFeaturedCardSections where Id = @id
	end
	-- Get Record By Type
	else if(@mode=2)
	begin
		select *, dbo.GetHomePageImageWithPath(Thumbnail) as ThumbnailImageWithPath from HomePageFeaturedCardSections where [Type] = @type
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageHomePageFeaturedVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageHomePageFeaturedVideos]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get Record By Id
	if(@mode=1)
	begin
		select *, dbo.GetHomePageVideoWithPath(Video) as VideoWithPath 
		from HomePageFeaturedVideos where Id = @id and IsDeleted = 0
	end
	-- Get All Items Records
	else if(@mode=2)
	begin
		select *, dbo.GetHomePageVideoWithPath(Video) as VideoWithPath 
		from HomePageFeaturedVideos where IsDeleted = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageHomePageMultipleItem]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageHomePageMultipleItem]
(
	@id bigint,
	@type nvarchar(max),
	@mode int
)
as
begin
	-- Get Record By Id
	if(@mode=1)
	begin
		select *, dbo.GetHomePageImageWithPath(Thumbnail) as ThumbnailImageWithPath from HomePageMultipleItems where Id = @id and IsDeleted = 0
	end
	-- Get All Items Record By Type
	else if(@mode=2)
	begin
		select *, dbo.GetHomePageImageWithPath(Thumbnail) as ThumbnailImageWithPath from HomePageMultipleItems where [Type] = @type and IsDeleted = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageInstructorAboutMasterProfileDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageInstructorAboutMasterProfileDetail]
(
	@id bigint,
	@businessOwnerLoginId bigint, 
	@userLoginId bigint,
	@mode int 
)
as
begin
   ----- To Get All About  Detail By BusinessOwnerLoginId
   if (@mode= 1)
   begin
       select ba.Id,ba.UserLoginId,ba.Title,ba.SubTitle,ba.Description,ba.ButtonText,ba.ButtonLink,ba.Image,dbo.GetMasterProfileInstructorAboutWithPath(ba.Image) as ImageWithPath from BusinessContentMasterProfileInstructorAboutSection_PPCMeta ba where ba.UserLoginId = @userLoginId
   end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageItemFeatures]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_ManageItemFeatures]
(
	@id bigint,
	@itemId bigint,
	@itemType nvarchar(max),
	@featureId bigint,
	@mode int
)
as
begin
	-- Get All Item-Linked Features by Item-Id and Item-Type
	if(@mode=1)
	begin
		select * 
		from ItemFeatures ifeatures 
		where ifeatures.ItemId = @itemId 
		and ifeatures.ItemType = @itemType
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageLicense]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageLicense]
(
	@id bigint,
	@certificateId bigint,
	@achievingOrder int,
	@mode int
)
as
begin
	-- Get License Detail by Id
	if(@mode=1)
	begin
		select l.Id, l.CertificateId, l.Title, l.Description, l.CertificateImage, l.LicenseLogo, l.SignatureImage, dbo.GetLicenseCertificateImageWithPath(l.CertificateImage) as LicenseCertificateImageWithPath, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoImageWithPath, dbo.GetLicenseSignatureImageWithPath(l.SignatureImage) as SignatureImageWithPath, l.TimePeriod, l.AchievingOrder, l.Status, l.IsPaid, l.CommissionType, l.CommissionValue, l.LicensePermissions, l.Signature2Image, dbo.GetLicenseSignatureImageWithPath(l.Signature2Image) as Signature2ImageWithPath, l.Signature3Image, dbo.GetLicenseSignatureImageWithPath(l.Signature3Image) as Signature3ImageWithPath, l.Price, l.MinSellingPrice, l.GSTPercent, l.GSTDescription, l.LicenseCertificateHTMLContent,l.IsLicenseToTeach,l.LicenseToTeach_Type,l.LicenseToTeach_DisplayName
		from Licenses l where Id = @id
	end
	-- Get all active Licenses for business-owner by Certificate-Id
	else if(@mode=2)
	begin
		select l.Id, l.Title, l.Description, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoImageWithPath, l.Status, l.IsPaid, l.Price, l.CommissionType, l.CommissionValue, l.AchievingOrder, l.TimePeriod, l.GSTPercent, l.GSTDescription, l.MinSellingPrice, ftc.TextValue as CommissionTypeName
		from Licenses l
		inner join Certificates c on l.CertificateId = c.Id
		left join FieldTypeCatalogs ftc on ftc.KeyName = l.CommissionType
		where c.Id = @certificateId and l.Status = 1
	end
	-- Get License Record Data by Id
	else if(@mode=3)
	begin
		select *, dbo.GetLicenseSignatureImageWithPath(l.SignatureImage) as SignatureImageWithPath, dbo.GetLicenseSignatureImageWithPath(l.Signature2Image) as Signature2ImageWithPath, dbo.GetLicenseSignatureImageWithPath(l.Signature3Image) as Signature3ImageWithPath
		from Licenses l where l.Id = @id
	end
	-- Get Available Achieving Order for License in same certification profile
	else if(@mode=4)
	begin
		select Max(l.AchievingOrder) + 1 as AvailableAchievingOrder from Licenses l where l.CertificateId = @certificateId and l.IsDeleted = 0
	end
	-- Get All Licenses
	else if(@mode=5)
	begin
		select *, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath from Licenses l where l.IsDeleted = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageLicense_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageLicense_Pagination]
(
    @id bigint,
	@certificateId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Licenses for SuperAdmin Panel
	if(@mode=1)
	begin
	      	
		Select l.Id, l.Title, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.IsPaid, l.CommissionType, l.CommissionValue, l.Description, l.AchievingOrder, l.Status, l.CreatedOn, (CONVERT(varchar, l.CreatedOn,106)) as CreatedOn_FormatDate, c.Name as CertificateName, ftc.TextValue as CommissionTypeName
		INTO #GetAllLicenseForSuperAdmin
		from Licenses l
		inner join Certificates c on l.CertificateId = c.Id
		inner join FieldTypeCatalogs ftc on l.CommissionType = ftc.KeyName
		where l.IsDeleted = 0 and l.CertificateId = @certificateId
		and
		( 
		  l.Title LIKE '%'+@searchFilter+'%' OR
		  l.CommissionType LIKE '%'+@searchFilter+'%' OR
		  l.Description LIKE '%'+@searchFilter+'%' OR
		  l.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,l.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = ''		  
		  )
		  
		set @totalRecords = (select Count(*) from #GetAllLicenseForSuperAdmin);

		select ROW_NUMBER() OVER (order by
		        CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'AchievingOrder' AND @sortOrder = 'ASC' THEN AchievingOrder END,
				CASE WHEN @sorting = 'AchievingOrder' AND @sortOrder = 'DESC' THEN AchievingOrder END DESC,
				CASE WHEN @sorting = 'IsPaid' AND @sortOrder = 'ASC' THEN IsPaid END,
				CASE WHEN @sorting = 'IsPaid' AND @sortOrder = 'DESC' THEN IsPaid END DESC,
				CASE WHEN @sorting = 'CommissionType' AND @sortOrder = 'ASC' THEN CommissionType END,
				CASE WHEN @sorting = 'CommissionType' AND @sortOrder = 'DESC' THEN CommissionType END DESC,
				CASE WHEN @sorting = 'CommissionValue' AND @sortOrder = 'ASC' THEN CommissionValue END,
				CASE WHEN @sorting = 'CommissionValue' AND @sortOrder = 'DESC' THEN CommissionValue END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllLicenseForSuperAdmin
		order by
		    	CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'ASC' THEN CertificateName END,
				CASE WHEN @sorting = 'CertificateName' AND @sortOrder = 'DESC' THEN CertificateName END DESC,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'AchievingOrder' AND @sortOrder = 'ASC' THEN AchievingOrder END,
				CASE WHEN @sorting = 'AchievingOrder' AND @sortOrder = 'DESC' THEN AchievingOrder END DESC,
				CASE WHEN @sorting = 'IsPaid' AND @sortOrder = 'ASC' THEN IsPaid END,
				CASE WHEN @sorting = 'IsPaid' AND @sortOrder = 'DESC' THEN IsPaid END DESC,
				CASE WHEN @sorting = 'CommissionType' AND @sortOrder = 'ASC' THEN CommissionType END,
				CASE WHEN @sorting = 'CommissionType' AND @sortOrder = 'DESC' THEN CommissionType END DESC,
				CASE WHEN @sorting = 'CommissionValue' AND @sortOrder = 'ASC' THEN CommissionValue END,
				CASE WHEN @sorting = 'CommissionValue' AND @sortOrder = 'DESC' THEN CommissionValue END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,	
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllLicenseForSuperAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageLicenseBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageLicenseBooking]
(
	@id bigint,
	@businessOwnerLoginId bigint, 
	@licenseId bigint,
	@certificateId bigint,
	@mode int,
	@trainingId bigint
)
as
begin
	-- Get Business-Booked License Detail by Booking-Id For Business Panel 
	if(@mode=1)
	begin
	    SELECT lb.*, l.Title as LicenseTitle, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.Description as LicenseDescription, l.Price as LicensePrice, l.AchievingOrder as LicenseAchievingOrder, l.TimePeriod as LicenseTimePeriod, l.IsPaid as LicenseIsPaid, ftc.TextValue as CommissionTypeName, lb.LicenseCommissionValue, lb.LicenseGSTPercent, lb.LicenseGSTDescription, lb.LicenseMinSellingPrice,
		c.Name as CertificateName,  
		lb.CreatedOn, (CONVERT(varchar, l.CreatedOn,106)) as CreatedOn_FormatDate, lb.Id, lb.Quantity, lb.Status, dbo.GetLicenseBookingStatusText(lb.Status) as StatusText, 
		o.TotalAmount as OrderTotalAmount, o.PaymentMethod as OrderPaymentMethod,
		pr.Approved as PaymentIsApproved
	    FROM LicenseBookings lb
	    INNER JOIN Licenses l ON lb.LicenseId = l.Id
		inner join Orders o on lb.OrderId = o.Id
		inner join PaymentResponses pr on o.Id = pr.OrderId
		inner join Certificates c on l.CertificateId = c.Id
		inner join FieldTypeCatalogs ftc on lb.LicenseCommissionType = ftc.KeyName
		where lb.Id = @id
	end
	-- Get Business-Booked License Request Detail For Super-Admin Panel 
	if(@mode=2)
	begin
	    SELECT lb.*, l.Title as LicenseTitle, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath, l.Description as LicenseDescription, l.Price as LicensePrice, l.AchievingOrder as LicenseAchievingOrder, l.TimePeriod as LicenseTimePeriod, l.IsPaid as LicenseIsPaid, ftc.TextValue as CommissionTypeName, lb.LicenseCommissionValue, lb.LicenseGSTPercent, lb.LicenseGSTDescription, lb.LicenseMinSellingPrice,
		c.Name as CertificateName,  
		lb.CreatedOn, (CONVERT(varchar, l.CreatedOn,106)) as CreatedOn_FormatDate, lb.Id, lb.Quantity, lb.Status, dbo.GetLicenseBookingStatusText(lb.Status) as StatusText, 
		o.TotalAmount as OrderTotalAmount, o.PaymentMethod as OrderPaymentMethod,
		pr.Id as PaymentResponseId, pr.Approved as PaymentIsApproved,
		bo.BusinessName, bo.FirstName + ' ' + bo.LastName as BusinessOwnerFullName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
	    FROM LicenseBookings lb
	    INNER JOIN Licenses l ON lb.LicenseId = l.Id
		inner join Orders o on lb.OrderId = o.Id
		inner join PaymentResponses pr on o.Id = pr.OrderId
		inner join Certificates c on l.CertificateId = c.Id
		inner join FieldTypeCatalogs ftc on lb.LicenseCommissionType = ftc.KeyName
		inner join BusinessOwners bo on lb.BusinessOwnerLoginId = bo.Id
		where lb.Id = @id
	end
	-- Get Licenses earned by Instructor-Business 
	else if (@mode=3)
	begin
	 --   SELECT bl.Id, bl.LicenseId, l.Title, l.Description, l.IsLicenseToTeach, IsNull(l.LicenseToTeach_Type,'') as LicenseToTeach_Type, IsNull(l.LicenseToTeach_DisplayName,'') as LicenseToTeach_DisplayName,c.Name
		--FROM BusinessLicenses bl
		--INNER JOIN Licenses l ON bl.LicenseId = l.Id
		--INNER JOIN Certificates c ON l.CertificateId = c.Id
		--WHERE  l.IsDeleted = 0 AND bl.BusinessOwnerLoginId = @businessOwnerLoginId;
		SELECT bl.Id, bl.LicenseId, l.Title, l.Description, l.IsLicenseToTeach, IsNull(l.LicenseToTeach_Type,'') as LicenseToTeach_Type, IsNull(l.LicenseToTeach_DisplayName,'') as LicenseToTeach_DisplayName,c.Name
		FROM LicenseBookings bl
		INNER JOIN Licenses l ON bl.LicenseId = l.Id
		INNER JOIN Certificates c ON l.CertificateId = c.Id
		WHERE  l.IsDeleted = 0 AND bl.BusinessOwnerLoginId = @businessOwnerLoginId;
	end
	-- Get Available Certification Profiles of Booked businessLicenses for training by Business-Login-Id
	if(@mode=4)
	begin
		select c.Id, c.Name 
		from LicenseBookings lb 
		inner join Licenses l on lb.LicenseId = l.Id
		inner join Certificates c on l.CertificateId = c.Id
		where lb.BusinessOwnerLoginId = @businessOwnerLoginId and lb.Status = 2 and lb.IsDeleted = 0
		and (SELECT Count(*) from Trainings t where t.LicenseBookingId = lb.Id and 
	t.IsDeleted = 0 and t.Id != @trainingId) < lb.Quantity 
		Group by c.Id, c.Name
	end
	-- Get Booked Licenses Avaliable for training by certificate-Id [Business-Panel]
	else if(@mode=5)
	begin
		select lb.*, l.Title as LicenseTitle
		from LicenseBookings lb 
		inner join Licenses l on lb.LicenseId = l.Id
		inner join Certificates c on l.CertificateId = c.Id
		where lb.BusinessOwnerLoginId = @businessOwnerLoginId and lb.Status = 2 and lb.IsDeleted = 0
		and (SELECT Count(*) from Trainings t where t.LicenseBookingId = lb.Id and 
	t.IsDeleted = 0 and t.Id != @trainingId) < lb.Quantity 
		and l.CertificateId = @certificateId
	end
	-- Get Booked Licenses Avaliable Quantity for training by License-Booking-Id [Business-Panel]
	else if(@mode=6)
	begin
		select Cast(lb.Quantity - dbo.GetLicenceQuantityUsedByBusiness(lb.Id) as int) as AvailableQuantity
		from LicenseBookings lb 
		where lb.BusinessOwnerLoginId = @businessOwnerLoginId 
		and lb.Status = 2 
		and lb.IsDeleted = 0
		and lb.Id = @id
	end
	-- Get List of approved License-Bookings whose quantity is not consumed 
	else if(@mode=7)
	begin
		select * from LicenseBookings lb 
		where lb.BusinessOwnerLoginId = @businessOwnerLoginId
		and lb.LicenseId = @licenseId 
		and lb.IsDeleted = 0 
		and lb.Status = 2 
		and dbo.GetLicenceQuantityUsedByBusiness(lb.Id) < lb.Quantity
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMainPlanBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_ManageMainPlanBooking]
(
	@id bigint,
	@userLoginId bigint, 
	@mainPlanId bigint,
	@mode int
)
as
begin
	-- Get All Business-Booked Main-Plan Detail For SuperAdmin Panel 
	if(@mode=1)
	begin
	    SELECT mp.Id, mpb.UserLoginId, mp.Name, mp.PlanDurationTypeKey, mp.Description, mp.Price, mp.CompareAtPrice, mp.Discount, mp.PlanImage,dbo.GetMainPlanImageWithPath(mp.PlanImage) as ProfileImageWithPath, mpb.StartDate, mpb.EndDate 
	    FROM  MainPlans mp 
	    INNER JOIN  MainPlanBookings mpb ON mp.Id = mpb.MainPlanId
		where mpb.UserLoginId = @userLoginId
		order by mp.Id desc
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMainPlans]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageMainPlans]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
AS
BEGIN
	-- Get All Main Plans List By SuperAdmin
	if(@mode=1)
	begin
		select mp.Id, mp.Name, mp.PlanDurationTypeKey, mp.Price, mp.PlanImage, dbo.GetMainPlanImageWithPath(mp.PlanImage)  as PlanImageWithPath, mp.CompareAtPrice,mp.Discount, mp.Description, mp.Status,mp.PlanPermission, mp.ShowOnHomePage
		from MainPlans mp 
		where mp.UserLoginId = @userLoginId and mp.IsDeleted = 0
	end
	-- Get Main Plan by Id
	else if(@mode=2)
	begin
		select mp.Id, mp.Name, mp.PlanDurationTypeKey, mp.Price, mp.PlanImage, dbo.GetMainPlanImageWithPath(mp.PlanImage)  as PlanImageWithPath,  mp.CompareAtPrice,mp.Discount, mp.Description, mp.Status,mp.PlanPermission
		from MainPlans mp 
		where mp.UserLoginId = @userLoginId and mp.IsDeleted = 0 and mp.Id = @id
	end
	-- Get All Active Main Plans List For Home Page
	if(@mode=3)
	begin
		select mp.Id, mp.Name, mp.PlanDurationTypeKey, mp.Price, mp.PlanImage, dbo.GetMainPlanImageWithPath(mp.PlanImage)  as PlanImageWithPath, mp.CompareAtPrice,mp.Discount, mp.Description, mp.Status,mp.PlanPermission, mp.ShowOnHomePage,
			Case when PlanDurationTypeKey = 'per_monthly' then 'Monthly' else 'Yearly' end as PlanDurationTypeKeyName
		from MainPlans mp 
		where mp.UserLoginId = @userLoginId and mp.IsDeleted = 0 and mp.Status = 1 and mp.ShowOnHomePage = 1
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMasterProExtraInformationService]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageMasterProExtraInformationService]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
	if(@mode=1)
	begin
		select bs.Id,bs.Title,bs.ShortDescription		
			from MasterProExtraInformations bs 
			Where bs.Id = @id
	end
	---To Get Business Service detail in dance page show without Authentication
	else if(@mode=2)
	begin
		select bs.Id,bs.Title,bs.ShortDescription		
			from MasterProExtraInformations bs where bs.UserLoginId = @businessOwnerLoginId 
	end
	
end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMasterProExtraInformationService_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[sp_ManageMasterProExtraInformationService_Pagination]
(
	@id bigint,
	@userLoginId bigint,
	@createdForLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Business Service Records Created by Business-Admin Users
	if(@mode=1)
	begin
		select bs.Id,bs.Title,bs.ShortDescription
			INTO #AllMasterProExtraInformationServiceByBusinessAdmin
		from MasterProExtraInformations bs 
		Where bs.UserLoginId = @userLoginId
		and
		(bs.Title LIKE '%'+@searchFilter+'%' OR
		bs.ShortDescription LIKE '%'+@searchFilter+'%' OR	
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllMasterProExtraInformationServiceByBusinessAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'ASC' THEN ShortDescription END,
				CASE WHEN @sorting = 'ShortDescription' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
				
				Id desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllMasterProExtraInformationServiceByBusinessAdmin
		order by
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN ShortDescription END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN ShortDescription END DESC,
		
		Id desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllBusinessServiceByBusinessAdmin
	end
	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMasterProPdf]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageMasterProPdf] 
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get all business-Images by business-Owner-Login-Id
	if(@mode = 1)
	begin
		select bi.Id, bi.BusinessOwnerLoginId, bi.ImageTitle,bi.Image,('/Content/Uploads/Images/MasterProPdf/' + bi.Image) as ImageWithPath,bi.ThumbnailPdf,('/Content/Uploads/Images/MasterProThumbnailPdf/' + bi.ThumbnailPdf) as ThumbnailPdfWithPath from MasterProContentPdfs bi where bi.BusinessOwnerLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMasterProResume_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ManageMasterProResume_PPCMeta]
(
	@Id BIGINT,
	@businesOwnerLoginId bigint,
	@UserLoginId BIGINT,
	@mode int
)
AS
BEGIN
	if(@mode=1)
	BEGIN
		select bs.Id, bs.Age,bs.Freelance,bs.Nationality,bs.Languages,bs.Skype,bs.UploadCV,dbo.GetUploadCVWithPath(bs.UploadCV) as UploadCVImageWithPath from MasterProResume_PPCMeta bs;
	END
	else if(@mode=2)
	BEGIN
		select  bs.Id, bs.Age,bs.Freelance,bs.Nationality,bs.Languages,bs.Skype,bs.UploadCV,dbo.GetUploadCVWithPath(bs.UploadCV) as UploadCVImageWithPath  from MasterProResume_PPCMeta bs WHERE bs.UserLoginId = @UserLoginId;
	END
END
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMenu]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageMenu]
(
	@id bigint,
	@parentMenuId bigint,
	@tag nvarchar(max),
	@mode int
)
as
begin
	-- Get All Menus list
	if(@mode=1)
	begin
		select *, dbo.GetMenuImageWithPath(m.Image) as MenuImageWithPath from Menus m
	end
	-- Get All Menus List (Non deleted)
	else if(@mode=2)
	begin
		select *, dbo.GetMenuImageWithPath(m.Image) as MenuImageWithPath from Menus m where IsDeleted = 0
	end
	-- Get Menu By Id
	else if(@mode=3)
	begin
		select *, dbo.GetMenuImageWithPath(m.Image) as MenuImageWithPath from Menus m where m.Id = @id
	end
	-- Change Status
	else if(@mode=4)
	begin
		if not exists(select * from Menus m where m.Id = @id)
		begin
			select -1 as ret, 'Menu not found!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuNotFound_ErrorMessage' as resourceKey
		end
		else 
		begin
			update Menus set IsActive = Case when(IsActive = 0) then 1 else 0 end where Id = @id
			
			select 1 as ret, 'Status updated successfully!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'MenuStatusChanged_SuccessMessage' as resourceKey
		end
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageMessage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageMessage]
(
	@id bigint,
	@toUserLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	---Get Only All Message
	if(@mode=1)
	begin
		select  m.Id, m.Messagebody , FORMAT(CreatedOn, 'HH:mm:ss') AS TimeFormatted, m.SenderUserloginId,m.ReceiverUserLoginId,m.CreatedOn, (CONVERT(varchar, m.CreatedOn,106)) as CreatedOn_FormatDate,
		FORMAT(CreatedOn, 'hh:mm: tt') as Time
		from Messages m
		where  
		(m.SenderUserloginId = @toUserLoginId and m.ReceiverUserLoginId =  @userLoginId) or (m.SenderUserloginId =  @userLoginId and m.ReceiverUserLoginId = @toUserLoginId) order by m.CreatedOn ASC
	end
	----Get Business Or Student Detail by Id using in Business-Panel
	else if (@mode=2)
	begin
		select FirstName, LastName, ProfileImageWithPath,UserLoginId from (
		Select bo.FirstName, bo.LastName , dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImageWithPath ,bo.UserLoginId from BusinessOwners bo where bo.UserLoginId  = @userLoginId
		Union all
		Select s.FirstName, s.LastName, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath,s.UserLoginId from Students s where s.UserLoginId = @userLoginId
		) t
	end
	-- Mark Messages as Read
	else if (@mode = 3)
	begin
		Update Messages set  ReceiverStatus = 1  where ReceiverUserLoginId = @userLoginId and SenderUserloginId = @toUserLoginId and ReceiverStatus = 0
		select 1 as ret, 'Message read successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'MessageRead_SuccessMessage' as resourceKey
	end
	---Get Business NewMessageCount Or Get Student List  using by Business-banel
	else if (@mode= 4)
	begin 
		select  s.Id ,s.UserLoginId,dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImage, s.FirstName + '' + s.LastName as StudentName, 
		(
			SELECT COUNT(*) AS ReceiverStatusCount
			FROM Messages
			WHERE ReceiverUserLoginId = @toUserLoginId
				AND SenderUserloginId = s.UserLoginId
				AND ReceiverStatus = 0
		) AS ReceiverStatusCount,
		(
			SELECT Max(CreatedOn) AS LastMessageDateTime
			FROM Messages
			WHERE (ReceiverUserLoginId = @toUserLoginId
				and SenderUserloginId = s.UserLoginId) or (ReceiverUserLoginId = s.UserLoginId 
				and SenderUserloginId = @toUserLoginId)
		) AS LastMessageDateTime
		FROM Students s
		ORDER BY
		LastMessageDateTime DESC;
	end 
	---Get Student NewMessageCount Or Get Business List  using by Visior-banel
	else if (@mode= 5)
	begin 
 
		Select bo.UserLoginId,bo.FirstName + '' + bo.LastName as BusinessName, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ProfileImage ,
		(
			SELECT COUNT(*) AS SenderStatusCount
			FROM Messages
			WHERE ReceiverUserLoginId = @userLoginId
				AND SenderUserloginId = bo.UserLoginId
				AND ReceiverStatus = 0
		) AS NewMessageCount,
		(
			SELECT Max(CreatedOn) AS LastMessageDateTime
			FROM Messages
			WHERE (ReceiverUserLoginId = @userLoginId
				and SenderUserloginId = bo.UserLoginId) or (ReceiverUserLoginId = bo.UserLoginId 
				and SenderUserloginId = @userLoginId)
		) AS LastMessageDateTime
		FROM 
		BusinessStudents bs 
		inner join BusinessOwners bo on bs.BusinessOwnerId = bo.Id
		where bs.StudentId = (select Id from Students where UserLoginId = @userLoginId)
		ORDER BY
		LastMessageDateTime DESC

	end 
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageNotification]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageNotification]
(
	@id bigint,
	@notificationRecordId bigint,
	@fromUserLoginId bigint,
	@toUserLoginId bigint,
	@mode int
)
as
begin
	-- Get Notification-Record details by Notification Id for Manage-Notifications
	if(@mode=1)
	begin
		select nr.Id, nr.NotificationTitle, nr.NotificationText, nr.CreatedOn, (CONVERT(varchar, nr.CreatedOn,106)) as CreatedOn_FormatDate
		from NotificationRecords nr
		--inner join Notifications n on nr.Id = n.NotificationRecordId
		--inner join UserLogins ul on n.UserLoginId = ul.Id
		--inner join Students s on ul.Id = s.UserLoginId
		where nr.FromUserLoginId = @fromUserLoginId
		and nr.IsDeleted = 0  and nr.Id = @notificationRecordId
	end
	-- Get all users to whom notification was sent by Notification-Record-Id
	else if(@mode=2)
	begin
		select n.* from Notifications n where n.NotificationRecordId = @notificationRecordId
	end
	-- Mark Notification as Read
	else if(@mode=3)
	begin
		update Notifications set IsRead = 1 where Id = @id
		select 1 as ret, 'Notification read successfully!' as responseMessage, 'VisitorPanel' as resourceFileName, 'NotificationRead_SuccessMessage' as resourceKey
	end	
	-- Mark Notification as Unread
	else if(@mode=4)
	begin
		update Notifications set IsRead = 0 where Id = @id
		select 1 as ret, 'Notification unread successfully!' as responseMessage, 'VisitorPanel' as resourceFileName, 'NotificationUnRead_SuccessMessage' as resourceKey
	end	
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageNotification_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageNotification_Pagination]
(
	@id bigint,
	@fromUserLoginId bigint,
	@toUserLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Notification Records Created by Admin-Users
	if(@mode=1)
	begin
		select nr.Id, nr.NotificationTitle, nr.NotificationText, nr.CreatedOn, (CONVERT(varchar, nr.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #AllNotificationsByFromUser
		from NotificationRecords nr
		where nr.FromUserLoginId = @fromUserLoginId
		and nr.IsDeleted = 0 
		and
		(nr.NotificationTitle LIKE '%'+@searchFilter+'%' OR
		nr.NotificationText LIKE '%'+@searchFilter+'%' OR
		nr.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,nr.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllNotificationsByFromUser);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'ASC' THEN NotificationTitle END,
				CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'DESC' THEN NotificationTitle END DESC,
				CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'ASC' THEN NotificationText END,
				CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'DESC' THEN NotificationText END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllNotificationsByFromUser
		order by
		CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'ASC' THEN NotificationTitle END,
		CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'DESC' THEN NotificationTitle END DESC,
		CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'ASC' THEN NotificationText END,
		CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'DESC' THEN NotificationText END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllNotificationsByFromUser
	end
	-- Get All Notification Records by Logged-In-User
	else if(@mode=2)
	begin
		select nr.Id, nr.NotificationTitle, nr.NotificationText, nr.CreatedOn, (CONVERT(varchar, nr.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #AllUserNotifications
		from Notifications n
		inner join NotificationRecords nr on n.NotificationRecordId = nr.Id
		where n.UserLoginId = @toUserLoginId
		and nr.IsDeleted = 0 
		and
		(nr.NotificationTitle LIKE '%'+@searchFilter+'%' OR
		nr.NotificationText LIKE '%'+@searchFilter+'%' OR
		nr.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,nr.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllUserNotifications);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'ASC' THEN NotificationTitle END,
				CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'DESC' THEN NotificationTitle END DESC,
				CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'ASC' THEN NotificationText END,
				CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'DESC' THEN NotificationText END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllUserNotifications
		order by
		CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'ASC' THEN NotificationTitle END,
		CASE WHEN @sorting = 'NotificationTitle' AND @sortOrder = 'DESC' THEN NotificationTitle END DESC,
		CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'ASC' THEN NotificationText END,
		CASE WHEN @sorting = 'NotificationText' AND @sortOrder = 'DESC' THEN NotificationText END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllUserNotifications
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageNotificationTransfer]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_ManageNotificationTransfer]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@status int,
	@mode int
)
as 
begin
	-- To change the Notification Status in Business-panel 
	if(@mode=1)
	begin
		update NotificationTransfers set Status = @status where Id = @id

		select 1 as ret, 'Notification Transfer status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'NotificationTransferStatus_SuccessMessage' as resourceKey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageOrder]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageOrder]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get Order Data by Id
	if(@mode=1)
	begin
		select *, (CONVERT(varchar, o.CreatedOn,106)) as CreatedOn_FormatDate from Orders o
		where o.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManagePayment_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManagePayment_Pagination]
(
	@id bigint,
	@ownerUserLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	--declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Payments for Super Admin
	if(@mode=1)
	begin
		DECLARE @userLoginIds TABLE (UserLoginId BIGINT)

			INSERT INTO @userLoginIds
			SELECT DISTINCT o.UserLoginId
			FROM Orders o

			SELECT pr.TransactionID, pr.Method, pr.Amount,pr.CreatedOn, o.ItemType, o.TotalDiscount,  t.FirstName + t.LastName AS Name, t.UserMasterId, t.UserImage, t.UserLoginId, t.UserRoleId, bo.UserLoginId as BusinessOwnerLoginId, bo.BusinessName, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bul.MasterId as BusinessMasterId
			INTO #GetAllPayments
			FROM PaymentResponses pr
			INNER JOIN Orders o ON pr.OrderId = o.Id
			INNER JOIN BusinessOwners bo on o.OwnerUserLoginId = bo.UserLoginId
			Inner join UserLogins bul on bo.UserLoginId = bul.Id
			INNER JOIN (
					SELECT bo.Id, bo.FirstName, bo.LastName, bo.UserLoginId, ul.MasterId as UserMasterId, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as UserImage, ul.RoleId as UserRoleId
					--, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath
					FROM BusinessOwners bo
					inner join UserLogins ul on bo.UserLoginId = ul.Id
					WHERE bo.UserLoginId IN (SELECT UserLoginId FROM @userLoginIds)

					UNION ALL

					SELECT s.Id, s.FirstName, s.LastName, s.UserLoginId, ul.MasterId as UserMasterId, dbo.GetStudentImageWithPath(s.ProfileImage) as UserIamge, ul.RoleId as UserRoleId
					--, dbo.GetStudentImageWithPath(s.ProfileImage) AS ProfileImageWithPath
					FROM Students s
					inner join UserLogins ul on s.UserLoginId = ul.Id
					WHERE s.UserLoginId IN (SELECT UserLoginId FROM @userLoginIds)
				) t ON t.UserLoginId = o.UserLoginId
			WHERE
			(t.FirstName + t.LastName  LIKE '%' + @searchFilter + '%' OR
			pr.CreatedOn LIKE '%' + @searchFilter + '%' OR
			pr.TransactionID LIKE '%' + @searchFilter + '%' OR
			o.ItemType LIKE '%' + @searchFilter + '%' OR
			bo.BusinessName LIKE '%' + @searchFilter + '%' OR
			bul.MasterId LIKE '%' + @searchFilter + '%' OR
			@searchFilter = '')
		
		SET @totalRecords = (SELECT COUNT(*) FROM #GetAllPayments);

		SELECT
		ROW_NUMBER() OVER (
			ORDER BY
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
						CreatedOn DESC
				) AS SerialNumber, *, @totalRecords AS TotalRecords
			FROM #GetAllPayments
			ORDER BY
		 CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
            CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
			CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
			CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
			
				CreatedOn DESC
			OFFSET @start ROWS
			FETCH NEXT @pageSize ROWS ONLY

			DROP TABLE #GetAllPayments

	end
	--Get Payments Details for Business 
	if(@mode=2)
	begin
		DECLARE @userLoginId TABLE (UserLoginId BIGINT)

			INSERT INTO @userLoginId
			SELECT DISTINCT o.UserLoginId
			FROM Orders o

			SELECT pr.TransactionID, pr.Method, pr.Amount,pr.CreatedOn, o.ItemType, o.TotalDiscount,  t.FirstName + t.LastName AS Name
			INTO #GetAllPaymentsBusiness
			FROM PaymentResponses pr
			INNER JOIN Orders o ON pr.OrderId = o.Id
			INNER JOIN (
					SELECT bo.Id, bo.FirstName, bo.LastName, bo.UserLoginId
					--, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath
					FROM BusinessOwners bo
					WHERE bo.UserLoginId IN (SELECT UserLoginId FROM @userLoginId)

					UNION ALL

					SELECT s.Id, s.FirstName, s.LastName, s.UserLoginId
					--, dbo.GetStudentImageWithPath(s.ProfileImage) AS ProfileImageWithPath
					FROM Students s
					WHERE s.UserLoginId IN (SELECT UserLoginId FROM @userLoginId)
				) t ON t.UserLoginId = o.UserLoginId
			WHERE o.OwnerUserLoginId = @ownerUserLoginId and
			(t.FirstName + t.LastName  LIKE '%' + @searchFilter + '%' OR
			pr.CreatedOn LIKE '%' + @searchFilter + '%' OR
			pr.TransactionID LIKE '%' + @searchFilter + '%' OR
			o.ItemType LIKE '%' + @searchFilter + '%' OR
			@searchFilter = '')
		
		SET @totalRecords = (SELECT COUNT(*) FROM #GetAllPaymentsBusiness);

		SELECT
			ROW_NUMBER() OVER (
			ORDER BY
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
				CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
				CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
				CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
				CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
				CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
			
						CreatedOn DESC
				) AS SerialNumber, *, @totalRecords AS TotalRecords
			FROM #GetAllPaymentsBusiness
			ORDER BY
			CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
            CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'ASC' THEN TransactionId END,
            CASE WHEN @sorting = 'TransactionId' AND @sortOrder = 'DESC' THEN TransactionId END DESC,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'ASC' THEN ItemType END,
            CASE WHEN @sorting = 'ItemType' AND @sortOrder = 'DESC' THEN ItemType END DESC,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
            CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'ASC' THEN Method END,
			CASE WHEN @sorting = 'Method' AND @sortOrder = 'DESC' THEN Method END DESC,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'ASC' THEN Amount END,
			CASE WHEN @sorting = 'Amount' AND @sortOrder = 'DESC' THEN Amount END DESC,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'ASC' THEN TotalDiscount END,
			CASE WHEN @sorting = 'TotalDiscount' AND @sortOrder = 'DESC' THEN TotalDiscount END DESC,
			
			CreatedOn DESC
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		DROP TABLE #GetAllPaymentsBusiness

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManagePaymentDetail]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManagePaymentDetail]
(
	@id bigint,
	@userLoginId bigint,
	@paymentModeType nvarchar(max),
	@paymentModeDetail nvarchar(max),
	@mode int
)
as 
begin
    ------Payment detail Get by Id
    if(@mode=1)
    begin
        select pd.Id,pd.UserLoginId,pd.paymentModeType, pd.PaymentModeDetail from PaymentDetails pd where id = @id and UserLoginId= @userLoginId
    end
    -----Get All Payment detail
    else if(@mode=2)
    begin
        select pd.Id,pd.UserLoginId,pd.paymentModeType, pd.PaymentModeDetail from PaymentDetails pd where UserLoginId = @userLoginId
    end
    --Get Payement Details where Payment Mode type is UPI by Id
    else if(@mode=3)
    begin
        select pd.Id , pd.PaymentModeDetail from PaymentDetails pd where PaymentModeType = 'UPI' and pd.Id=@id and UserLoginId = @userLoginId
    end
    --Get Payement Details where Payment Mode type is Paytm by Id
    else if(@mode=4)
    begin
        select pd.Id , pd.PaymentModeDetail from PaymentDetails pd where PaymentModeType = 'Paytm' and pd.Id=@id and UserLoginId = @userLoginId
    end
    --Get Payement Details where Payment Mode type is Card by Id
    else if(@mode=5)
    begin
		select pd.Id, pd.PaymentModeType, pd.PaymentModeDetail from PaymentDetails pd where PaymentModeType= 'CCAvenue' and Id =@id and UserLoginId = @userLoginId
    end
end 
GO
/****** Object:  StoredProcedure [dbo].[sp_ManagePaymentResponse]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[sp_ManagePaymentResponse]
(
	@id bigint,
	@orderId bigint,
	@mode int
)
as
begin
	-- Get Payment Response Data by Order-Id
	if(@mode=1)
	begin
		select * from PaymentResponses pr
		where pr.OrderId = @orderId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManagePermissions]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManagePermissions]
(
	@id bigint,
	@panelTypeId int,
	@mode int
)
as
begin
	-- select Permissions by Panel-Type-Id
	if(@mode=1)
	begin
		select p.Id, p.KeyName, p.TextValue, p.ParentPermissionId from dbo.Permissions p where PanelTypeId = @panelTypeId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManagePlanBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManagePlanBooking]
(
	@id bigint,
	@userLoginId bigint, 
	@planId bigint,
	@mode int
)
as
begin
	-- Get Plan Booking Detail with Order by User [having order status Paid]
	if(@mode=1)
	begin
		select * from PlanBookings pb 
		inner join Orders o on pb.OrderId = o.Id
		where pb.StudentUserLoginId = @userLoginId and pb.PlanId = @planId and o.Status = 1 order by pb.Id desc
	end
	-- Get Plan-Booking Data
	else if(@mode=2)
	begin
		select * from PlanBookings pb where pb.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageProfilePageTypes]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_ManageProfilePageTypes]
(
	@id bigint,
	@key nvarchar(max),
	@mode int
)
as
begin
	-- Get All ProfilePageTypes
	if(@mode=1)
	begin
		select * from ProfilePageTypes
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageQueries]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageQueries]
(
	@id bigint,
	@studentId bigint,
	@businessOwnerId bigint,
	@userLoginId nvarchar(max),
	@mode int
)
as 
begin
	-- Get All Queries by Student
	if(@mode=1)
	begin
		select @studentId = Id from Students where UserLoginId = @userLoginId

		select en.Id,BusinessOwnerId,en.Title,en.ReplyBody,en.IsReplied,(CONVERT(varchar, en.CreatedOn,106)) as CreatedOn_FormatDate from Queries en where StudentId = @studentId and en.IsDeleted = 0 order by CreatedOn desc
	end
	--Get Query Detail by Id
	else if(@mode=2)
	begin
		--select @studentId = Id from Students where UserLoginId = @userLoginId

		select en.Id,en.BusinessOwnerId,bo.BusinessName,en.Title,en.IsReplied,en.ReplyBody,(CONVERT(varchar, en.RepliedOn,106)) as RepliedOn_FormatDate,en.Description, bo.UserLoginId as BusinessOwnerLoginId, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bsc.Name as BusinessSubCategoryName
		from Queries  en 
		inner join BusinessOwners bo on en.BusinessOwnerId=bo.Id 
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where en.Id = @id --and StudentId = @studentId
	end
	-- delete enquiry by student-login-id
	else if(@mode=3)
	begin
		select @studentId = Id from Students where UserLoginId = @userLoginId

		update Queries set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and StudentId = @studentId
		select 1 as ret, ' Query Deleted Successfully!' as responseMessage,'VisitorPanel' as resourceFileName, 'QueryDeleted_SuccessMessage' as resourcekey
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageQuery_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageQuery_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Queries by Business-Owner
	if(@mode=1)
	begin
		select @businessOwnerId = Id from BusinessOwners where UserLoginId = @businessOwnerLoginId

		select e.Id, e.StudentId, e.BusinessOwnerId, e.Title, e.Description, e.IsReplied, e.ReplyBody, e.RepliedOn, (CONVERT(varchar, e.RepliedOn,106)) as RepliedOn_FormatDate, e.CreatedOn, (CONVERT(varchar, e.CreatedOn,106)) as CreatedOn_FormatDate, s.FirstName as StudentFirstName, s.LastName as StudentLastName, s.FirstName + ' ' + s.LastName as StudentName,
		dbo.GetStudentImageWithPath(s.ProfileImage) as StudentProfileImageWithPath,
		s.UserLoginId as StudentUserLoginId
		INTO #AllQueriesByBusinessOwner
		from Queries e
		inner join Students s on e.StudentId = s.Id
		where e.BusinessOwnerId = @businessOwnerId
		and e.IsDeleted = 0 
		and
		(e.Title LIKE '%'+@searchFilter+'%' OR
		e.Description LIKE '%'+@searchFilter+'%' OR
		--s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
		e.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,e.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllQueriesByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
				CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
				CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllQueriesByBusinessOwner
		order by
		CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
		CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'ASC' THEN Title END,
		CASE WHEN @sorting = 'Title' AND @sortOrder = 'DESC' THEN Title END DESC,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'ASC' THEN Description END,
		CASE WHEN @sorting = 'Description' AND @sortOrder = 'DESC' THEN Description END DESC,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
		CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllQueriesByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageReview]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageReview]
(
	@id bigint, 
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	if(@mode=1)
	begin
		SELECT
		r.CreatedOn,
		CONVERT(varchar, r.CreatedOn, 106) AS CreatedOn_FormatDate,
		r.Id,
		r.ItemId,
		r.Rating,
		r.ReviewBody,
		r.ReviewerUserLoginId,
		r.Status,
		CASE WHEN s.FirstName IS NULL THEN '' ELSE s.FirstName + ' ' + s.LastName END AS StudentName
  
		FROM Reviews r
		LEFT JOIN Students s ON s.UserLoginId = r.ReviewerUserLoginId
		where  r.Id = @id
	end
	---Rating Record To Change Status By Id 
	else if(@mode=2)
	begin
		update Reviews set Status = (case Status when 1 then 0 else 1 end)
			where Id = @id

		select 1 as ret, 'Rating status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'RatingStatus_SuccessMessage' as resourceKey
	end
	----To Get Business Reviews For Training 
	else if(@mode=3)
	begin
	    select r.Id,r.ReviewBody,R.ReviewerUserLoginId,r.Rating, s.FirstName +''+s.LastName as StudentName,r.CreatedOn,
    DATEDIFF(day, r.CreatedOn, GETDATE()) AS DaysDifference from Reviews r inner join Students s on s.UserLoginId = r.ReviewerUserLoginId  where r.ItemId = @userLoginId
	end
	
	---To Get Review Detail with Calculating Rating
	else if(@mode=4)
	begin
	   SELECT bo.UserLoginId, bo.ProfileImage,bo.OfficialWebSiteUrl, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS ProfileImageWithPath,bo.FirstName + ' ' + bo.LastName AS BusinessName,COUNT(*) AS TotalReviewsEntered,CAST(AVG(r.Rating) AS DECIMAL(18, 2)) AS AverageRating, SUM(r.Rating) AS TotalRating,  ul.IsCertified,
		SUM(CASE WHEN r.Rating = 5 THEN 1 ELSE 0 END) AS TotalFiveStarRatings,
		SUM(CASE WHEN r.Rating = 4 THEN 1 ELSE 0 END) AS TotalFourStarRatings,
		SUM(CASE WHEN r.Rating = 3 THEN 1 ELSE 0 END) AS TotalThreeStarRatings,
		SUM(CASE WHEN r.Rating = 2 THEN 1 ELSE 0 END) AS TotalTwoStarRatings,
		SUM(CASE WHEN r.Rating = 1 THEN 1 ELSE 0 END) AS TotalOneStarRatings,
      CONCAT(CAST((100.0 * SUM(CASE WHEN r.Rating = 5 THEN 1 ELSE 0 END)) / COUNT(*) AS DECIMAL(5, 2)), '%') AS PercentageFiveStar,
	CONCAT(CAST((100.0 * SUM(CASE WHEN r.Rating = 4 THEN 1 ELSE 0 END)) / COUNT(*) AS DECIMAL(5, 2)), '%') AS PercentageFourStar,
	CONCAT(CAST((100.0 * SUM(CASE WHEN r.Rating = 3 THEN 1 ELSE 0 END)) / COUNT(*) AS DECIMAL(5, 2)), '%') AS PercentageThreeStar,
	CONCAT(CAST((100.0 * SUM(CASE WHEN r.Rating = 2 THEN 1 ELSE 0 END)) / COUNT(*) AS DECIMAL(5, 2)), '%') AS PercentageTwoStar,
	CONCAT(CAST((100.0 * SUM(CASE WHEN r.Rating = 1 THEN 1 ELSE 0 END)) / COUNT(*) AS DECIMAL(5, 2)), '%') AS PercentageOneStar
	FROM Reviews r
	INNER JOIN BusinessOwners bo ON r.ItemId = bo.UserLoginId
	INNER JOIN UserLogins ul ON r.ItemId = ul.Id
	WHERE bo.UserLoginId = @userLoginId
	GROUP BY bo.FirstName, bo.LastName, bo.UserLoginId, bo.ProfileImage,bo.OfficialWebSiteUrl, ul.IsCertified;

	end
	else if(@mode=5)
	begin
	    select r.Id,r.Rating,r.ReviewBody,IsNull(bcr.Description,'') as Description,ISNULL(bcr.ReviewImage, '') AS ReviewImageWithPath,
    dbo.GetReviewImageWithPath(bcr.ReviewImage) AS ReviewImageWithPath ,s.FirstName +''+s.LastName as StudentName,s.ProfileImage,dbo.GetStudentImageWithPath(s.ProfileImage) as StudentProfileImageWithPath from Reviews r
		inner join Students s on r.ReviewerUserLoginId = s.UserLoginId 
		left join BusinessContentReview_PPCMeta  bcr on r.ItemId = bcr.UserLoginId
		where r.ItemType = 'Dance' and r.ItemId = @businessOwnerLoginId
	end
	--- To Get Business Review Detail In Business- OwnerLoginId
	else if(@mode=6)
	begin
	    SELECT r.Id,r.ReviewBody,ISNULL(bcr.Description, '') AS Description,ISNULL(bcr.ReviewImage, '') AS ReviewImageWithPath,dbo.GetReviewImageWithPath(bcr.ReviewImage) AS ReviewImageWithPath,s.FirstName + '' + s.LastName AS StudentName,s.ProfileImage,dbo.GetStudentImageWithPath(s.ProfileImage) AS StudentProfileImageWithPath,COUNT(*) AS TotalReviewsEntered,ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, COALESCE(SUM(r.Rating), 0) AS TotalRating,r.CreatedOn,(CONVERT(varchar, r.CreatedOn,106)) as CreatedOn_FormatDate
		 FROM Reviews r
		INNER JOIN Students s ON r.ReviewerUserLoginId = s.UserLoginId
		LEFT JOIN  BusinessContentReview_PPCMeta bcr ON r.ItemId = bcr.UserLoginId
		WHERE r.ItemType = 'Business' AND r.ItemId = @businessOwnerLoginId
		GROUP BY r.Id,  r.ReviewBody,bcr.Description,bcr.ReviewImage,dbo.GetReviewImageWithPath(bcr.ReviewImage),s.FirstName + '' + s.LastName,s.ProfileImage,dbo.GetStudentImageWithPath(s.ProfileImage),r.CreatedOn;
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageReview_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageReview_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Student by Review in business owner
	if(@mode=1)
	begin
		SELECT
		  r.CreatedOn,
		  CONVERT(varchar, r.CreatedOn, 106) AS CreatedOn_FormatDate,r.Id, r.ItemId, r.Rating,  r.ReviewBody,r.ReviewerUserLoginId,  r.Status,  CASE WHEN s.FirstName IS NULL THEN '' ELSE s.FirstName + ' ' + s.LastName END AS StudentName
		--INTO #AllReviewByBusinessOwner
		FROM Reviews r
		Left JOIN Students s ON s.UserLoginId = r.ReviewerUserLoginId
		where r.IsDeleted = 0 and r.ItemId = @businessOwnerLoginId
		and
		(s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
	    r.Rating LIKE '%'+@searchFilter+'%' OR
		r.ReviewBody LIKE '%'+@searchFilter+'%' OR
	    r.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,r.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllReviewByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Rating' AND @sortOrder = 'ASC' THEN Rating END,
				CASE WHEN @sorting = 'Rating' AND @sortOrder = 'DESC' THEN Rating END DESC,
				CASE WHEN @sorting = 'ReviewBody' AND @sortOrder = 'ASC' THEN ReviewBody END,
				CASE WHEN @sorting = 'ReviewBody' AND @sortOrder = 'DESC' THEN ReviewBody END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllReviewByBusinessOwner
		order by
		        CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
			    CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Rating' AND @sortOrder = 'ASC' THEN Rating END,
				CASE WHEN @sorting = 'Rating' AND @sortOrder = 'DESC' THEN Rating END DESC,				
				CASE WHEN @sorting = 'ReviewBody' AND @sortOrder = 'ASC' THEN ReviewBody END,
				CASE WHEN @sorting = 'ReviewBody' AND @sortOrder = 'DESC' THEN ReviewBody END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllReviewByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStaff]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStaff]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@staffCategoryId bigint,
	@mode int
)
AS
BEGIN
	-- Get All Staff List
	if(@mode=1)
	begin
		select s.Id, s.FirstName, s.LastName, s.StaffCategoryId, s.ProfileImage, ul.Email, s.BasicSalary, ul.Status, dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, sc.Name as StaffCategoryName, s.HouseRentAllowance, s.TravellingAllowance, s.DearnessAllowance, s.Remarks, ul.MasterId, s.UserLoginId
		from Staffs s 
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		inner join StaffCategories sc on s.StaffCategoryId = sc.Id
		where s.BusinessOwnerLoginId = @businessOwnerLoginId and ul.IsDeleted = 0
		order by ul.CreatedOn desc
	end
	-- Get Staff by Id
	else if(@mode=2)
	begin
		select s.Id, s.UserLoginId, s.FirstName, s.LastName, s.StaffCategoryId, s.ProfileImage, s.BasicSalary, ul.Email, ul.Password, ul.Status, dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, sc.Name as StaffCategoryName, s.MasterId, s.HouseRentAllowance, s.TravellingAllowance, s.DearnessAllowance, s.Remarks, ul.MasterId,s.Designation
		from Staffs s 
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		inner join StaffCategories sc on s.StaffCategoryId = sc.Id
		where s.BusinessOwnerLoginId = @businessOwnerLoginId and ul.IsDeleted = 0 and s.Id = @id
	end
	-- Change Staff Status by Id
	else if(@mode=3)
	begin
		if exists(select top 1 s.UserLoginId from Staffs s where s.Id = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId)
		begin
			update UserLogins set Status = (case Status when 1 then 0 else 1 end)
			where Id = (select top 1 s.UserLoginId from Staffs s where s.Id = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId)

			select 1 as ret, 'Staff status has been successfully updated' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffStatus_SuccessMessage' as resourceKey
		end
		else
		begin
			select -1 as ret, 'Staff not found!' as responseMessage, 'BusinessPanel' as resourceFileName, 'StaffNotFound_ErrorMessage' as resourceKey
		end
	end
	--Get staff detauls for basic profile 
	else if(@mode=4)
	begin
		select  s.FirstName, s.LastName,  s.ProfileImage, s.BasicSalary, ul.Email,  dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath
		from Staffs s 
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		where s.BusinessOwnerLoginId = @businessOwnerLoginId and ul.IsDeleted = 0 and s.UserLoginId = @id
	end
	--- Get Staff Detail For Other Instructor Detail 
	else if(@mode=5)
	begin
	DECLARE @userLoginId BIGINT = 0;
		 SET @userLoginId = (SELECT ul.Id
		FROM UserLogins ul
		INNER JOIN Staffs s ON ul.MasterId = s.MasterId WHERE s.UserLoginId =@businessOwnerLoginId);
	
	    select s.Id,s.UserLoginId,s.BusinessOwnerLoginId, Concat(bo.FirstName,'', bo.LastName) as BusinessName,IsNull(bo.ProfileImage,'') as ProfileImage,ISNULL(dbo.GetBusinessProfileImageWithPath(bo.ProfileImage), '') AS BusinessProfileImageWithPath, IsNull(s.Designation,'') as Designation,IsNull(s.IsProfessional,'') as IsProfessional,IsNull(s.MasterId,'') as MasterId,IsNull(ul.Email,'') as Email,IsNull(ul.Country,'') as Country,IsNull(ul.State,'') as State,IsNull(ul.City,'') as City,IsNull(ul.Address,'') as Address,IsNull(ul.UniqueUserId,'') as UniqueUserId,IsNull(ul.FacebookProfileLink,'') as FacebookProfileLink,IsNull(ul.TwitterProfileLink,'') as TwitterProfileLink,IsNull(ul.InstagramProfileLink,'') as InstagramProfileLink,IsNull(ul.LinkedInProfileLink,'') as LinkedInProfileLink,IsNull(ul.PhoneNumber, '') as PhoneNumber
		 from Staffs s inner join UserLogins ul on  ul.Id = s.UserLoginId
		 inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		where ul.Id = @userLoginId
	end
	-- Get Staff Detail by Id
	else if(@mode=6)
	begin
		select   CONVERT(varchar, ul.CreatedOn, 101) AS CreatedOnString, s.Id, s.UserLoginId, s.FirstName, s.LastName, s.StaffCategoryId, s.ProfileImage, s.BasicSalary, ul.Email, ul.Password, ul.Status, dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath, sc.Name as StaffCategoryName, s.MasterId, s.HouseRentAllowance, s.TravellingAllowance, s.DearnessAllowance, s.Remarks, ul.MasterId as UserLoginMasterId,s.Designation
		from Staffs s 
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		inner join StaffCategories sc on s.StaffCategoryId = sc.Id
		where s.UserLoginId = @id and ul.IsDeleted = 0
	end
END
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStaffAttendance]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStaffAttendance]
(
@id bigint,
@businessOwnerLoginId bigint,
@mode int
)
as 
begin
	--Get Staff Attendance of Today(Current Date)
	if(@mode=1)
	begin
		select sa.Id,sa.StaffId,sa.AttendanceDate,sa.AttendanceStatus,s.FirstName + ' '+ s.LastName as StaffName,sa.LeaveReason,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as StaffProfileImageWithPath ,ul.MasterId,sa.IsApproved,sa.InTime_24HF as StaffAttendanceInTime_24HF,sa.OutTime_24HF as StaffAttendnaceOutTime_24HF from StaffAttendances sa 
		inner join Staffs s on sa.StaffId = s.Id
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where sa.BusinessOwnerLoginId = @businessOwnerLoginId and CAST(sa.AttendanceDate_DateTimeFormat AS DATE) = CAST(GETUTCDATE() AS DATE)
	end 
	---Delete Current Date Data Due to Update Satff Attendance
	else if(@mode = 2)
	begin
		Delete from  StaffAttendances where Convert(DATE,CreatedOn) = CONVERT(DATE, GETDATE()) and BusinessOwnerLoginId = @businessOwnerLoginId
		select 1 as ret, 'Delete Data' as responseMessage,  'BusinessPanel' as resourceFileName, 'DeleteStaffAttendance' as resourceKey
	end
	-- Get All Staff Attendance Detail with Date of Single Staff.
	else if (@mode =3)
	begin 

		select sa.Id, sa.AttendanceYear, FORMAT(cast(sa.AttendanceDate as date), 'yyyy-MM-dd') AS FormattedAttendanceDate, sa.AttendanceDate_DateTimeFormat ,sa.AttendanceMonth,sa.AttendanceStatus ,sa.LeaveReason,sa.IsApproved   
		from StaffAttendances sa where StaffId = (select Id from Staffs where UserLoginId = @id ) 
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStaffCategories]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStaffCategories]
(
	@id bigint,
	@mode int
)
as
begin
	-- Get All Active 
	if(@mode=1)
	begin
		select sc.Id, sc.Name from StaffCategories sc where sc.IsActive = 1 and sc.IsDeleted = 0
	end
	-- Get All Staff-Category
	if(@mode=2)
	begin
		select *  from StaffCategories  where IsDeleted = 0
	end
	-- Get Staff-Category-Types by Id
	else if(@mode=3)
	begin
		select * from StaffCategories  where IsDeleted = 0 and Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStaffProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStaffProfile]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@mode int
)
as
begin
	-- Get Staff Profile data by Staff-Login-Id
	if(@mode=1)
	begin
		select s.FirstName, s.LastName, s.ProfileImage,s.UserLoginId,
		dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,
		ul.Email,ul.PhoneNumber,ul.Address,ul.City,ul.State,ul.Country,ul.Pincode,ul.FullAddressLocation as LandMark
		from Staffs s
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where s.UserLoginId = @id and s.BusinessOwnerLoginId = @businessOwnerLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageState]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageState]
(
	@id bigint,
	@countryId bigint,
	@mode int
)
as
begin
	--Get All states list by country-id
	if(@mode=1)
	begin
		select sm.*, cm.PhoneCode from StateMasters sm 
		inner join CountryMasters cm on sm.CountryID = cm.ID
		where sm.CountryID = @countryId and sm.Status=1
	end
	--Get state-data by state-id
	else if(@mode=2)
	begin
		select sm.*,cm.Name as CountryName, cm.CountryCode, cm.CurrencyCode from StateMasters sm 
		inner join CountryMasters cm on sm.CountryID = cm.ID
		where sm.ID = @id
	end
	-- Get all States
	else if(@mode = 3)
	begin
		select * from StateMasters sm where sm.Status = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStudent]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_ManageStudent]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as 
begin 
	--Get Basic Student Detail
     if(@mode=1)
	 begin
		select  S.Id,S.FirstName,S.LastName,ul.Email,ul.Status,S.ProfileImage,
			dbo.GetStudentImageWithPath(S.ProfileImage) as ProfileImageWithPath
		from Students S 
		inner join UserLogins ul on S.UserLoginId = ul.Id 
		where S.UserLoginId = @userLoginId and ul.IsDeleted = 0
	 end
	---Get Student Detail
	else if(@mode=2)
	begin
		select S.Id,S.FirstName,S.LastName,S.ProfileImage,
	dbo.GetStudentImageWithPath(S.ProfileImage) as ProfileImageWithPath,
	ul.PhoneNumber,ul.Email, ul.MasterId, ul.EmailConfirmed
		from Students S 
		inner join UserLogins ul on S.UserLoginId = ul.Id 
		where S.UserLoginId = @userLoginId and ul.IsDeleted = 0
	end
	--Get Business Owner Detail
	else if(@mode=3)
	begin
		select bo.Id, bo.BusinessName,bo.Address,bo.DOB,bo.FirstName,bo.LastName from BusinessOwners bo 
	end
	-- Student-Detail By SuperAdmin
	else if(@mode=4)
	begin 
	    select  s.Id ,s.IsBlocked, s.FirstName, s.LastName, s.BlockReason, s.UserLoginId,ul.Address,ul.PhoneNumber,ul.Email,s.FirstName +''+s.LastName as Name, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath,ul.CreatedOn,(CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate, ul.MasterId
		from Students s 
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		where s.UserLoginId = @id  
	end	
	-- Update Student-Block status
	else if(@mode =5)
	begin
		declare @StudentUserLoginId bigint 
		set @StudentUserLoginId = (select  s.UserLoginId from Students s where s.Id = @id)
		begin try
			BEGIN TRANSACTION 
			--Insert data of UserLogin/BusinessOwner
			UPDATE Students SET IsBlocked  = (case IsBlocked when 0 then 1 else 0 end) Where Id = @id 

			--update UserLogins set IsDeleted =(case IsDeleted when 0 then 1 else 0 end)  where  Id = @StudentUserLoginId 

			update UserLogins set Status =(case Status when 0 then 1 else 0 end)  where  Id = @StudentUserLoginId 
			
			select 1 as ret, 'Student status has been closed successfully updated!' as responseMessage, 'SuperAdminPanel' as resourceFileName, 'StudentStatusIsBlocked_SuccessMessage' as resourceKey
    	    COMMIT
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0
				ROLLBACK
				
		END CATCH
	end    
	-- Get Course Detail For Student 
	else if(@mode=6)
	begin
		select distinct s.Id, s.ProfileImage,dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, c.Name as ClassName,b.ScheduledStartOnTime_24HF,insBO.FirstName +''+insBO.LastName as InstructorName 
		from Students s  
		inner join ClassBookings cb on s.UserLoginId = cb.StudentUserLoginId 
		inner join Classes c on cb.ClassId = c.Id
		inner join [Batches] b on cb.BatchId = b.Id
		inner join BusinessOwners insBO on b.InstructorLoginId = insBO.UserLoginId 
		where s.UserLoginId = @id
	end
	-- Get All User-Content-Images 
	else if(@mode=7)
	begin
		select Um.Id, Um.Image, dbo.GetUserContentImageWithPath(Um.Image) as ImageWithPath 
		from UserContentImages Um  
		inner join Students s on Um.UserLoginId = s.UserLoginId  
		where s.UserLoginId = @id and Um.IsDeleted = 0
	end
	-- Get Student Plan List By UserLoginId
	else if(@mode=8)
	begin
		select p.PlanName, p.PlanDescription, p.StartDate, p.PlanDurationTypeName, bp.PlanImage, dbo.GetPlanImageWithPath(bp.PlanImage) as ProfileImageWithPath, p.EndDate from PlanBookings p inner join Students s on p.StudentUserLoginId = s.UserLoginId  inner join BusinessPlans bp on p.PlanId = bp.Id where s.UserLoginId = @id 
	end
	-- Get Training Detail For Student
	else if(@mode=9)
	begin
		select sf.FirstName +''+ sf.LastName  as InstructorName, t.InstructorEmail,t.InstructorAlternateNumber,t.TrainingName,t.ShortDescription,t.StartDate,t.EndDate,t.Address,t.MusicType,t.EnergyLevel,t.DanceStyle
		from Trainings t 
		inner join Staffs sf on t.InstructorUserLoginId = sf.UserLoginId 
		inner join Students s on t.UserLoginId = s.UserLoginId
		where s.UserLoginId = @id
	end
	-- Get All User-Content-Videos
	else if(@mode=10)
	begin
		select ucv.Id,ucv.VideoTitle, ucv.UserLoginId,ucv.VideoLink,ucv.VideoThumbnail, dbo.GetVideoThumbNailImage(ucv.VideoThumbNail) as VideoThumbNailImageWithPath 
		from  UserContentVideos ucv 
		inner join Students s on ucv.UserLoginId = s.UserLoginId 
		where s.UserLoginId = @id 
		and ucv.IsDeleted = 0
	end
	-- Soft Delete User-content-Image
	else if(@mode=11)
	begin 
		update UserContentImages set IsDeleted = 1, DeletedOn = GETUTCDATE() where Id = @id and UserLoginId = @userLoginId

		select 1 as ret, ' UserImage Delete Successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'UserImageDeleted_SuccessMessage' as resourcekey
	end
	-- Soft Delete User-Content-Video
	else if(@mode=12)
	begin 
		update UserContentVideos set IsDeleted = 1, DeletedOn = GETUTCDATE()   where Id = @id and UserLoginId = @userLoginId

		select 1 as ret, ' UserVedio Delete Successfully!' as responseMessage,'SuperAdminPanel' as resourceFileName, 'UserVedioDeleted_SuccessMessage' as resourcekey
	end
	-- Get Student Certificates
	else if(@mode=13)
	begin		    
		select c.Id,c.Name,c.CertificateIcon,-1 as Price,dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateImageWithPath,c.ShortDescription,'get from license' as AdditionalInformation from Certificates c 
		inner join UserCertificates uc on c.Id = uc.CertificateId 
		inner join Students s on uc.UserLoginId = s.UserLoginId
		where s.UserLoginId = @id
	end
	----To Get Training Detail For TrainingBooking for License by Student-LoginId
	else if(@mode=14)
	begin
	    select tb.Id,tb.TrainingName,t.UserLoginId,tb.Price,tb.TrainingName,tb.IsCompleted,IsNull(t.Duration,'') as Duration,IsNull(t.TrainingClassDays,'') as TrainingClassDays,IsNull(t.TotalLectures,'') as TotalLectures,ISNull(t.TotalClasses,'') as TotalClasses,IsNull(t.TotalSeats,'') as TotalSeats,IsNull(t.TotalCredits,'') as TotalCredits,tb.StartDate,tb.EndDate,t.StartDate,t.ShortDescription,t.TrainingImage,dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath from TrainingBookings tb 
			inner join Trainings t on tb.TrainingId = t.Id and tb.UserLoginId = @userLoginId
			inner join BusinessOwners bo on t.UserLoginId = bo.UserLoginId where bo.UserLoginId= @businessOwnerLoginId
	end
	------To Get the Randomly record 
	else if(@mode=15)
	begin
	SELECT TOP 1 t.Id,t.UserLoginId,t.TrainingName,t.Price,t.Duration,t.TrainingClassDays,t.TotalLectures,t.TotalClasses,t.TotalSeats,t.TotalCredits, t.StartDate AS BookingStartDate, t.EndDate AS BookingEndDate, t.StartDate AS TrainingStartDate, t.ShortDescription,
    t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) AS TrainingImageWithPath
	FROM Trainings t
    WHERE t.UserLoginId = @userLoginId
       AND NOT EXISTS (
        SELECT 1
        FROM TrainingBookings tb
        WHERE t.Id = tb.TrainingId           
    )
     ORDER BY NEWID(); -- Retrieve a single random row
	end
	----To Get Business Detail By Default
	else if(@mode=16)
	begin    
		select  bo.Id,bo.UserLoginId,bo. BusinessName,bo.BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoImageWithPath,t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) AS TrainingImageWithPath from BusinessOwners bo Left join Trainings t on bo.UserLoginId = t.UserLoginId
		Left join TrainingBookings tb on t.Id = tb.TrainingId
		where tb.UserLoginId = @userLoginId
	end
	----To Get Business Detail By BusinessId
	else if(@mode=17)
	begin    
		select bo.Id,bo.UserLoginId,bo. BusinessName,bo.BusinessLogo,dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoImageWithPath,t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) AS TrainingImageWithPath from BusinessOwners bo Left join Trainings t on bo.UserLoginId = t.UserLoginId
		Left join TrainingBookings tb on t.Id = tb.TrainingId
		where tb.UserLoginId = @userLoginId and bo.UserLoginId= @businessOwnerLoginId
	end
	---- Get Student Basic Data for Business-Panel
	else if(@mode=18)
	begin
		select ul.Email, IsNull(ul.PhoneNumber,'') as PhoneNumber, ISNULL(ul.PhoneNumber_CountryCode,'') as PhoneNumberCountryCode, ul.MasterId, ul.FullAddressLocation, ul.Gender, dbo.GetGenderStringValue(ul.Gender) as GenderString,
		s.Id, s.FirstName, s.LastName, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath, s.BusinessStudentProfileImage, dbo.GetStudentImageWithPath(s.BusinessStudentProfileImage) as BusinessStudentProfileImageWithPath, s.UserLoginId 
		from UserLogins ul
		inner join Students s on ul.Id = s.UserLoginId
		where s.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStudent_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStudent_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Student with Instructor & Class in business owner
	if(@mode=1)
	begin
		select s.Id, s.UserLoginId as StudentUserLoginId, s.FirstName + ' ' + s.LastName as StudentName,s.ProfileImage,ul.Email,
		 I.FirstName + '' + I.LastName as InstructorName ,c.Name as ClassName, cb.CreatedOn, (CONVERT(varchar, cb.CreatedOn,106)) as CreatedOn_FormatDate, cb.Id as ClassBookingId,
		 dbo.GetStudentImageWithPath(s.ProfileImage) as StudentImageWithPath,
		 dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,
		 dbo.GetBusinessProfileImageWithPath(I.ProfileImage) as InstructorProfileImageWithPath,
		 dbo.GetBusinessProfileImageWithPath(I.BusinessLogo) as InstructorBusinessLogoWithPath,
		I.UserLoginId as InstructorLoginId
		 INTO #AllStudentByBusinessOwner
			from  ClassBookings  cb 
			inner join Students s  on cb.StudentUserLoginId = s.UserLoginId
			inner join UserLogins ul on s.UserLoginId = ul.Id
			inner join Classes c on cb.ClassId = c.Id 
			inner join [Batches] b on cb.BatchId = b.Id
			inner join BusinessOwners I  on b.InstructorLoginId = I.UserLoginId 
			where c.businessownerLoginId = @businessownerLoginId
						and c.IsDeleted = 0 
		and
		(s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
		  ul.Email LIKE '%'+@searchFilter+'%' OR
		  I.FirstName + ' ' + I.LastName LIKE '%'+@searchFilter+'%' OR
		  c.Name LIKE '%'+@searchFilter+'%' OR
		  
	    cb.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,cb.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStudentByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStudentByBusinessOwner
		order by
		     CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStudentByBusinessOwner
	end
	-- Get Student Booked/Ordered Class list for Business-Owner Student Detail
	else if(@mode=2)
	begin
		select cb.Id, c.Id as ClassId, c.Name, c.Description, c.OnlineClassLink, cb.Price, b.Name as BatchName,b.ScheduledStartOnTime_24HF, b.ScheduledEndOnTime_24HF, c.Address, c.ClassMode, c.ClassDays, c.ClassDays_ShortForm, 
			cb.ClassPriceType, cb.StartDate, cb.EndDate, c.ClassImage, dbo.GetClassImageWithPath(c.ClassImage) as ClassImageWithPath,
		o.Id as OrderId, o.PaymentMethod as OrderPaymentMethod, o.TotalAmount as OrderTotalAmount, o.Status as OrderStatus, o.CreatedOn, (CONVERT(varchar, o.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #StudentClassBookingsForBO
		from Classes c 
		inner join ClassBookings cb on c.Id = cb.ClassId 
		inner join Orders o on cb.OrderId = o.Id 
		inner join [Batches] b on cb.BatchId = b.Id
		where cb.StudentUserLoginId = @userLoginId
			and c.businessownerLoginId = @businessownerLoginId
		and
		(c.Name LIKE '%'+@searchFilter+'%' OR
		  c.Price LIKE '%'+@searchFilter+'%' OR
		  cb.StartDate LIKE '%'+@searchFilter+'%' OR
		  cb.EndDate LIKE '%'+@searchFilter+'%' OR
		  b.Name LIKE '%'+@searchFilter+'%' OR
		  o.Id LIKE '%'+@searchFilter+'%' OR
		  o.TotalAmount LIKE '%'+@searchFilter+'%' OR
	    cb.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,cb.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #StudentClassBookingsForBO);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'BatchName' AND @sortOrder = 'ASC' THEN BatchName END,
				CASE WHEN @sorting = 'BatchName' AND @sortOrder = 'DESC' THEN BatchName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #StudentClassBookingsForBO
		order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'BatchName' AND @sortOrder = 'ASC' THEN BatchName END,
				CASE WHEN @sorting = 'BatchName' AND @sortOrder = 'DESC' THEN BatchName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #StudentClassBookingsForBO
	end
	-- Get Student Booked/Ordered Plans list for Business-Owner Student Detail
	else if(@mode=3)
	begin
		select pb.Id, pb.PlanId as PlanId, p.Name as PlanName, p.Description as PlanDescription, pb.PlanPrice, pb.PlanCompareAtPrice, pb.PlanDurationTypeId, pb.PlanDurationTypeName, pb.StartDate, pb.EndDate,pb.IsTransfered,pb.TransferPackageId, 
			p.PlanImage, dbo.GetPlanImageWithPath(p.PlanImage) as PlanImageWithPath,
		o.Id as OrderId, o.PaymentMethod as OrderPaymentMethod, o.TotalAmount as OrderTotalAmount, o.Status as OrderStatus, o.CreatedOn, (CONVERT(varchar, o.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #StudentPlanBookingsViewForBO
		from BusinessPlans p 
		inner join PlanBookings pb on p.Id = pb.PlanId 
		inner join Orders o on pb.OrderId = o.Id 
		where pb.StudentUserLoginId = @userLoginId
			and p.businessownerLoginId = @businessownerLoginId
		and
		(p.Name LIKE '%'+@searchFilter+'%' OR
		  pb.PlanPrice LIKE '%'+@searchFilter+'%' OR
		  pb.StartDate LIKE '%'+@searchFilter+'%' OR
		  pb.EndDate LIKE '%'+@searchFilter+'%' OR
		  pb.PlanDurationTypeName LIKE '%'+@searchFilter+'%' OR
		  o.Id LIKE '%'+@searchFilter+'%' OR
		  o.TotalAmount LIKE '%'+@searchFilter+'%' OR
	    o.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,o.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #StudentPlanBookingsViewForBO);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'PlanPrice' AND @sortOrder = 'ASC' THEN PlanPrice END,
				CASE WHEN @sorting = 'PlanPrice' AND @sortOrder = 'DESC' THEN PlanPrice END DESC,
				CASE WHEN @sorting = 'PlanDurationTypeName' AND @sortOrder = 'ASC' THEN PlanDurationTypeName END,
				CASE WHEN @sorting = 'PlanDurationTypeName' AND @sortOrder = 'DESC' THEN PlanDurationTypeName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #StudentPlanBookingsViewForBO
		order by
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'PlanPrice' AND @sortOrder = 'ASC' THEN PlanPrice END,
				CASE WHEN @sorting = 'PlanPrice' AND @sortOrder = 'DESC' THEN PlanPrice END DESC,
				CASE WHEN @sorting = 'PlanDurationTypeName' AND @sortOrder = 'ASC' THEN PlanDurationTypeName END,
				CASE WHEN @sorting = 'PlanDurationTypeName' AND @sortOrder = 'DESC' THEN PlanDurationTypeName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #StudentPlanBookingsViewForBO

	end
	-- Get Student Booked/Ordered Events list for Business-Owner Student Detail
	else if(@mode=4)
	begin
		select eb.Id, eb.UserLoginId as StudentUserLoginId, eb.EventId, eb.EventTicketQRCode, e.Title as EventTitle, e.ShortDescription as EventShortDescription, e.Price as EventPrice, e.FeaturedImage, dbo.GetEventImageWithPath(e.FeaturedImage) as EventFeaturedImageWithPath, e.StartDate, e.EndDate, 
		o.Id as OrderId, o.PaymentMethod as OrderPaymentMethod, o.TotalAmount as OrderTotalAmount, o.Status as OrderStatus, o.CreatedOn, (CONVERT(varchar, o.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #StudentEventBookingsViewForBO
		from Events e 
		inner join EventBookings eb on e.Id = eb.EventId 
		inner join Orders o on eb.OrderId = o.Id 
		where eb.UserLoginId = @userLoginId
			and e.UserLoginId = @businessOwnerLoginId
		and
		(e.Title LIKE '%'+@searchFilter+'%' OR
		  e.Price LIKE '%'+@searchFilter+'%' OR
		  e.StartDate LIKE '%'+@searchFilter+'%' OR
		  e.EndDate LIKE '%'+@searchFilter+'%' OR
		  o.Id LIKE '%'+@searchFilter+'%' OR
		  o.TotalAmount LIKE '%'+@searchFilter+'%' OR
	    o.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,o.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #StudentEventBookingsViewForBO);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'EventTitle' AND @sortOrder = 'ASC' THEN EventTitle END,
				CASE WHEN @sorting = 'EventTitle' AND @sortOrder = 'DESC' THEN EventTitle END DESC,
				CASE WHEN @sorting = 'EventPrice' AND @sortOrder = 'ASC' THEN EventPrice END,
				CASE WHEN @sorting = 'EventPrice' AND @sortOrder = 'DESC' THEN EventPrice END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #StudentEventBookingsViewForBO
		order by
				CASE WHEN @sorting = 'EventTitle' AND @sortOrder = 'ASC' THEN EventTitle END,
				CASE WHEN @sorting = 'EventTitle' AND @sortOrder = 'DESC' THEN EventTitle END DESC,
				CASE WHEN @sorting = 'EventPrice' AND @sortOrder = 'ASC' THEN EventPrice END,
				CASE WHEN @sorting = 'EventPrice' AND @sortOrder = 'DESC' THEN EventPrice END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #StudentEventBookingsViewForBO

	end
	-- Get Student Booked/Ordered Training list for Business-Owner Student Detail
	else if(@mode = 5)
	begin
		select tb.Id, tb.UserLoginId as StudentUserLoginId, tb.TrainingId, t.TrainingName, t.ShortDescription as TrainingShortDescription, tb.Price, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath, tb.StartDate, tb.EndDate, 
		o.Id as OrderId, o.PaymentMethod as OrderPaymentMethod, o.TotalAmount as OrderTotalAmount, o.Status as OrderStatus, o.CreatedOn, (CONVERT(varchar, o.CreatedOn,106)) as CreatedOn_FormatDate
		INTO #StudentTrainingBookingsViewForBO
		from Trainings t 
		inner join TrainingBookings tb on t.Id = tb.TrainingId 
		inner join Orders o on tb.OrderId = o.Id 
		where tb.UserLoginId = @userLoginId
			and t.UserLoginId = @businessOwnerLoginId
		and
		(t.TrainingName LIKE '%'+@searchFilter+'%' OR
		  tb.Price LIKE '%'+@searchFilter+'%' OR
		  tb.StartDate LIKE '%'+@searchFilter+'%' OR
		  tb.EndDate LIKE '%'+@searchFilter+'%' OR
		  o.Id LIKE '%'+@searchFilter+'%' OR
		  o.TotalAmount LIKE '%'+@searchFilter+'%' OR
	    o.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,o.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #StudentTrainingBookingsViewForBO);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #StudentTrainingBookingsViewForBO
		order by
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'ASC' THEN OrderTotalAmount END,
				CASE WHEN @sorting = 'OrderTotalAmount' AND @sortOrder = 'DESC' THEN OrderTotalAmount END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #StudentTrainingBookingsViewForBO

	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStudentFavourite]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageStudentFavourite]
(
@id bigint,
@studentLoginId bigint,
@favouriteUserLoginId bigint,
@mode int
)
as 
begin
	-- add/remove Favourite-User-Login 
    if(@mode=1)
	begin
		if not exists(select ul.Id from UserLogins ul where ul.Id = @favouriteUserLoginId and ul.IsDeleted = 0)
		begin
			select -1 as ret, 'Sorry, user not found!' as responseMessage,'VisitorPanel' as resourceFileName, 'UserNotFound_ErrorMessage' as resourceKey
		end
		else if exists(select sf.Id from StudentFavourites sf where sf.StudentLoginId = @studentLoginId and  sf.FavouriteUserLoginId = @favouriteUserLoginId)
		begin
			Delete from StudentFavourites Where StudentLoginId =  @studentLoginId and FavouriteUserLoginId = @favouriteUserLoginId
			select 2 as ret, 'Removed from Favourites!' as responseMessage,'VisitorPanel' as resourceFileName, 'RemovedFavourites_ErrorMessage' as resourceKey, @favouriteUserLoginId as Id
		end
		else
		begin
			insert into StudentFavourites(StudentLoginId,FavouriteUserLoginId)values(@studentLoginId,@favouriteUserLoginId)
			select 1 as ret, ' Added to Favourites!' as responseMessage,'VisitorPanel' as resourceFileName, 'AddedFavourites_ErrorMessage' as resourceKey, @favouriteUserLoginId as Id
		end
	end
	-- Get Student Favourites List
	else if(@mode = 2)
	begin
		Select t.FirstName, t.LastName, t.BusinessName from (
			select s.FirstName, s.LastName, bo.BusinessName from StudentFavourites sf inner join Staffs s on sf.FavouriteUserLoginId = s.UserLoginId inner join BusinessOwners bo on s.BusinessOwnerLoginId = bo.UserLoginId where sf.StudentLoginId = @studentLoginId
			UNION ALL
			select bo.FirstName, bo.LastName, bo.BusinessName from StudentFavourites sf inner join BusinessOwners bo on sf.FavouriteUserLoginId = bo.UserLoginId where sf.StudentLoginId = @studentLoginId
		) t
	end
	--Get Favourites Business-Owners Details List
	else if(@mode = 3)	
	begin
		select sf.FavouriteUserLoginId,sf.StudentLoginId,bo.BusinessName,FirstName,bo.LastName,dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ImageWithPath, bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName,
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
                bo.Verified,
				dbo.GetBusinessVerifiedTextValue(bo.Verified) as VerifiedTextValue,
				(select count(*) from StudentFavourites sf where sf.FavouriteUserLoginId = ul.Id) as FavouritesCount
		from StudentFavourites sf 
		inner join UserLogins ul on sf.FavouriteUserLoginId = ul.Id 
		inner join BusinessOwners bo on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where sf.StudentLoginId = @studentLoginId and bsc.CategoryKey != 'instructor'
	end
	---To Remove Business Favorite
	else if(@mode = 4)
	begin
		Delete from StudentFavourites Where StudentLoginId =  @studentLoginId and FavouriteUserLoginId = @favouriteUserLoginId
		select 1 as ret, 'Removed from Favourites!' as responseMessage,'VisitorPanel' as resourceFileName, 'RemovedFavourites_ErrorMessage' as resourceKey,@favouriteUserLoginId as Id
	end
	---- To Get FavoriteUserLoginId List
	else if(@mode=5)
	begin 
		select  sf.Id,sf.FavouriteUserLoginId  from StudentFavourites sf 
		inner join UserLogins ul on sf.StudentLoginId = ul.Id  
	end
	---To Get FavouriteLoginId Only Instructor 
	else if (@mode= 6)
	begin
		--select sf.FavouriteUserLoginId,bo.FirstName,bo.LastName,dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as BusinessProfileImageWithPath,
		--c.Name as ClassName,c.Description,CASE 
		--WHEN c.Price IS NOT NULL THEN c.Price 
		--ELSE '0' 
		--END AS Price 
		--from StudentFavourites sf 
		--inner join BusinessOwners bo on sf.FavouriteUserLoginId = bo.UserLoginId
		--inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		--left join Classes c on bo.UserLoginId = c.InstructorLoginId
		--where bc.CategoryKey = 'instructor'

		SELECT sf.FavouriteUserLoginId, bo.FirstName, bo.LastName, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) AS BusinessProfileImageWithPath,
		subquery.ClassName, subquery.Description, CASE WHEN subquery.Price IS NOT NULL THEN subquery.Price ELSE CAST('0' AS DECIMAL(10, 2)) END AS Price,subquery.ClassDays
		FROM StudentFavourites sf
		INNER JOIN BusinessOwners bo ON sf.FavouriteUserLoginId = bo.UserLoginId
		INNER JOIN BusinessCategories bc ON bo.BusinessCategoryId = bc.Id
		LEFT JOIN (
			SELECT top 1 b.InstructorLoginId, c.Name AS ClassName, c.Description,
			c.Price,c.ClassDays 
			FROM Classes c 
			inner join ClassBatches cb on c.Id = cb.ClassId
			inner join [Batches] b on cb.BatchId = b.Id
		) AS subquery ON bo.UserLoginId = subquery.InstructorLoginId
		WHERE bc.CategoryKey = 'instructor' and ClassDays LIKE '%' + UPPER(DATENAME(weekday, GETDATE())) + '%';

	end
	-- Check where User Favourite status 
	else if(@mode=7)
	begin
		if exists(select * from StudentFavourites Where StudentLoginId =  @studentLoginId and FavouriteUserLoginId = @favouriteUserLoginId)
		begin 
			select 1
		end
		else 
		begin
			select 0
		end
	end
	--Get Favourites Business-Instructors Details List Only
	else if(@mode = 8)	
	begin
		select sf.FavouriteUserLoginId,sf.StudentLoginId,bo.BusinessName,FirstName,bo.LastName,dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as ImageWithPath, bc.Name as BusinessCategoryName, bsc.Name as BusinessSubCategoryName,
		cast( (select case when Count(*) = 0 then 0 else cast(SUM(r.rating) as decimal(18,2))/Count(*) end  from Reviews r where r.ItemId = bo.UserLoginId and r.ItemType = 'Business') as decimal(18,2)) as AverageRating,
		ul.IsCertified as IsCertified,
		bo.Verified as Verified,
		(select count(*) from StudentFavourites sf where sf.FavouriteUserLoginId = ul.Id) as FavouritesCount
		from StudentFavourites sf 
		inner join UserLogins ul on sf.FavouriteUserLoginId = ul.Id 
		inner join BusinessOwners bo on bo.UserLoginId = ul.Id
		inner join BusinessCategories bc on bo.BusinessCategoryId = bc.Id
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where sf.StudentLoginId = @studentLoginId and bsc.CategoryKey = 'instructor'
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageStudentProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_ManageStudentProfile]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@UserLoginId bigint,
	@mode int
)
as 
begin 
	--Get Student Profile by login-id ---
     if(@mode=1)
	 begin
		select  S.Id,S.FirstName,S.LastName,S.ProfileImage,
		dbo.GetStudentImageWithPath(S.ProfileImage) as ProfileImageWithPath, ul.Email 
		from Students S 
		inner join UserLogins ul on S.UserLoginId = ul.Id 
		where ul.IsDeleted = 0 and s.UserLoginId = @UserLoginId
	 end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSubAdmin]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageSubAdmin]
(
	@id bigint,
	@userLoginId bigint,
	@mode int 
)
as
begin
    -- To Get SubAdmin Detail By Id
    if(@mode=1)
    begin
	    select  sa.Id,sa.UserLoginId,sa.FirstName,sa.LastName,sa.ProfileImage,dbo.GetSubAdminProfileImageWithPath(sa.ProfileImage) as ProfileImageWithPath,ul.Pincode,ul.Password,ul.Email,ul.Address,ul.City,ul.Country,ul.State,ul.LandMark
		from SubAdmins sa
		inner join UserLogins ul on sa.UserLoginId = ul.Id
		where sa.Id = @id
    end	
	-- Get  All SubAdmin Detail 
	else if(@mode=2)
	begin
	    select  sa.Id,sa.FirstName,sa.LastName,sa.ProfileImage,dbo.GetSubAdminProfileImageWithPath(sa.ProfileImage) as ProfileImageWithPath,ul.Email
		from SubAdmins sa
		inner join UserLogins ul on sa.UserLoginId = ul.Id
		where UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSubAdmin_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageSubAdmin_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  SubAdmin in Super Admin
	if(@mode=1)
	begin
		select  sa.Id,sa.FirstName+''+sa.LastName as Name,dbo.GetSubAdminProfileImageWithPath(sa.ProfileImage) as ProfileImageWithPath, ul.Email,ul.Address,sa.CreatedOn, (CONVERT(varchar, sa.CreatedOn,106)) as CreatedOn_FormatDate 
		 INTO #AllSubAdminByBusinessAdmin
		from SubAdmins sa
		inner join UserLogins ul on sa.UserLoginId = ul.Id 
		where sa.UserLoginId = ul.Id and sa.IsDeleted = 0		
		and
		(sa.FirstName + ' ' + sa.LastName LIKE '%'+@searchFilter+'%' OR
	     ul.Email LIKE '%'+@searchFilter+'%' OR
		  ul.Address LIKE '%'+@searchFilter+'%' OR
		   sa.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,sa.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllSubAdminByBusinessAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'ASC' THEN Address END,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'DESC' THEN Address END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllSubAdminByBusinessAdmin
		order by
		  CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'ASC' THEN Address END,
				CASE WHEN @sorting = 'Address' AND @sortOrder = 'DESC' THEN Address END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllSubAdminByBusinessAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSubAdminProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageSubAdminProfile]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get SubAdmin Profile data by SubAdmin-Login-Id
	if(@mode=1)
	begin
		select s.FirstName, s.LastName, s.ProfileImage,
		dbo.GetSubAdminProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,
		ul.PhoneNumber, ul.Email
		from SubAdmins s
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where s.UserLoginId =  @userLoginId
	end
	--- Get SubAdmin Profile Detail
	else if(@mode=2)
	begin
	   select s.FirstName, s.LastName, s.ProfileImage,
		dbo.GetSubAdminProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath
		from SubAdmins s
		where s.UserLoginId = @userLoginId
	end
end


GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSuperAdminDashBoard]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ManageSuperAdminDashBoard]
(
    @id bigint,
    @userLoginId bigint,
    @mode int
)
AS
begin
    if (@mode = 1)
    begin
        declare @totalAdvertisements bigint;
        declare @totalCertificates bigint;
		declare @totalBusiness bigint;
		declare @totalStudent bigint;
		declare @totalSubAdmin bigint;
		declare @totalPlans bigint;

        -- To Get Advertisement Detail
        select @totalAdvertisements = COUNT(Id)
		from Advertisements
        where IsDeleted = 0;

        -- To Get Certificate Detail
        select @totalCertificates = COUNT(Id)
        from Certificates
        where IsDeleted = 0;

		---To Get Business Detail 
		select @totalBusiness = COUNT (Id)
		from UserLogins ul where ul.RoleId = 4 and IsDeleted = 0;  

		--- To Get Student Detail
		select @totalStudent = COUNT (Id)
		from UserLogins ul where ul.RoleId = 3 and IsDeleted = 0;

		-- To Get SubAdmin Detail
		select @totalSubAdmin = COUNT (Id)
		from UserLogins ul where ul.RoleId = 2 and IsDeleted = 0;

		--- To Get MainPlan Detail
		select @totalPlans = COUNT (Id)
		from MainPlans mp where   mp.IsDeleted = 0;


        select @totalAdvertisements AS TotalAdvertisements, @totalCertificates AS TotalCertificates, @totalBusiness As TotalBusiness, @totalStudent As TotalStudent, @totalSubAdmin As TotalSubAdmin, @totalPlans As TotalPlans ;
    end
end;








GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSuperAdminProfile]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageSuperAdminProfile]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get SuperAdmin Profile data by SuperAdmin-Login-Id
	if(@mode=1)
	begin
		select s.FirstName, s.LastName, s.ProfileImage,
		dbo.GetSuperAdminProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,
		ul.PhoneNumber, ul.Email
		from SuperAdmins s
		inner join UserLogins ul on s.UserLoginId = ul.Id
		where s.UserLoginId = @userLoginId
	end
	--- Get SuperAdmin Profile Detail
	else if(@mode=2)
	begin
	   select s.FirstName, s.LastName, s.ProfileImage,
		dbo.GetSuperAdminProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath
		from SuperAdmins s
		where s.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageSuperAdminSponsors]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageSuperAdminSponsors] 
(
	@id bigint,
	@mode int
)
as
begin
	-- Get All Sponsors for Visitor-Panel
	if(@mode = 1)
	begin
		select sas.Id, sas.SponsorTitle, sas.SponsorLink, sas.SponsorIcon, dbo.GetSuperAdminSponsorImageWithPath(sas.SponsorIcon) as SponsorImageWithPath from SuperAdminSponsors sas where sas.IsDeleted = 0
	end
	--- Get Sponsor detail By Id 
	else if (@mode=2)
	begin
	    select sas.Id, sas.SponsorTitle, sas.SponsorLink, sas.SponsorIcon, dbo.GetSuperAdminSponsorImageWithPath(sas.SponsorIcon) as SponsorImageWithPath from SuperAdminSponsors sas where Id = @id
	end
	-- Get All Sponsors List
	if(@mode = 3)
	begin
		select sas.Id, sas.SponsorTitle, sas.SponsorLink, sas.SponsorIcon, dbo.GetSuperAdminSponsorImageWithPath(sas.SponsorIcon) as SponsorImageWithPath, sas.ShowOnHomePage from SuperAdminSponsors sas where sas.IsDeleted = 0
	end
	-- Get All Sponsors List for Home Page (Visibile only)
	if(@mode = 4)
	begin
		select sas.Id, sas.SponsorTitle, sas.SponsorLink, sas.SponsorIcon, dbo.GetSuperAdminSponsorImageWithPath(sas.SponsorIcon) as SponsorImageWithPath, sas.ShowOnHomePage 
		from SuperAdminSponsors sas 
		where sas.IsDeleted = 0 and sas.ShowOnHomePage = 1
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTraining]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageTraining]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get Instructor-Record-Detail-By-Id Into Staff with StaffCategories
	if(@mode=1)
	begin
		-- previous query
		--select s.Id,s.UserLoginId, s.FirstName +' '+ s.LastName  as InstructorName,sc.Name from Staffs s inner join StaffCategories sc on s.StaffCategoryId = sc.Id
		--where s.BusinessOwnerLoginId = @businessOwnerLoginId and sc.Name = 'Instructor'

		-- Select Instructors list by Staff-Category type is of instructor.
		--select s.Id,ul.Id as InstructorUserLoginId, s.FirstName +''+ s.LastName as InstructorName,sc.Name 
		--from Staffs s 
		--inner join UserLogins ul on s.MasterId = ul.MasterId 
		--inner join StaffCategories sc on s.StaffCategoryId = sc.Id
		--where s.BusinessOwnerLoginId = @businessOwnerLoginId and sc.Name = 'Instructor'

		-- Select Instructors list by Business-Owner-SubCategory type is of instructor.
		select s.Id,ul.Id as InstructorUserLoginId, s.FirstName +' '+ s.LastName as InstructorName,bsc.Name, bo.About,IsNull(ul.Address,'') as Address,s.ProfileImage,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as InstructorImageWithPath	 
		from Staffs s 
		inner join UserLogins ul on s.MasterId = ul.MasterId 
		inner join BusinessOwners bo on ul.Id = bo.UserLoginId
		inner join BusinessCategories bsc on bo.BusinessSubCategoryId = bsc.Id
		where s.BusinessOwnerLoginId = @businessOwnerLoginId and bsc.CategoryKey = 'instructor'
	end 
	-- Get Training-Record-Detail-By-Id
	else if(@mode=2)
	begin
		select t.Id,t.InstructorUserLoginId,t.TrainingName,t.ShortDescription,t.InstructorEmail,t.InstructorMobileNumber,t.InstructorAlternateNumber,t.IsPaid, t.Price,t.AdditionalPriceInformation,t.CenterName,t.Location,t.Address,t.City,t.State,t.Country,t.PinCode,t.LocationUrl,t.StartDate,t.EndDate,t.StartTime_24HF,t.EndTime_24HF,t.Description,t.MusicType,t.EnergyLevel,t.DanceStyle, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath,Duration,TrainingClassDays,TotalLectures,TotalClasses,Totalseats,AdditionalInformation,TrainingRules,TotalCredits,ExpectationDescription,BecomeInstructorDescription, IsNull(t.LicenseId,0), IsNull(t.LicenseBookingId, 0) as LicenseBookingId, IsNull(l.CertificateId, 0) as CertificateId
		from trainings t 
		left join Licenses l on t.LicenseId = l.Id
		left join Certificates c on l.CertificateId = c.Id
		Where t.Id = @id
	end
	-- Get Training Table-Data By Id
	else if(@mode=3)
	begin
		select * from Trainings t where t.Id = @id
	end
	-- Get All Business Trainings for Superadmin
	else if (@mode=4)
	begin 
		select sf.FirstName +''+ sf.LastName  as InstructorName, t.InstructorEmail,t.InstructorAlternateNumber,t.TrainingName,t.ShortDescription,t.StartDate,t.EndDate,t.Address,t.MusicType,t.EnergyLevel,t.DanceStyle
		from Trainings t 
		left join Staffs sf on t.InstructorUserLoginId = sf.UserLoginId 
		inner join BusinessOwners  bo on t.UserLoginId = bo.UserLoginId
		where t.UserLoginId = @userLoginId
	end
	else if(@mode=5)
	begin
	    select t.Id,DAY(t.StartDate) AS StartDay, DATENAME(MONTH,t.StartDate) AS StartMonth, DATENAME(dw, t.StartDate) AS Weeks, YEAR(t.StartDate) AS StartYear, t.InstructorUserLoginId,s.FirstName +''+ s.LastName as InstructorName,dbo.GetStaffProfileImageWithPath(s.ProfileImage) as ProfileImageWithPath,t.TrainingName,t.ShortDescription,t.InstructorEmail,t.InstructorMobileNumber,t.InstructorAlternateNumber,t.IsPaid, t.Price,t.AdditionalPriceInformation,t.CenterName,t.Location,t.Address,t.City,t.State,t.Country,t.PinCode,t.LocationUrl,t.StartDate,t.EndDate,t.StartTime_24HF,t.EndTime_24HF,t.Description,t.MusicType,t.EnergyLevel,t.DanceStyle, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath
		from trainings t
		inner join businessOwners bo on t.UserLoginId = bo.UserLoginId
		inner join Staffs s on t.InstructorUserLoginId = s.UserLoginId
		where bo.BusinessSubCategoryId = @id

	end
	--- To Get The Instructor Detail In Sports Page
	else if(@mode=6)
	begin
		SELECT s.Id, s.UserLoginId AS InstructorUserLoginId, 
		   s.FirstName + ' ' + s.LastName AS InstructorName,
		   bsc.Name AS BusinessCategoryName, 
		   dbo.GetStaffProfileImageWithPath(s.ProfileImage) AS ProfileImageWithPath, 
		   COUNT(*) AS TotalReviewsEntered, 
		   ISNULL(CAST(AVG(r.Rating) AS DECIMAL(18, 2)), 0) AS AverageRating, 
		   COALESCE(SUM(r.Rating), 0) AS TotalRating
		FROM Staffs s 
		INNER JOIN UserLogins ul ON s.MasterId = ul.MasterId 
		INNER JOIN BusinessOwners bo ON ul.Id = bo.UserLoginId 
		INNER JOIN BusinessCategories bsc ON bo.BusinessSubCategoryId = bsc.Id 
		LEFT JOIN Reviews r ON s.UserLoginId = r.ItemId 
		WHERE bo.BusinessSubCategoryId = @id
			  AND bsc.CategoryKey = 'instructor'
		GROUP BY s.Id, s.UserLoginId, s.FirstName, s.LastName, bsc.Name, dbo.GetStaffProfileImageWithPath(s.ProfileImage);
	end
	----Get Training Detail For certification
	else if(@mode=7)
	begin
	   SELECT   t.Id,t.TrainingName,t.UserLoginId,t.ShortDescription, t.Price, t.StartDate, DAY(t.StartDate) AS StartDay, DATENAME(MONTH,t.StartDate) AS StartMonth, DATENAME(dw, t.StartDate) AS Weeks, YEAR(t.StartDate) AS StartYear, t.EndDate, CASE  WHEN DATEPART(HOUR, t.StartTime_24HF) >= 12 THEN CONVERT(VARCHAR(5), t.StartTime_24HF, 108) + ' PM'  ELSE CONVERT(VARCHAR(5), t.StartTime_24HF, 108) + ' AM' END AS FormattedStartTime, t.EndTime_24HF, CASE WHEN DATEPART(HOUR, t.EndTime_24HF) >= 12 THEN CONVERT(VARCHAR(5), t.EndTime_24HF, 108) + ' PM' ELSE CONVERT(VARCHAR(5), t.EndTime_24HF, 108) + ' AM' END AS FormattedEndTime,t.Duration,t.TotalLectures,t.TotalCredits,t.TrainingClassDays,t.Totalseats,t.TotalClasses,t.Location, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath
          FROM 
          Trainings t where t.Id = @id 
	end
	----Get Instructor Detail 
	else if(@mode=8)
	begin
	    select t.Id,ul.IsCertified,t.TrainingName,t.InstructorMobileNumber,t.ShortDescription,t.Location, ISNULL(sf.FirstName + ' ' + sf.LastName, '') as InstructorName,t.Address, sf.ProfileImage,dbo.GetStaffProfileImageWithPath(sf.ProfileImage) as ProfileImageWithPath
		from Trainings t 
		Left join Staffs sf on t.InstructorUserLoginId = sf.UserLoginId 
		Left join UserLogins ul on t.InstructorUserLoginId = ul.Id
		where t.Id = @id
	end
	----To Get Training Description Detail
	else if(@mode=9)
	begin
	    select t.Id,t.AdditionalInformation,t.ExpectationDescription,t.BecomeInstructorDescription,TrainingRules  from Trainings t where t.Id = @id
	end
	-- Get All Avalialbe Trainings for booking
	else if(@mode=10)
	begin
		select t.*, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath 
		from Trainings t
		where t.UserLoginId = @businessOwnerLoginId
		and t.IsDeleted = 0
		and t.Status = 1
		and cast(t.EndDate as datetime) > GETUTCDATE()
	end
	-- Get All Trainings for Home Page (ShowOnHomePage)
	else if(@mode=11)
	begin
		select t.Id, t.UserLoginId, t.TrainingName, t.ShortDescription, t.StartDate, t.EndDate, t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath 
		from Trainings t 
		where t.IsDeleted = 0 
		and t.Status = 1 
		and t.ShowOnHomePage = 1
		and GETUTCDATE() <= t.EndDate_DateTimeFormat
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTraining_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageTraining_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Trainings in business owner
	if(@mode=1)
	begin
		select distinct  t.Id, I.FirstName +' '+ I.LastName  as InstructorName , t.TrainingName, t.StartDate, t.EndDate,t.Price,t.CreatedOn, (CONVERT(varchar, t.CreatedOn,106)) as CreatedOn_FormatDate, (select Count(*) from TrainingBookings tb where tb.TrainingId = t.Id) as BookingsCount,
		t.InstructorUserLoginId,
		t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath,
		dbo.GetBusinessProfileImageWithPath(I.ProfileImage) as InstructorProfileImageWithPath,
		 dbo.GetBusinessProfileImageWithPath(I.BusinessLogo) as InstructorBusinessLogoWithPath
		 INTO #AllTrainingByBusinessOwner
		from Trainings t
		inner join UserLogins ul on t.InstructorUserLoginId = ul.Id
		inner join BusinessOwners I  on t.InstructorUserLoginId = I.UserLoginId 
		inner join Staffs s on ul.MasterId = s.MasterId 
		where t.UserLoginId = @businessOwnerLoginId and t.IsDeleted = 0		
		and
		(s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
	     t.TrainingName LIKE '%'+@searchFilter+'%' OR
		  t.StartDate LIKE '%'+@searchFilter+'%' OR
		  t.EndDate LIKE '%'+@searchFilter+'%' OR
		  t.Price LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,t.StartDate,106)) LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,t.EndDate,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTrainingByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTrainingByBusinessOwner
		order by
		    CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTrainingByBusinessOwner
	end
	-- Get All Trainings of business owner for Super-Admin-Panel
	if(@mode=2)
	begin
		select distinct  t.Id, s.FirstName +' '+ s.LastName  as InstructorName , t.TrainingName, t.StartDate, t.EndDate,t.Price,t.CreatedOn, (CONVERT(varchar, t.CreatedOn,106)) as CreatedOn_FormatDate, t.ShortDescription, t.Status,
		--(select Count(*) from TrainingBookings tb where tb.TrainingId = t.Id) as BookingsCount,
		t.InstructorUserLoginId, t.ShowOnHomePage,
		t.TrainingImage, dbo.GetTrainingImageWithPath(t.TrainingImage) as TrainingImageWithPath,
		dbo.GetBusinessProfileImageWithPath(I.ProfileImage) as InstructorProfileImageWithPath,
		 dbo.GetBusinessProfileImageWithPath(I.BusinessLogo) as InstructorBusinessLogoWithPath,
		 bo.UserLoginId as BusinessOwnerLoginId, bo.FirstName, bo.LastName, bo.BusinessName, bo.BusinessLogo, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath, bo.ProfileImage as BusinessProfileImage, dbo.GetBusinessProfileImageWithPath(bo.ProfileImage) as BusinessProfileImageWithPath
		 INTO #AllTrainingOfBusinessForSuperAdminPanel
		from Trainings t
		inner join UserLogins ul on t.InstructorUserLoginId = ul.Id
		inner join BusinessOwners I  on t.InstructorUserLoginId = I.UserLoginId 
		inner join Staffs s on ul.MasterId = s.MasterId 
		inner join BusinessOwners bo on t.UserLoginId = bo.UserLoginId
		where t.IsDeleted = 0		
		and
		(s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
		bo.BusinessName LIKE '%' + @searchFilter + '%' OR
	     t.TrainingName LIKE '%'+@searchFilter+'%' OR
		  t.StartDate LIKE '%'+@searchFilter+'%' OR
		  t.EndDate LIKE '%'+@searchFilter+'%' OR
		  t.Price LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,t.StartDate,106)) LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,t.EndDate,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTrainingOfBusinessForSuperAdminPanel);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTrainingOfBusinessForSuperAdminPanel
		order by
		    CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'ASC' THEN InstructorName END,
				CASE WHEN @sorting = 'InstructorName' AND @sortOrder = 'DESC' THEN InstructorName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'ASC' THEN ShowOnHomePage END,
				CASE WHEN @sorting = 'ShowOnHomePage' AND @sortOrder = 'DESC' THEN ShowOnHomePage END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTrainingOfBusinessForSuperAdminPanel
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTrainingBooking]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageTrainingBooking]
(
	@id bigint,
	@userLoginId bigint, 
	@trainingId bigint,
	@mode int
)
as
begin
	-- Get Training Booking Detail with Order by User [having order status Paid]
	if(@mode=1)
	begin
		select * from TrainingBookings tb 
		inner join Orders o on tb.OrderId = o.Id
		where tb.UserLoginId = @userLoginId and tb.TrainingId = @trainingId and o.Status = 1 order by tb.Id desc
	end
	-- Get Training Booking Detail by Training-Booking-Id
	else if(@mode=2)
	begin
		select *, (CONVERT(varchar, tb.CreatedOn,106)) as CreatedOn_FormatDate from TrainingBookings tb where tb.Id = @id
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTrainingBooking_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageTrainingBooking_Pagination]
(
    @id bigint,
	@trainingId bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Training-Bookings of Training in business owner
	if(@mode=1)
	begin
		select tb.*, (CONVERT(varchar, tb.CreatedOn,106)) as CreatedOn_FormatDate, 
			s.UserLoginId as StudentUserLoginId, s.FirstName + ' ' + s.LastName as StudentName, s.ProfileImage as StudentProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as StudentProfileImageWithPath, s.BusinessStudentProfileImage, dbo.GetStudentImageWithPath(s.BusinessStudentProfileImage) as BusinessStudentProfileImageWithPath, o.Status as OrderStatus
		 INTO #AllStudentTrainingBookingForBO
		from TrainingBookings tb
		inner join Trainings t on tb.TrainingId = t.Id
		inner join UserLogins ul on tb.UserLoginId = ul.Id
		inner join Students s on tb.UserLoginId = s.UserLoginId
		inner join Orders o on tb.OrderId = o.Id
		where tb.TrainingId = @trainingId 
		and t.UserLoginId = @businessOwnerLoginId 
		and t.IsDeleted = 0
		and
		(s.FirstName + ' ' + s.LastName LIKE '%'+@searchFilter+'%' OR
	     tb.TrainingName LIKE '%'+@searchFilter+'%' OR
		  tb.StartDate LIKE '%'+@searchFilter+'%' OR
		  tb.EndDate LIKE '%'+@searchFilter+'%' OR
		  tb.Price LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,tb.StartDate,106)) LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,tb.EndDate,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStudentTrainingBookingForBO);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'OrderId' AND @sortOrder = 'ASC' THEN OrderId END,
				CASE WHEN @sorting = 'OrderId' AND @sortOrder = 'DESC' THEN OrderId END DESC,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'IsCompleted' AND @sortOrder = 'ASC' THEN IsCompleted END,
				CASE WHEN @sorting = 'IsCompleted' AND @sortOrder = 'DESC' THEN IsCompleted END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStudentTrainingBookingForBO
		order by
				CASE WHEN @sorting = 'OrderId' AND @sortOrder = 'ASC' THEN OrderId END,
				CASE WHEN @sorting = 'OrderId' AND @sortOrder = 'DESC' THEN OrderId END DESC,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'ASC' THEN StudentName END,
				CASE WHEN @sorting = 'StudentName' AND @sortOrder = 'DESC' THEN StudentName END DESC,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'ASC' THEN TrainingName END,
				CASE WHEN @sorting = 'TrainingName' AND @sortOrder = 'DESC' THEN TrainingName END DESC,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'ASC' THEN StartDate END,
				CASE WHEN @sorting = 'StartDate' AND @sortOrder = 'DESC' THEN StartDate END DESC,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'ASC' THEN EndDate END,
				CASE WHEN @sorting = 'EndDate' AND @sortOrder = 'DESC' THEN EndDate END DESC,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'ASC' THEN Price END,
				CASE WHEN @sorting = 'Price' AND @sortOrder = 'DESC' THEN Price END DESC,
				CASE WHEN @sorting = 'IsCompleted' AND @sortOrder = 'ASC' THEN IsCompleted END,
				CASE WHEN @sorting = 'IsCompleted' AND @sortOrder = 'DESC' THEN IsCompleted END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStudentTrainingBookingForBO
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTransferPackage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageTransferPackage]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@mode int
)
as 
begin
	-- To Get the Student List 
	if(@mode = 1)
	begin
		select  s.Id,s.UserLoginId ,s.FirstName +''+ s.LastName as StudentName	
		from Students s 
	end
	-- To Get PlanBookings List  
	else if(@mode=2)
	begin
		SELECT pb.Id, pb.PlanName, pb.PlanPrice, pb.PlanId, bp.BusinessOwnerLoginId
		FROM PlanBookings pb
		INNER JOIN BusinessPlans bp ON pb.PlanId = bp.Id
		WHERE pb.StudentUserLoginId = @userLoginId and CAST(pb.EndDate_DateTimeFormat AS DATE) > CAST(GETUTCDATE() AS DATE) 
		and pb.Id not in (select PlanBookingId from TransferPackages tp where tp.TransferFromUserloginId = @userLoginId and tp.TransferStatus in (0,1)) -- excluede pending or accepted plan-bookings from the list
	end
	-- To Get Business List in Visitor-Panel 
	else if(@mode=3)
	begin
		select bo.Id,bo.UserLoginId, bo.FirstName+''+bo.LastName as BusinessName from BusinessOwners bo inner join UserLogins ul on bo.UserLoginId = ul.Id where ul.IsDeleted = 0
	end
	-- To Get Transfer Package Detail in Business-Panel 
	else if(@mode=4)
	begin
	    SELECT tp.Id,tp.TransferDate, tp.TransferReason,  tp.TransferStatus,  tp.RejectionReason,  tp.TransferToUserLoginId, bp.PlanName, tp.CreatedOn, tp.TransferType,
		CONVERT(varchar, tp.CreatedOn, 106) AS CreatedOn_FormatDate,
		CONCAT(sf.FirstName, ' ', sf.LastName) AS TransferFromStudentName,
		CONCAT(st.FirstName, ' ', st.LastName) AS TransferToStudentName,
		CONCAT(bo.FirstName, ' ', bo.LastName) AS BusinessName,
		dbo.GetStudentImageWithPath(st.ProfileImage) as TrasferToStudentProfileImageWithPath,
		dbo.GetStudentImageWithPath(sf.ProfileImage) as TrasferFromStudentProfileImageWithPath,
		CONCAT(bo.FirstName, ' ', bo.LastName) AS TrasferToBusinessName,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as TransferToBusinessLogoWithPath
		FROM TransferPackages tp
		LEFT JOIN PlanBookings bp ON tp.PlanBookingId = bp.Id
		LEFT JOIN Students sf ON tp.TransferFromUserLoginId = sf.UserLoginId
		LEFT JOIN Students st ON tp.TransferToUserLoginId = st.UserLoginId
		LEFT JOIN BusinessOwners bo ON tp.BusinessOwnerLoginId = bo.UserLoginId
		where tp.Id = @id
	end
	-- To change the Notification Status in Business-panel 
	else if(@mode=5)
	begin
		update NotificationTransfers set Status = (case Status when 1 then 0 else 1 end) where Id = @id

		select 1 as ret, 'Notification Transfer status has been successfully updated!' as responseMessage, 'BusinessPanel' as resourceFileName, 'NotificationTransferStatus_SuccessMessage' as resourceKey
	end
	-- To Get Business List using to send the Notification In Business -Panel 
	else if(@mode=6)
	begin 
		 SELECT bo.BusinessName + ' ' + (bo.FirstName + ' ' + bo.LastName) AS BusinessName, ul.Id
		FROM BusinessOwners bo
		JOIN UserLogins ul ON bo.UserLoginId = ul.Id
		WHERE ul.Id <> @businessOwnerLoginId and ul.IsDeleted = 0
	end
	-- Get All Transfer-Package Request List having Transfer Status 0 or 1
	else if(@mode=7)
	begin
	    SELECT tp.Id,tp.TransferDate, tp.TransferReason,  tp.TransferStatus,  tp.RejectionReason,		tp.TransferToUserLoginId, bp.PlanName, tp.CreatedOn,
			CONVERT(varchar, tp.CreatedOn, 106) AS CreatedOn_FormatDate,
			CONCAT(sf.FirstName, ' ', sf.LastName) AS TransferFromStudentName,
			CONCAT(st.FirstName, ' ', st.LastName) AS TransferToStudentName,
			CONCAT(bo.FirstName, ' ', bo.LastName) AS BusinessName
		FROM TransferPackages tp
		LEFT JOIN PlanBookings bp ON tp.PlanBookingId = bp.Id
		LEFT JOIN Students sf ON tp.TransferFromUserLoginId = sf.UserLoginId
		LEFT JOIN Students st ON tp.TransferToUserLoginId = st.UserLoginId
		LEFT JOIN BusinessOwners bo ON tp.BusinessOwnerLoginId = bo.UserLoginId
		where tp.TransferFromUserLoginId = @userLoginId AND (tp.TransferStatus = 0 OR tp.TransferStatus = 1)
	end
	-- Get All Transfer-Package Request List having Transfer Status 0
	else if(@mode=8)
	begin
	    SELECT tp.Id,tp.TransferDate, tp.TransferReason,  tp.TransferStatus,  tp.RejectionReason,		tp.TransferToUserLoginId, bp.PlanName, tp.CreatedOn,
			CONVERT(varchar, tp.CreatedOn, 106) AS CreatedOn_FormatDate,
			CONCAT(sf.FirstName, ' ', sf.LastName) AS TransferFromStudentName,
			CONCAT(st.FirstName, ' ', st.LastName) AS TransferToStudentName,
			CONCAT(bo.FirstName, ' ', bo.LastName) AS BusinessName
		FROM TransferPackages tp
		LEFT JOIN PlanBookings bp ON tp.PlanBookingId = bp.Id
		LEFT JOIN Students sf ON tp.TransferFromUserLoginId = sf.UserLoginId
		LEFT JOIN Students st ON tp.TransferToUserLoginId = st.UserLoginId
		LEFT JOIN BusinessOwners bo ON tp.BusinessOwnerLoginId = bo.UserLoginId
		where tp.TransferFromUserLoginId = @userLoginId AND tp.TransferStatus = 0
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageTransferPackageDetailForUser_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageTransferPackageDetailForUser_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Studdent List PlanBooking in business owner
	if(@mode=1)
	begin
		SELECT tp.Id,tp.BusinessOwnerLoginId,tp.TransferDate, tp.TransferReason,  tp.TransferStatus,  tp.RejectionReason,  tp.TransferToUserLoginId, bp.PlanName, tp.CreatedOn, tp.TransferType,
			CONVERT(varchar, tp.CreatedOn, 106) AS CreatedOn_FormatDate,
			CONCAT(sf.FirstName, ' ', sf.LastName) AS TransferFromStudentName,
			CONCAT(st.FirstName, ' ', st.LastName) AS TransferToStudentName,
			CONCAT(planBO.FirstName, ' ', planBO.LastName) AS BusinessName,
			dbo.GetBusinessLogoImageWithPath(planBO.BusinessLogo) AS BusinessLogoWithPath,
			dbo.GetStudentImageWithPath(st.ProfileImage) as TrasferToStudentProfileImageWithPath,
			dbo.GetStudentImageWithPath(sf.ProfileImage) as TrasferFromStudentProfileImageWithPath,
			CONCAT(bo.FirstName, ' ', bo.LastName) AS TrasferToBusinessName,
			dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as TransferToBusinessLogoWithPath
			INTO #AllTransferPackageByBusinessOwner
		FROM TransferPackages tp
		inner JOIN PlanBookings bp ON tp.PlanBookingId = bp.Id
		Inner JOIN Students sf ON tp.TransferFromUserLoginId = sf.UserLoginId
		inner join BusinessOwners planBO on tp.BusinessOwnerLoginId = planBO.UserLoginId
		left JOIN Students st ON tp.TransferToUserLoginId = st.UserLoginId
		left JOIN BusinessOwners bo ON tp.TransferToUserLoginId = bo.UserLoginId
		Where sf.UserLoginId = @userLoginId
		and
		(sf.FirstName + ' ' + sf.LastName LIKE '%'+@searchFilter+'%' OR
		st.FirstName + ' ' + st.LastName LIKE '%'+@searchFilter+'%' OR
		bo.FirstName + ''+bo.LastName LIKE '%'+@searchFilter+'%' OR
		bp.PlanName LIKE '%'+@searchFilter+'%' OR
		tp.TransferDate LIKE '%'+@searchFilter+'%' OR
		tp.TransferStatus LIKE '%'+@searchFilter+'%' OR
	    tp.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,tp.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTransferPackageByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'ASC' THEN TransferFromStudentName END,
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'DESC' THEN TransferFromStudentName END DESC,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'ASC' THEN TransferToStudentName END,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'DESC' THEN TransferToStudentName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'ASC' THEN TransferDate END,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'DESC' THEN TransferDate END DESC,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'ASC' THEN TransferStatus END,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'DESC' THEN TransferStatus END DESC,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'ASC' THEN TransferType END,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'DESC' THEN TransferType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTransferPackageByBusinessOwner
		order by
		       	CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'ASC' THEN TransferFromStudentName END,
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'DESC' THEN TransferFromStudentName END DESC,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'ASC' THEN TransferToStudentName END,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'DESC' THEN TransferToStudentName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'ASC' THEN TransferDate END,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'DESC' THEN TransferDate END DESC,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'ASC' THEN TransferStatus END,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'DESC' THEN TransferStatus END DESC,	
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'ASC' THEN TransferType END,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'DESC' THEN TransferType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTransferPackageByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUniversityDetail_PPCMeta]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUniversityDetail_PPCMeta]
(
@id bigint,
@businessOwnerLoginId bigint,
@userLoginId bigint,
@mode int
)
as
begin
   if(@mode=1)
   begin
       select bu.Id,bu.ProfilePageTypeId,bu.BusinessOwnerLoginId,bu.Qualification,bu.StartDate,bu.EndDate,bu.UniversityName,bu.UniversityLogo,dbo.GetTeacherUniversityLogoWithPath(bu.UniversityLogo) as UniversityLogoWithPath from BusinessUniversities bu where bu.Id = @id  
   end
   else if (@mode=2)
   begin
       SELECT bu.Id,  bu.ProfilePageTypeId,  bu.BusinessOwnerLoginId,  bu.Qualification,  YEAR(bu.StartDate) AS StartYear,  YEAR(bu.EndDate) AS EndYear,  bu.UniversityName,bu.UniversityLogo,dbo.GetTeacherUniversityLogoWithPath(bu.UniversityLogo) as UniversityLogoWithPath FROM    BusinessUniversities bu WHERE  bu.BusinessOwnerLoginId = @businessOwnerLoginId;

   end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserAccount_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageUserAccount_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All  Student in Super Admin
	if(@mode=1)
	begin
		select  s.Id ,s.UserLoginId,IsBlocked,ul.Email,s.FirstName +''+s.LastName as Name, s.ProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as ProfileImageWithPath,ul.CreatedOn,(CONVERT(varchar, ul.CreatedOn,106)) as CreatedOn_FormatDate, IsNull(s.BlockReason, '') as BlockReason
		INTO #AllStudentUserAccountManageBySuperAdmin
		from Students s
		inner join UserLogins ul on s.UserLoginId = ul.Id 
		where  ul.IsDeleted = 0
		and
		(s.FirstName + '' + s.LastName LIKE '%'+@searchFilter+'%' OR
	      ul.Email LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllStudentUserAccountManageBySuperAdmin);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllStudentUserAccountManageBySuperAdmin
		order by
		 CASE WHEN @sorting = 'Name' AND @sortOrder = 'ASC' THEN Name END,
				CASE WHEN @sorting = 'Name' AND @sortOrder = 'DESC' THEN Name END DESC,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'ASC' THEN Email END,
				CASE WHEN @sorting = 'Email' AND @sortOrder = 'DESC' THEN Email END DESC,

		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllStudentUserAccountManageBySuperAdmin
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserCertificates]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUserCertificates] 
(
	@id bigint,
	@userLoginId bigint,
	@mode int,
	@certificateNumber nvarchar(max)
)
as
begin
	-- Get All User Certificates
	if(@mode=1)
	begin
		select uc.Id, uc.CertificateId, uc.UserLoginId, c.Name as CertificateName, c.CertificateIcon as CertificateIcon
		from UserCertificates uc 
		inner join Certificates c on uc.CertificateId = c.Id 
		where uc.UserLoginId = @userLoginId
	end
	-- Get User Certificates by Certificate-Number
	if(@mode=2)
	begin
		select uc.*, c.Name as CertificateName, c.CertificateIcon as CertificateIcon, dbo.GetUserCertificateWithPath(uc.CertificateFile) as CertificateFileWithPath
		from UserCertificates uc 
		inner join Certificates c on uc.CertificateId = c.Id 
		where uc.IssuedCertificateNumber = @certificateNumber
	end
	-- Get All User Certificates Basic Info for Visitor-Panel Showcase. (like instructor certificates)
	if(@mode=3)
	begin
		select uc.Id, uc.CertificateId, uc.UserLoginId, c.Name as CertificateName, c.CertificateIcon CertificateIcon, dbo.GetCertificateImageWithPath(c.CertificateIcon) as CertificateIconWithPath, uc.LicenseId, l.Title as LicenseName, l.LicenseLogo, dbo.GetLicenseLogoImageWithPath(l.LicenseLogo) as LicenseLogoWithPath
		from UserCertificates uc 
		inner join Certificates c on uc.CertificateId = c.Id 
		inner join Licenses l on uc.LicenseId = l.Id
		where uc.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserContentImage]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_ManageUserContentImage]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get All User-Image by User-Login-Id
	if(@mode = 1)
	begin
		select UI.Id, UI.UserLoginId, UI.ImageTitle, UI.Image, dbo.GetUserContentImageWithPath( UI.Image) as ImageThumbNailImageWithPath from UserContentImages UI where   UI.UserLoginId = @userLoginId and IsDeleted = 0 
	end

	----Get User Image Detail By Id (TO Edit User Detail) 
	if(@mode = 2)
	begin
		select UI.Id, UI.UserLoginId, UI.ImageTitle, UI.Image, dbo.GetUserContentImageWithPath( UI.Image) as ImageThumbNailImageWithPath from UserContentImages UI where UI.Id = @id 
	end

end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserContentVideos]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUserContentVideos]
(
	@id bigint,
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get All User-Videos by User-Login-Id
	if(@mode = 1)
	begin
		select uv.Id,uv.UserLoginId,uv.VideoTitle,uv.VideoDescription,uv.VideoLink, dbo.GetUserContentVedioImageWithPath( uv.VideoThumbNail) as VideoThumbNailImageWithPath from UserContentVideos uv where    uv.UserLoginId = @userLoginId and IsDeleted = 0  
	end
	if(@mode = 2)
	begin
		select uv.Id,uv.UserLoginId,uv.VideoTitle,uv.VideoDescription,uv.VideoLink, dbo.GetUserContentVedioImageWithPath( uv.VideoThumbNail) as VideoThumbNailImageWithPath from UserContentVideos uv where uv.Id = @id 
	end

end

GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserFamilyRelations]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUserFamilyRelations]
(
	@id bigint,
	@masterId nvarchar(max),
	@user1LoginId bigint,
	@mode int
)
as
begin
	-- Get All Family members of User by its Master Id
	if(@mode=1)
	begin
		set @user1LoginId = (select Id from UserLogins ul where ul.MasterId = @masterId)

		select ufr.User1LoginId, ufr.User2LoginId, ufr.User1Relation_FieldTypeCatalogKey, ufr.User2Relation_FieldTypeCatalogKey, 
			s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage as UserProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as UserProfileImageWithPath,
			ftc.TextValue as User2Relation_FieldTypeCatalogTextValue
		from UserFamilyRelations ufr
		inner join Students s on ufr.User2LoginId =  s.UserLoginId
		inner join FieldTypeCatalogs ftc on ufr.User2Relation_FieldTypeCatalogKey = ftc.KeyName
		where ufr.User1LoginId = @user1LoginId
	end
	-- Get All Family Members of User by its User-Login-Id
	else if(@mode=2)
	begin
		select ufr.User1LoginId, ufr.User2LoginId, ufr.User1Relation_FieldTypeCatalogKey, ufr.User2Relation_FieldTypeCatalogKey, 
			s.FirstName, s.LastName, s.FirstName + ' ' + s.LastName as FullName, s.ProfileImage as UserProfileImage, dbo.GetStudentImageWithPath(s.ProfileImage) as UserProfileImageWithPath,
			ftc.TextValue as User2Relation_FieldTypeCatalogTextValue
		from UserFamilyRelations ufr
		inner join Students s on ufr.User2LoginId =  s.UserLoginId
		inner join FieldTypeCatalogs ftc on ufr.User2Relation_FieldTypeCatalogKey = ftc.KeyName
		where ufr.User1LoginId = @user1LoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserLogin]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUserLogin]
(
	@id bigint,
	@uniqueUserId nvarchar(max),
	@email nvarchar(max),
	@password nvarchar(max),
	@roleId int,
	@mode int
)
as
begin
	-- Get User-Login Data by Unique-User-Id
	if(@mode=1)
	begin
		select * from UserLogins ul where ul.UniqueUserId = @uniqueUserId
	end
	--- Confirm  email Id
	else if(@mode=2)
    begin
		SELECT ul.* FROM UserLogins ul WHERE ul.Email = @email AND ul.IsDeleted = 0
		  AND (
			(@roleId = 1 AND ul.RoleId IN (1, 2))
			OR (@roleId = 4 AND ul.RoleId IN (4, 5))
			OR (@roleId = 3 AND ul.RoleId = 3)
		  );

		   --if(@roleId= 1)
		   --    (select ul.* from UserLogins ul where ul.RoleId In(1,2) and ul.Email = @email and ul.IsDeleted = 0)
		
			  --else if(@roleId = 4)
			  --(select ul.* from UserLogins ul where ul.RoleId In(4,5) and ul.Email = @email and ul.IsDeleted = 0)
			  --else if(@roleId = 3)
			  --(select ul.* from UserLogins ul where ul.RoleId = @roleId and ul.Email = @email and ul.IsDeleted = 0)
				--UNION ALL
				--(select ul.* from UserLogins ul inner join Staffs s on s.UserLoginId = ul.Id where ul.Email = @email and LEN(@email) > 0 and ul.IsDeleted = 0 and RoleId = @roleId)
				-- UNION ALL
				--	(select ul.* from UserLogins ul inner join Students stu on stu.UserLoginId = ul.Id inner join Students s on s.UserLoginId = ul.Id where ul.Email = @email and LEN(@email) > 0 and ul.IsDeleted = 0 and RoleId = @roleId)
	end
	-- Reset Password
	else if(@mode = 3)
	begin
		if exists(select email from UserLogins where id = @id)
		begin
			update UserLogins set Password = @password, ResetPasswordToken = '' where id = @id;
			SELECT 1 AS ret,
                   'Password has been successfully updated' AS responseMessage,
                   'BusinessPanel' AS resourceFileName,
                   'PasswordCreated_SuccessMessage' AS resourceKey;
		end
		else
		begin
			select -1 as ret, 'User does not exists' as responseMessage
		end
	end
    -- Get User-Login Data by Unique-User-Id
	else if(@mode=4)
	begin
		select * from UserLogins ul where ul.Id = @id
	end
	-- Update Email as Confrimed
	else if(@mode=5)
	begin
		update UserLogins set EmailConfirmed = 1 where id = @id
		SELECT 1 AS ret, 'Email has been marked as confrimed succesfully!' AS responseMessage
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageUserPermissions]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageUserPermissions]
(
	@userLoginId bigint,
	@mode int
)
as
begin
	-- Get User-Permissions by UserLoginId
	if(@mode=1)
	begin
		select p.* from UserLoginPermissions ulp inner join Permissions p on ulp.PermissionId = p.Id where ulp.UserLoginId = @userLoginId
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_ManageViewPauseClassRequest_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ManageViewPauseClassRequest_Pagination]
(
	@id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Pause Class Requests View  Detail By UserLoginId
	if(@mode=1)
	begin
		

		SELECT  cp.Id,cp.ClassBookingId, c.Name as ClassName,cp.Reason,bo.BusinessName,cp.PauseStartDate,cp.PauseEndDate,cp.CreatedOn, (CONVERT(varchar, cp.CreatedOn,106)) as CreatedOn_FormatDate,cp.BusinessReply,cp.Status,cb.StartDate,cb.EndDate, bo.UserLoginId as BusinessOwnerLoginId, dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as BusinessLogoWithPath
		INTO #GetAllPauseClassRequestDetail 
	FROM  Classes c
	inner join  BusinessOwners bo ON c.BusinessOwnerLoginId = bo.UserLoginId
	inner join  ClassBookings cb ON c.Id = cb.ClassId
	inner join  ClassPauseRequests cp ON cb.Id = cp.ClassBookingId
	where cb.StudentUserLoginId =  @userLoginId
		and cp.IsDeleted = 0 
		and
		(c.Name LIKE '%'+@searchFilter+'%' OR
		cp.PauseStartDate LIKE '%'+@searchFilter+'%' OR
		cp.Reason LIKE '%'+@searchFilter+'%' OR
		bo.BusinessName LIKE '%'+@searchFilter+'%' OR
		cp.CreatedOn LIKE '%'+@searchFilter+'%' OR
		cp.BusinessReply LIKE '%'+@searchFilter+'%' OR
		cp.Status LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,cp.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #GetAllPauseClassRequestDetail);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END ,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'ASC' THEN PauseStartDate END,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'DESC' THEN PauseStartDate END DESC,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'ASC' THEN Reason END,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'DESC' THEN Reason END DESC,		
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'BusinessReply' AND @sortOrder = 'ASC' THEN BusinessReply END,
				CASE WHEN @sorting = 'BusinessReply' AND @sortOrder = 'DESC' THEN BusinessReply END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #GetAllPauseClassRequestDetail
		order by
		CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'ASC' THEN ClassName END ,
				CASE WHEN @sorting = 'ClassName' AND @sortOrder = 'DESC' THEN ClassName END DESC,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'ASC' THEN PauseStartDate END,
				CASE WHEN @sorting = 'PauseStartDate' AND @sortOrder = 'DESC' THEN PauseStartDate END DESC,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'ASC' THEN Reason END,
				CASE WHEN @sorting = 'Reason' AND @sortOrder = 'DESC' THEN Reason END DESC,		
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'BusinessReply' AND @sortOrder = 'ASC' THEN BusinessReply END,
				CASE WHEN @sorting = 'BusinessReply' AND @sortOrder = 'DESC' THEN BusinessReply END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #GetAllPauseClassRequestDetail
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_NotificationDetail_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_NotificationDetail_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Studdent List PlanBooking in business owner
	if(@mode=1)
	begin
		SELECT bo.Id,
			bo.UserLoginId, bo.FirstName+''+bo.LastName as BusinessName,
			Nt.NotificationMessage, Nt.TransferrequestId,Nt.Status,
			CASE 
				WHEN Nt.Status = 1 THEN 'Accept'
				WHEN Nt.Status = 2 THEN 'Reject'
			END AS Action,Nt.CreatedOn,
			 CONVERT(varchar, Nt.CreatedOn, 106) AS CreatedOn_FormatDate
		INTO #AllNotificationByBusinessOwner
		FROM NotificationTransfers Nt
		LEFT JOIN BusinessOwners bo ON Nt.TransferrequestId = bo.Id 
		Where @businessOwnerLoginId IN (SELECT splitdata AS nvarchar FROM dbo.fnSplitString(Nt.TransferSenderId, ','))
		and
		(bo.FirstName + ''+bo.LastName LIKE '%'+@searchFilter+'%' OR
		  Nt.NotificationMessage LIKE '%'+@searchFilter+'%' OR
		  Nt.Status LIKE '%'+@searchFilter+'%' OR		 
	    Nt.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,Nt.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllNotificationByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'ASC' THEN NotificationMessage END,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'DESC' THEN NotificationMessage END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllNotificationByBusinessOwner
		order by
		       	CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'ASC' THEN NotificationMessage END,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'DESC' THEN NotificationMessage END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllNotificationByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_TransferNotification_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_TransferNotification_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Transfer-Package Notification by business owner
	if(@mode=1)
	begin
		SELECT
		bo.FirstName + ' ' + bo.LastName AS BusinessName,
		Nt.Id,
		Nt.NotificationMessage,
		Nt.Status,
		Nt.CreatedOn,
		Nt.TransferSenderId,
		CONVERT(varchar, Nt.CreatedOn, 106) AS CreatedOn_FormatDate
		INTO #AllTransferNotificationByBusinessOwner
		FROM NotificationTransfers Nt
		LEFT JOIN BusinessOwners bo ON Nt.TransferrequestId = CAST(bo.Id AS nvarchar)
		LEFT JOIN TransferPackages tp ON Nt.TransferrequestId = tp.Id
		WHERE
		CAST(@businessOwnerLoginId AS nvarchar) IN (Nt.TransferSenderId)
		and
		(bo.FirstName + ''+bo.LastName LIKE '%'+@searchFilter+'%' OR
		  Nt.NotificationMessage LIKE '%'+@searchFilter+'%' OR
		  Nt.Status LIKE '%'+@searchFilter+'%' OR		 
	    Nt.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,Nt.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTransferNotificationByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'ASC' THEN NotificationMessage END,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'DESC' THEN NotificationMessage END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTransferNotificationByBusinessOwner
		order by
		       	CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN BusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN BusinessName END DESC,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'ASC' THEN NotificationMessage END,
				CASE WHEN @sorting = 'NotificationMessage' AND @sortOrder = 'DESC' THEN NotificationMessage END DESC,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'ASC' THEN Status END,
				CASE WHEN @sorting = 'Status' AND @sortOrder = 'DESC' THEN Status END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTransferNotificationByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_TransferPackage_Pagination]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_TransferPackage_Pagination]
(
    @id bigint,
	@businessOwnerLoginId bigint,
	@userLoginId bigint,
	@start INT,
	@searchFilter VARCHAR(max),
	@pageSize INT,  
	@sorting VARCHAR(500),
	@sortOrder VARCHAR(5),
	@mode int
)
as
begin
	declare @businessOwnerId bigint = 0;
	declare @totalRecords bigint = 0;

	if(@searchFilter = '' and @searchFilter = null)
	begin
		set @start = 0;
	end

	SET NOCOUNT OFF

	-- Get All Transfer-Package List by business owner
	if(@mode=1)
	begin
		SELECT
		tp.Id,
		tp.TransferDate,
		--tp.TransferReason,
		tp.TransferStatus,
		--tp.RejectionReason,
		tp.TransferType,
		tp.TransferToUserLoginId,
		tp.TransferFromUserLoginId,
		bp.PlanName,
		tp.CreatedOn,
		CONVERT(varchar, tp.CreatedOn, 106) AS CreatedOn_FormatDate,
		CONCAT(sf.FirstName, ' ', sf.LastName) AS TransferFromStudentName,
		CONCAT(st.FirstName, ' ', st.LastName) AS TransferToStudentName,
		dbo.GetStudentImageWithPath(st.ProfileImage) as TrasferToStudentProfileImageWithPath,
		--CONCAT(bo.FirstName, ' ', bo.LastName) AS BusinessName,
		dbo.GetStudentImageWithPath(sf.ProfileImage) as TrasferFromStudentProfileImageWithPath,
		CONCAT(bo.FirstName, ' ', bo.LastName) AS TrasferToBusinessName,
		dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) as TransferToBusinessLogoWithPath
		--case when (TransferType = 1) then dbo.GetStudentImageWithPath(sf.ProfileImage) else dbo.GetBusinessLogoImageWithPath(bo.BusinessLogo) end as TrasferToImageWithPath
		INTO #AllTransferPackageByBusinessOwner
		FROM TransferPackages tp
		LEFT JOIN PlanBookings bp ON tp.PlanBookingId = bp.Id
		LEFT JOIN Students sf ON tp.TransferFromUserLoginId = sf.UserLoginId
		LEFT JOIN Students st ON tp.TransferToUserLoginId = st.UserLoginId
		LEFT JOIN BusinessOwners bo ON tp.TransferToUserLoginId = bo.UserLoginId
		where tp.BusinessOwnerLoginId = @businessOwnerLoginId
		and
		(sf.FirstName + ' ' + sf.LastName LIKE '%'+@searchFilter+'%' OR
		st.FirstName + ' ' + st.LastName LIKE '%'+@searchFilter+'%' OR
		bo.FirstName + ''+bo.LastName LIKE '%'+@searchFilter+'%' OR
		 bp.PlanName LIKE '%'+@searchFilter+'%' OR
		tp.TransferDate LIKE '%'+@searchFilter+'%' OR
		 tp.TransferStatus LIKE '%'+@searchFilter+'%' OR
	    tp.CreatedOn LIKE '%'+@searchFilter+'%' OR
		(CONVERT(varchar,tp.CreatedOn,106)) LIKE '%'+@searchFilter+'%' OR
		@searchFilter = '')

		set @totalRecords = (select Count(*) from #AllTransferPackageByBusinessOwner);

		select ROW_NUMBER() OVER (order by
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'ASC' THEN TransferFromStudentName END,
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'DESC' THEN TransferFromStudentName END DESC,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'ASC' THEN TransferToStudentName END,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'DESC' THEN TransferToStudentName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN TrasferToBusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN TrasferToBusinessName END DESC,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'ASC' THEN TransferDate END,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'DESC' THEN TransferDate END DESC,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'ASC' THEN TransferStatus END,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'DESC' THEN TransferStatus END DESC,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'ASC' THEN TransferType END,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'DESC' THEN TransferType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
				CreatedOn desc) as SerialNumber, *, @totalRecords as TotalRecords 
		from #AllTransferPackageByBusinessOwner
		order by
		       	CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'ASC' THEN TransferFromStudentName END,
				CASE WHEN @sorting = 'TransferFromStudentName' AND @sortOrder = 'DESC' THEN TransferFromStudentName END DESC,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'ASC' THEN TransferToStudentName END,
				CASE WHEN @sorting = 'TransferToStudentName' AND @sortOrder = 'DESC' THEN TransferToStudentName END DESC,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'ASC' THEN TrasferToBusinessName END,
				CASE WHEN @sorting = 'BusinessName' AND @sortOrder = 'DESC' THEN TrasferToBusinessName END DESC,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'ASC' THEN PlanName END,
				CASE WHEN @sorting = 'PlanName' AND @sortOrder = 'DESC' THEN PlanName END DESC,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'ASC' THEN TransferDate END,
				CASE WHEN @sorting = 'TransferDate' AND @sortOrder = 'DESC' THEN TransferDate END DESC,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'ASC' THEN TransferStatus END,
				CASE WHEN @sorting = 'TransferStatus' AND @sortOrder = 'DESC' THEN TransferStatus END DESC,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'ASC' THEN TransferType END,
				CASE WHEN @sorting = 'TransferType' AND @sortOrder = 'DESC' THEN TransferType END DESC,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'ASC' THEN CreatedOn END,
				CASE WHEN @sorting = 'CreatedOn' AND @sortOrder = 'DESC' THEN CreatedOn END DESC,
		CreatedOn desc
		OFFSET @start ROWS
		FETCH NEXT @pageSize ROWS ONLY

		Drop Table #AllTransferPackageByBusinessOwner
	end
end
GO
/****** Object:  StoredProcedure [dbo].[sp_UpdatePassword]    Script Date: 19-02-2024 11:14:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[sp_UpdatePassword]
(
	@userLoginId bigint,
	@password nvarchar(max),
	@mode int
)
as 
begin 
	if(@mode=1)
	begin
		if not exists(select ul.Id from UserLogins ul where Id = @userLoginId)
		begin
			select -1 as ret, 'User not found!' as responseMessage, 'BusinessPanel' as resourceFileName, 'UserNotFound_ErrorMessage' as resourceKey
		end
		else 
		begin
			Update UserLogins set Password = @password where Id = @userLoginId
			select 1 as ret, 'Password updated successfully!' as responseMessage, 'BusinessPanel' as resourceFileName, 'PasswordUpdate_SuccessMessage' as resourceKey
		end
	end
end
GO
USE [master]
GO
ALTER DATABASE [masterzone_db] SET  READ_WRITE 
GO
